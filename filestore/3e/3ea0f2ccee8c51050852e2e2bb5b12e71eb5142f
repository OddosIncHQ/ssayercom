)]}'
{"version": 3, "sources": ["/web_enterprise/static/src/main.js", "/web/static/src/start.js", "/web/static/src/legacy/legacy_setup.js", "/web_studio/static/src/client_action/studio_action_loader.js", "/web_studio/static/src/client_action/app_creator/app_creator_shortcut.js", "/voip/static/src/main.js"], "mappings": "AAAA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACnEA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtDA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACpBA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACTA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA", "sourcesContent": ["/** @odoo-module **/\n\nimport { startWebClient } from \"@web/start\";\nimport { WebClientEnterprise } from \"./webclient/webclient\";\n\n/**\n * This file starts the enterprise webclient. In the manifest, it replaces\n * the community main.js to load a different webclient class\n * (WebClientEnterprise instead of WebClient)\n */\n\nif (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker\n        .register(\"/web/service-worker.js\", { scope: \"/web\" })\n        .then((registration) => {\n            console.info(\"Registration successful, scope is:\", registration.scope);\n        })\n        .catch((error) => {\n            console.error(\"Service worker registration failed, error:\", error);\n        });\n}\n\nstartWebClient(WebClientEnterprise);\n", "/** @odoo-module **/\n\nimport { makeEnv, startServices } from \"./env\";\nimport { legacySetupProm } from \"./legacy/legacy_setup\";\nimport { mapLegacyEnvToWowlEnv } from \"./legacy/utils\";\nimport { localization } from \"@web/core/l10n/localization\";\nimport { session } from \"@web/session\";\nimport { renderToString } from \"./core/utils/render\";\nimport { setLoadXmlDefaultApp, templates } from \"@web/core/assets\";\nimport { hasTouch } from \"@web/core/browser/feature_detection\";\n\nimport { App, whenReady } from \"@odoo/owl\";\n\n/**\n * Function to start a webclient.\n * It is used both in community and enterprise in main.js.\n * It's meant to be webclient flexible so we can have a subclass of\n * webclient in enterprise with added features.\n *\n * @param {Component} Webclient\n */\nexport async function startWebClient(Webclient) {\n    odoo.info = {\n        db: session.db,\n        server_version: session.server_version,\n        server_version_info: session.server_version_info,\n        isEnterprise: session.server_version_info.slice(-1)[0] === \"e\",\n    };\n    odoo.isReady = false;\n\n    // setup environment\n    const env = makeEnv();\n    await startServices(env);\n\n    // start web client\n    await whenReady();\n    const legacyEnv = await legacySetupProm;\n    mapLegacyEnvToWowlEnv(legacyEnv, env);\n    const app = new App(Webclient, {\n        name: \"Odoo Web Client\",\n        env,\n        templates,\n        dev: env.debug,\n        warnIfNoStaticProps: true,\n        translatableAttributes: [\"data-tooltip\"],\n        translateFn: env._t,\n    });\n    renderToString.app = app;\n    setLoadXmlDefaultApp(app);\n    const root = await app.mount(document.body);\n    const classList = document.body.classList;\n    if (localization.direction === \"rtl\") {\n        classList.add(\"o_rtl\");\n    }\n    if (env.services.user.userId === 1) {\n        classList.add(\"o_is_superuser\");\n    }\n    if (env.debug) {\n        classList.add(\"o_debug\");\n    }\n    if (hasTouch()) {\n        classList.add(\"o_touch_device\");\n    }\n    // delete odoo.debug; // FIXME: some legacy code rely on this\n    odoo.__WOWL_DEBUG__ = { root };\n    odoo.isReady = true;\n}\n", "/** @odoo-module alias=web.legacySetup **/\n\nimport { registry } from \"../core/registry\";\nimport {\n    makeLegacyNotificationService,\n    makeLegacySessionService,\n    makeLegacyDialogMappingService,\n    makeLegacyCrashManagerService,\n    makeLegacyCommandService,\n    makeLegacyDropdownService,\n} from \"./utils\";\nimport { makeLegacyActionManagerService } from \"./backend_utils\";\nimport * as AbstractService from \"web.AbstractService\";\nimport legacyEnv from \"web.env\";\nimport * as session from \"web.session\";\nimport makeLegacyWebClientService from \"web.pseudo_web_client\";\nimport { templates } from \"@web/core/assets\";\n\nimport { Component, whenReady } from \"@odoo/owl\";\n\nlet legacySetupResolver;\nexport const legacySetupProm = new Promise((resolve) => {\n    legacySetupResolver = resolve;\n});\n\n// build the legacy env and set it on Component (this was done in main.js,\n// with the starting of the webclient)\n(async () => {\n    AbstractService.prototype.deployServices(legacyEnv);\n    Component.env = legacyEnv;\n    const legacyActionManagerService = makeLegacyActionManagerService(legacyEnv);\n    const serviceRegistry = registry.category(\"services\");\n    serviceRegistry.add(\"legacy_action_manager\", legacyActionManagerService);\n    // add a service to redirect rpc events triggered on the bus in the\n    // legacy env on the bus in the wowl env\n    const legacySessionService = makeLegacySessionService(legacyEnv, session);\n    serviceRegistry.add(\"legacy_session\", legacySessionService);\n    const legacyWebClientService = makeLegacyWebClientService(legacyEnv);\n    serviceRegistry.add(\"legacy_web_client\", legacyWebClientService);\n    serviceRegistry.add(\"legacy_notification\", makeLegacyNotificationService(legacyEnv));\n    serviceRegistry.add(\"legacy_crash_manager\", makeLegacyCrashManagerService(legacyEnv));\n    const legacyDialogMappingService = makeLegacyDialogMappingService(legacyEnv);\n    serviceRegistry.add(\"legacy_dialog_mapping\", legacyDialogMappingService);\n    const legacyCommandService = makeLegacyCommandService(legacyEnv);\n    serviceRegistry.add(\"legacy_command\", legacyCommandService);\n    serviceRegistry.add(\"legacy_dropdown\", makeLegacyDropdownService(legacyEnv));\n    const wowlToLegacyServiceMappers = registry.category(\"wowlToLegacyServiceMappers\").getEntries();\n    for (const [legacyServiceName, wowlToLegacyServiceMapper] of wowlToLegacyServiceMappers) {\n        serviceRegistry.add(legacyServiceName, wowlToLegacyServiceMapper(legacyEnv));\n    }\n    await Promise.all([whenReady(), session.is_bound]);\n    legacyEnv.templates = templates;\n    legacySetupResolver(legacyEnv);\n})();\n", "/** @odoo-module **/\n\nimport { registry } from \"@web/core/registry\";\nimport { LazyComponent } from \"@web/core/assets\";\nimport { standardActionServiceProps } from \"@web/webclient/actions/action_service\";\n\nimport { Component, xml } from \"@odoo/owl\";\n\nclass StudioActionLoader extends Component {\n    static components = { LazyComponent };\n    static template = xml`\n        <LazyComponent bundle=\"'web_studio.studio_assets'\" Component=\"'StudioClientAction'\" props=\"props\"/>\n    `;\n    static props = {\n        ...standardActionServiceProps,\n        props: { type: Object, optional: true },\n        Component: { type: Function, optional: true },\n    };\n}\nregistry.category(\"actions\").add(\"studio\", StudioActionLoader);\n", "/** @odoo-module **/\n\nimport { registry } from \"@web/core/registry\";\n\nconst actionRegistry = registry.category(\"actions\");\n\nactionRegistry.add(\"action_web_studio_app_creator\",\n    (env) => env.services.studio.open(env.services.studio.MODES.APP_CREATOR)\n);\n", "/* @odoo-module */\n\nimport { voipService } from \"@voip/voip_service\";\nimport { userAgentService } from \"@voip/user_agent_service\";\nimport { registry } from \"@web/core/registry\";\nimport { ringtoneService } from \"@voip/ringtone_service\";\n\nregistry\n    .category(\"services\")\n    .add(\"voip\", voipService)\n    .add(\"ringtone\", ringtoneService)\n    .add(\"voip.user_agent\", userAgentService);\n"], "file": "/web/assets/1598-2f5cda0/web.assets_backend_prod_only.js", "sourceRoot": "../../../"}