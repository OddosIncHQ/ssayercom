
/*************************************************************
*  Filepath: /web/static/tests/ignore_missing_deps_start.js  *
*  Lines: 4                                                  *
*************************************************************/
// This module has for sole purpose to mark all odoo modules defined between it
// and ignore_missing_deps_stop as ignored for missing dependency errors.
// see the template conditional_assets_tests to understand how it's used.
window.__odooIgnoreMissingDependencies = true;
;

/*********************************************************************
*  Filepath: /base/static/tests/test_ir_model_fields_translation.js  *
*  Lines: 44                                                         *
*********************************************************************/
odoo.define('@base/../tests/test_ir_model_fields_translation', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

"use strict";

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");
function checkLoginColumn(translation) {
    return [
        stepUtils.showAppsMenuItem(), {
            content: "Settings",
            trigger: 'a[data-menu-xmlid="base.menu_administration"]',
            run: 'click',
        }, {
            content: "Open Users & Companies",
            trigger: '[data-menu-xmlid="base.menu_users"]',
            run: "click",
        }, {
            content: "Open Users",
            trigger: '[data-menu-xmlid="base.menu_action_res_users"]',
            run: "click",
        }, {
            content: `Login column should be ${translation}`,
            trigger: `[data-name="login"] span:contains("${translation}")`,
        }
    ]
}

registry.category("web_tour.tours").add('ir_model_fields_translation_tour', {
    test: true,
    url: '/web',
    steps: () => checkLoginColumn('Identifiant')
});

registry.category("web_tour.tours").add('ir_model_fields_translation_tour2', {
    test: true,
    url: '/web',
    steps: () => checkLoginColumn('Identifiant2')
});

return __exports;
});
;

/******************************************************************
*  Filepath: /web/static/tests/legacy/helpers/test_utils_file.js  *
*  Lines: 165                                                     *
******************************************************************/
odoo.define('@web/../tests/legacy/helpers/test_utils_file', [], function (require) {
'use strict';
let __exports = {};
/** @odoo-module alias=web.test_utils_file **/

/**
 * FILE Test Utils
 *
 * This module defines various utility functions to help simulate events with
 * files, such as drag-and-drop.
 *
 * Note that all methods defined in this module are exported in the main
 * testUtils file.
 */


//------------------------------------------------------------------------------
// Private functions
//------------------------------------------------------------------------------

/**
 * Create a fake object 'dataTransfer', linked to some files, which is passed to
 * drag and drop events.
 *
 * @param {Object[]} files
 * @returns {Object}
 */
function _createFakeDataTransfer(files) {
    return {
        dropEffect: 'all',
        effectAllowed: 'all',
        files,
        getData: function () {
            return files;
        },
        items: [],
        types: ['Files'],
    };
}

//------------------------------------------------------------------------------
// Public functions
//------------------------------------------------------------------------------

/**
 * Create a file object, which can be used for drag-and-drop.
 *
 * @param {Object} data
 * @param {string} data.name
 * @param {string} data.content
 * @param {string} data.contentType
 * @returns {Promise<Object>} resolved with file created
 */
function createFile(data) {
    // Note: this is only supported by Chrome, and does not work in Incognito mode
    return new Promise(function (resolve, reject) {
        var requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;
        if (!requestFileSystem) {
            throw new Error('FileSystem API is not supported');
        }
        requestFileSystem(window.TEMPORARY, 1024 * 1024, function (fileSystem) {
            fileSystem.root.getFile(data.name, { create: true }, function (fileEntry) {
                fileEntry.createWriter(function (fileWriter) {
                    fileWriter.onwriteend = function (e) {
                        fileSystem.root.getFile(data.name, {}, function (fileEntry) {
                            fileEntry.file(function (file) {
                                resolve(file);
                            });
                        });
                    };
                    fileWriter.write(new Blob([ data.content ], { type: data.contentType }));
                });
            });
        });
    });
}

/**
 * Drag a file over a DOM element
 *
 * @param {$.Element} $el
 * @param {Object} file must have been created beforehand (@see createFile)
 */
function dragoverFile($el, file) {
    var ev = new Event('dragover', { bubbles: true });
    Object.defineProperty(ev, 'dataTransfer', {
        value: _createFakeDataTransfer(file),
    });
    $el[0].dispatchEvent(ev);
}

/**
 * Drop a file on a DOM element.
 *
 * @param {$.Element} $el
 * @param {Object} file must have been created beforehand (@see createFile)
 */
function dropFile($el, file) {
    var ev = new Event('drop', { bubbles: true, });
    Object.defineProperty(ev, 'dataTransfer', {
        value: _createFakeDataTransfer([file]),
    });
    $el[0].dispatchEvent(ev);
}

/**
 * Drop some files on a DOM element.
 *
 * @param {$.Element} $el
 * @param {Object[]} files must have been created beforehand (@see createFile)
 */
function dropFiles($el, files) {
    var ev = new Event('drop', { bubbles: true, });
    Object.defineProperty(ev, 'dataTransfer', {
        value: _createFakeDataTransfer(files),
    });
    $el[0].dispatchEvent(ev);
}

/**
 * Set files in a file input
 *
 * @param {DOM.Element} el
 * @param {Object[]} files must have been created beforehand
 *   @see testUtils.file.createFile
 */
function inputFiles(el, files) {
    // could not use _createFakeDataTransfer as el.files assignation will only
    // work with a real FileList object.
    const dataTransfer = new window.DataTransfer();
    for (const file of files) {
        dataTransfer.items.add(file);
    }
    el.files = dataTransfer.files;
    /**
     * Changing files programatically is not supposed to trigger the event but
     * it does in Chrome versions before 73 (which is on runbot), so in that
     * case there is no need to make a manual dispatch, because it would lead to
     * the files being added twice.
     */
    const versionRaw = navigator.userAgent.match(/Chrom(e|ium)\/([0-9]+)\./);
    const chromeVersion = versionRaw ? parseInt(versionRaw[2], 10) : false;
    if (!chromeVersion || chromeVersion >= 73) {
        el.dispatchEvent(new Event('change'));
    }
}

//------------------------------------------------------------------------------
// Exposed API
//------------------------------------------------------------------------------

__exports[Symbol.for("default")] = {
    createFile: createFile,
    dragoverFile: dragoverFile,
    dropFile: dropFile,
    dropFiles,
    inputFiles,
};

return __exports;
});

odoo.define(`web.test_utils_file`, ['@web/../tests/legacy/helpers/test_utils_file'], function (require) {
                        return require('@web/../tests/legacy/helpers/test_utils_file')[Symbol.for("default")];
                        });
;

/************************************************************************
*  Filepath: /mail/static/tests/tours/discuss_channel_as_guest_tour.js  *
*  Lines: 36                                                            *
************************************************************************/
odoo.define('@mail/../tests/tours/discuss_channel_as_guest_tour', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/* @odoo-module */

const { registry } = require("@web/core/registry");

registry
    .category("web_tour.tours")
    .add("mail/static/tests/tours/discuss_channel_as_guest_tour.js", {
        test: true,
        steps: () => [
            {
                content: "Channel secret token has been hidden on welcome page",
                trigger: ".o-mail-WelcomePage",
                run() {
                    if (!window.location.pathname.startsWith("/discuss/channel")) {
                        console.error("Channel secret token is still present in URL.");
                    }
                },
            },
            {
                content: "Click join",
                trigger: "button[title='Join Channel']",
                extraTrigger: ".o-mail-Thread",
            },
            {
                content: "Check that we are on channel page",
                trigger: ".o-mail-Thread",
                run() {},
            },
        ],
    });

return __exports;
});
;

/**************************************************************
*  Filepath: /mail/static/tests/tours/discuss_public_tour.js  *
*  Lines: 142                                                 *
**************************************************************/
odoo.define('@mail/../tests/tours/discuss_public_tour', ['@web/core/registry', 'web.test_utils_file'], function (require) {
'use strict';
let __exports = {};
/* @odoo-module */

const { registry } = require("@web/core/registry");
const { createFile, inputFiles } = require("web.test_utils_file");

registry.category("web_tour.tours").add("mail/static/tests/tours/discuss_public_tour.js", {
    test: true,
    steps: () => [
        {
            trigger: ".o-mail-DiscussPublic",
            extraTrigger: ".o-mail-Thread",
            run() {},
        },
        {
            content: "Check that we are on channel page",
            trigger: ".o-mail-Thread",
            run() {
                if (!window.location.pathname.startsWith("/discuss/channel")) {
                    console.error("Channel secret token is still present in URL.");
                }
                // Wait for modules to be loaded or failed for the next step
                odoo.__DEBUG__.didLogInfo.then(() => {
                    const { missing, failed, unloaded } = odoo.__DEBUG__.jsModules;
                    if ([missing, failed, unloaded].some((arr) => arr.length)) {
                        console.error(
                            "Couldn't load all JS modules.",
                            JSON.stringify({ missing, failed, unloaded })
                        );
                    }
                    document.body.classList.add("o_discuss_channel_public_modules_loaded");
                });
            },
            extraTrigger: ".o_discuss_channel_public_modules_loaded",
        },
        {
            content: "Wait for all modules loaded check in previous step",
            trigger: ".o_discuss_channel_public_modules_loaded",
            run() {},
        },
        {
            content: "Write something in composer",
            trigger: ".o-mail-Composer-input",
            run: "text cheese",
        },
        {
            content: "Add one file in composer",
            trigger: ".o-mail-Composer button[aria-label='Attach files']",
            async run() {
                const file = await createFile({
                    content: "hello, world",
                    contentType: "text/plain",
                    name: "text.txt",
                });
                inputFiles(document.querySelector(".o-mail-Composer-coreMain .o_input_file"), [
                    file,
                ]);
            },
        },
        {
            content: "Check the earlier provided attachment is listed",
            trigger: '.o-mail-AttachmentCard[title="text.txt"]',
            extra_trigger: ".o-mail-AttachmentCard:not(.o-isUploading)", // waiting the attachment to be uploaded
            run() {},
        },
        {
            content: "Send message",
            trigger: ".o-mail-Composer-send",
        },
        {
            content: "Check message is shown",
            trigger: '.o-mail-Message-body:contains("cheese")',
            run() {},
        },
        {
            content: "Check message contains the attachment",
            trigger: '.o-mail-Message .o-mail-AttachmentCard:contains("text.txt")',
            run() {},
        },
        {
            content: "Click on more menu",
            trigger: ".o-mail-Message [title='Expand']",
        },
        {
            content: "Click on edit",
            trigger: ".o-mail-Message [title='Edit']",
        },
        {
            content: "Edit message",
            trigger: ".o-mail-Message .o-mail-Composer-input",
            run: "text vegetables",
        },
        {
            content: "Add one more file in composer",
            trigger: ".o-mail-Message .o-mail-Composer button[aria-label='Attach files']",
            async run() {
                const file = await createFile({
                    content: "hello 2",
                    contentType: "text/plain",
                    name: "extra.txt",
                });
                inputFiles(
                    document.querySelector(
                        ".o-mail-Message .o-mail-Composer-coreMain .o_input_file"
                    ),
                    [file]
                );
            },
        },
        {
            content: "Check the earlier provided extra attachment is listed",
            trigger: '.o-mail-Message .o-mail-Composer .o-mail-AttachmentCard[title="extra.txt"]',
            extra_trigger:
                ".o-mail-Message .o-mail-Composer .o-mail-AttachmentCard:not(.o-isUploading)", // waiting the attachment to be uploaded
            run() {},
        },
        {
            content: "Save edited message",
            trigger: ".o-mail-Message a:contains(save)",
        },
        {
            content: "Check message is edited",
            trigger: '.o-mail-Message-body:contains("vegetables")',
            run() {},
        },
        {
            content: "Check edited message contains the first attachment",
            trigger: '.o-mail-Message .o-mail-AttachmentCard:contains("text.txt")',
            run() {},
        },
        {
            content: "Check edited message contains the extra attachment",
            trigger: '.o-mail-Message .o-mail-AttachmentCard:contains("extra.txt")',
            run() {},
        },
    ],
});

return __exports;
});
;

/*******************************************************************
*  Filepath: /mail/static/tests/tours/dynamic_placeholder_tour.js  *
*  Lines: 200                                                      *
*******************************************************************/
odoo.define('@mail/../tests/tours/dynamic_placeholder_tour', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/* @odoo-module */

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add("dynamic_placeholder_tour", {
    test: true,
    url: "/web",
    steps: () => [
        stepUtils.showAppsMenuItem(),
        {
            content: 'Go into the Setting "app"',
            trigger: '.o_app[data-menu-xmlid="base.menu_administration"]',
        },
        {
            content: "Open email templates",
            trigger: 'button[name="open_mail_templates"]',
        },
        {
            content: "Create a new email template",
            trigger: "button.o_list_button_add",
        },
        {
            content: 'Insert # inside "Subject" input',
            trigger: 'div[name="subject"] input[type="text"]',
            run(actions) {
                actions.text(`no_model_id #`, this.$anchor);
                this.$anchor[0].dispatchEvent(
                    new KeyboardEvent("keydown", { bubbles: true, key: "#" })
                );
            },
        },
        {
            content: "Check subject kept the # char And an error notification appear",
            trigger: 'div[name="subject"] input[type="text"]',
            run() {
                const subjectValue = this.$anchor[0].value;
                if (subjectValue !== "no_model_id #") {
                    console.error(
                        `Email template should have "#" in subject input (actual: ${subjectValue})`
                    );
                }

                const notification = document.querySelector(
                    "div.o_notification_manager .o_notification .o_notification_content"
                );
                if (
                    !notification ||
                    notification.textContent !==
                        "You need to select a model before opening the dynamic placeholder selector."
                ) {
                    console.error(`Email template did not show correct notification.`);
                }
            },
        },
        {
            content: 'Select "Contact" model',
            trigger: 'div[name="model_id"] input[type="text"]',
            run: "text Contact",
        },
        {
            content: "Wait for the autocomplete RPC",
            trigger: 'div[name="model_id"] .ui-autocomplete:contains("Contact")',
            run: function () {},
        },
        {
            content: "Click on contact",
            trigger: 'div[name="model_id"] .ui-autocomplete',
            run: async function () {
                const contact = Array.from(
                    document.querySelectorAll(
                        'div[name="model_id"] .ui-autocomplete .dropdown-item'
                    )
                ).find((el) => el.textContent === "Contact");
                await contact.click();
            },
        },
        {
            content: "Wait for the drop down to disappear",
            trigger: 'div[name="model_id"] .o-autocomplete:not(:has(.ui-autocomplete))',
            run: async () => {
                // Ensure the system has registered a correct model value before
                // we try to open the DPH.
                // It seems that the autocomplete validation can be very slow.
                await new Promise((r) => setTimeout(r, 200));
            },
        },
        {
            content: 'Retry insert # inside "Subject" input',
            trigger: 'div[name="subject"] input[type="text"]',
            run(actions) {
                actions.text(`yes_model_id #`, this.$anchor);
                this.$anchor[0].dispatchEvent(
                    new KeyboardEvent("keydown", { bubbles: true, key: "#" })
                );
            },
        },
        {
            content: "Check if the dynamic placeholder popover is opened",
            trigger: "div.o_model_field_selector_popover",
            run: function () {},
        },
        {
            content: "filter the dph result",
            trigger: "div.o_model_field_selector_popover_search input[type='text']",
            run: "text name",
        },
        {
            content: "Click on the first entry of the dynamic placeholder",
            trigger: 'div.o_model_field_selector_popover li:first-child button:contains("Name")',
        },
        {
            content: "Enter a default value",
            trigger:
                'div.o_model_field_selector_popover .o_model_field_selector_default_value_input input[type="text"]',
            run: "text defValue",
        },
        {
            content: "Click on the the dynamic placeholder default value",
            trigger: "div.o_model_field_selector_popover li:first-child button",
        },
        {
            content: "Wait for the popover to disappear",
            trigger: "body:not(:has(.o_model_field_selector_popover))",
        },
        {
            content: "Check if subject value was correclty updated",
            trigger: 'div[name="subject"] input[type="text"]',
            run() {
                const subjectValue = this.$anchor[0].value;
                const correctValue =
                    "yes_model_id {{object.name or '''defValue'''}}";
                if (subjectValue !== correctValue) {
                    console.error(
                        `Email template should have "${correctValue}" in subject input (actual: ${subjectValue})`
                    );
                }
            },
        },
        {
            content: "Insert tesxt inside editable",
            trigger: ".note-editable.odoo-editor-editable",
            run(actions) {
                actions.text(`/`, this.$anchor);
                document.querySelector(".note-editable").dispatchEvent(
                    new InputEvent("input", {
                        inputType: "insertText",
                        data: "/",
                    })
                );
            },
        },
        {
            content: "Click on the the dynamic placeholder commandBar options",
            trigger: "div.oe-powerbox-commandWrapper:contains(Dynamic Placeholder)",
        },
        {
            content: "Check if the dynamic placeholder popover is opened",
            trigger: "div.o_model_field_selector_popover",
        },
        {
            content: "filter the dph result",
            trigger: "div.o_model_field_selector_popover_search input[type='text']",
            run: "text name",
        },
        {
            content: "Click on the first entry of the dynamic placeholder",
            trigger: 'div.o_model_field_selector_popover li:first-child button:contains("Name")',
        },
        {
            content: "Enter a default value",
            trigger:
                'div.o_model_field_selector_popover .o_model_field_selector_default_value_input input[type="text"]',
            run: "text defValue",
        },
        {
            content: "Click on the the dynamic placeholder default value",
            trigger: "div.o_model_field_selector_popover li:first-child button",
        },
        {
            content: "Ensure the editable contain the dynamic placeholder t tag",
            trigger:
                ".note-editable.odoo-editor-editable t[t-out=\"object.name or '''defValue'''\"]",
        },
        {
            content: "Discard form changes",
            trigger: "button.o_form_button_cancel",
        },
        {
            content: "Wait for the form view to disappear",
            trigger: "body:not(:has(.o_form_sheet))",
        },
    ],
});

return __exports;
});
;

/**************************************************************************
*  Filepath: /mail/static/tests/tours/mail_chatter_activity_test_tour.js  *
*  Lines: 41                                                              *
**************************************************************************/
odoo.define('@mail/../tests/tours/mail_chatter_activity_test_tour', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/* @odoo-module */

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add("mail_activity_schedule_from_chatter", {
    test: true,
    steps: () => [
        {
            trigger: "button:contains('Activities')",
        },
        {
            trigger: "div[name='summary'] input",
            run: "text Play Mario Party",
        },
        {
            trigger: "button:contains('Schedule')",
        },
        {
            trigger: ".o-mail-Activity:contains('Play Mario Party')",
        },
        {
            trigger: "button:contains('Activities')",
        },
        {
            trigger: "div[name='summary'] input",
            run: "text Play Mario Kart",
        },
        {
            trigger: "button:contains('Mark as Done')",
        },
        {
            trigger: ".o-mail-Message:contains('Play Mario Kart')",
        },
    ],
});

return __exports;
});
;

/***********************************************************************
*  Filepath: /mail/static/tests/tours/mail_full_composer_test_tour.js  *
*  Lines: 115                                                          *
***********************************************************************/
odoo.define('@mail/../tests/tours/mail_full_composer_test_tour', ['@web/core/registry', 'web.test_utils_file'], function (require) {
'use strict';
let __exports = {};
/* @odoo-module */

const { registry } = require("@web/core/registry");
const { createFile, inputFiles } = require("web.test_utils_file");

/**
 * This tour depends on data created by python test in charge of launching it.
 * It is not intended to work when launched from interface. It is needed to test
 * an action (action manager) which is not possible to test with QUnit.
 * @see mail/tests/test_mail_full_composer.py
 */
registry.category("web_tour.tours").add("mail/static/tests/tours/mail_full_composer_test_tour.js", {
    test: true,
    steps: () => [
        {
            content: "Click on Send Message",
            trigger: "button:contains(Send message)",
        },
        {
            content: "Write something in composer",
            trigger: ".o-mail-Composer-input",
            run: "text blahblah",
        },
        {
            content: "Add one file in composer",
            trigger: ".o-mail-Composer button[aria-label='Attach files']",
            async run() {
                const file = await createFile({
                    content: "hello, world",
                    contentType: "text/plain",
                    name: "text.txt",
                });
                inputFiles(document.querySelector(".o-mail-Composer-coreMain .o_input_file"), [
                    file,
                ]);
            },
        },
        {
            content: "Open full composer",
            trigger: "button[aria-label='Full composer']",
            extra_trigger: ".o-mail-AttachmentCard:not(.o-isUploading)", // waiting the attachment to be uploaded
        },
        {
            content: "Check composer keeps open after pushing Escape",
            trigger: ".o_mail_composer_form_view",
            run: () => {
                window.dispatchEvent(
                    new KeyboardEvent("keydown", {
                        bubbles: true,
                        key: "Escape",
                    })
                );
            },
        },
        {
            content: "Check the earlier provided attachment is listed",
            trigger: '.o_attachment[title="text.txt"]',
            run() {},
        },
        {
            content: "Check subject is autofilled",
            trigger: '[name="subject"] input',
            run() {
                const subjectValue = document.querySelector('[name="subject"] input').value;
                if (subjectValue !== "Test User") {
                    console.error(
                        `Full composer should have "Test User" in subject input (actual: ${subjectValue})`
                    );
                }
            },
        },
        {
            content: "Check composer content is kept",
            trigger: '.o_field_html[name="body"]',
            run() {
                const bodyContent = document.querySelector(
                    '.o_field_html[name="body"]'
                ).textContent;
                if (!bodyContent.includes("blahblah")) {
                    console.error(
                        `Full composer should contain text from small composer ("blahblah") in body input (actual: ${bodyContent})`
                    );
                }
            },
        },
        {
            content: "Open templates",
            trigger: '.o_field_widget[name="template_id"] input',
        },
        {
            content: "Check a template is listed",
            in_modal: false,
            trigger: '.ui-autocomplete .ui-menu-item a:contains("Test template")',
            run() {},
        },
        {
            content: "Send message",
            trigger: ".o_mail_send",
        },
        {
            content: "Check message is shown",
            trigger: '.o-mail-Message-body:contains("blahblah")',
        },
        {
            content: "Check message contains the attachment",
            trigger: '.o-mail-Message .o-mail-AttachmentCard:contains("text.txt")',
        },
    ],
});

return __exports;
});
;

/***********************************************************************
*  Filepath: /mail/static/tests/tours/user_modify_own_profile_tour.js  *
*  Lines: 39                                                           *
***********************************************************************/
odoo.define('@mail/../tests/tours/user_modify_own_profile_tour', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/* @odoo-module */

const { registry } = require("@web/core/registry");

/**
 * Verify that a user can modify their own profile information.
 */
registry.category("web_tour.tours").add("mail/static/tests/tours/user_modify_own_profile_tour.js", {
    test: true,
    steps: () => [
        {
            content: "Open user account menu",
            trigger: ".o_user_menu button",
        },
        {
            content: "Open preferences / profile screen",
            trigger: "[data-menu=settings]",
        },
        {
            content: "Update the email address",
            trigger: 'div[name="email"] input',
            run: "text updatedemail@example.com",
        },
        {
            content: "Save the form",
            trigger: 'button[name="preference_save"]',
        },
        {
            content: "Wait until the modal is closed",
            trigger: "body:not(.modal-open)",
        },
    ],
});

return __exports;
});
;

/***************************************************
*  Filepath: /portal/static/tests/tours/portal.js  *
*  Lines: 24                                       *
***************************************************/
odoo.define('@portal/../tests/tours/portal', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('portal_load_homepage', {
    test: true,
    url: '/my',
    steps: () => [
        {
            content: "Check portal is loaded",
            trigger: 'a[href*="/my/account"]:contains("Edit"):first',
        },
        {
            content: "Load my account details",
            trigger: 'input[value="Joel Willis"]'
        }
    ]
});

return __exports;
});
;

/*************************************************************
*  Filepath: /account/static/tests/tours/tax_group_tests.js  *
*  Lines: 139                                                *
*************************************************************/
odoo.define('@account/../tests/tours/tax_group_tests', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module alias=account.tax.group.tour.tests */
"use strict";

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('account_tax_group', {
    test: true,
    url: "/web",
    steps: () => [stepUtils.showAppsMenuItem(),
    {
        id: 'account_menu_click',
        content: "Go to Invoicing",
        trigger: '.o_app[data-menu-xmlid="account.menu_finance"]',
    },
    {
        content: "Go to Vendors",
        trigger: 'span:contains("Vendors")',
    },
    {
        content: "Go to Bills",
        trigger: 'a:contains("Bills")',
    },
    {
        extra_trigger: '.o_breadcrumb .text-truncate:contains("Bills")',
        content: "Create new bill",
        trigger: '.o_control_panel_main_buttons .d-none .o_list_button_add',
    },
    // Set a vendor
    {
        content: "Add vendor",
        trigger: 'div.o_field_widget.o_field_res_partner_many2one[name="partner_id"] div input',
        run: 'text Azure Interior',
    },
    {
        content: "Valid vendor",
        trigger: '.ui-menu-item a:contains("Azure Interior")',
    },
    // Add First product
    {
        content: "Add items",
        trigger: 'div[name="invoice_line_ids"] .o_field_x2many_list_row_add a:contains("Add a line")',
    },
    {
        content: "Select input",
        trigger: 'div[name="invoice_line_ids"] .o_selected_row .o_list_many2one[name="product_id"] input',
    },
    {
        content: "Type item",
        trigger: 'div[name="invoice_line_ids"] .o_selected_row .o_list_many2one[name="product_id"] input',
        run: "text Corner Desk Right Sit",
    },
    {
        content: "Valid item",
        trigger: '.ui-menu-item-wrapper:contains("Corner Desk Right Sit")',
    },
    // Save account.move
    {
        content: "Save the account move",
        trigger: '.o_form_button_save',
    },
    ...stepUtils.saveForm(),
    // Edit tax group amount
    {
        content: "Edit tax group amount",
        trigger: '.o_tax_group_edit',
    },
    {
        content: "Modify the input value",
        trigger: '.o_tax_group_edit_input input',
        run: function (actions) {
            $('.o_tax_group_edit_input input').val(200);
            $('.o_tax_group_edit_input input').select();
            $('.o_tax_group_edit_input input').blur();
        },
    },
    // Check new value for total (with modified tax_group_amount).
    {
        content: "Valid total amount",
        trigger: 'span[name="amount_total"]:contains("800")',
    },
    // Modify the quantity of the object
    {
        content: "Select item quantity",
        trigger: 'div[name="invoice_line_ids"] tbody tr.o_data_row .o_list_number[name="quantity"]',
    },
    {
        content: "Change item quantity",
        trigger: 'div[name="invoice_line_ids"] tbody tr.o_data_row .o_list_number[name="quantity"] input',
        run: 'text 2',
    },
    {
        content: "Valid the new value",
        trigger: 'div[name="invoice_line_ids"] tbody tr.o_data_row .o_list_number[name="quantity"] input',
        run: function (actions) {
            let keydownEvent = jQuery.Event('keydown');
            keydownEvent.which = 13;
            this.$anchor.trigger(keydownEvent);
        },
    },
    // Save form
    {
        content: "Save the account move",
        trigger: '.o_form_button_save',
    },
    ...stepUtils.saveForm(),
    // Check new tax group value
    {
        content: "Check new value of tax group",
        trigger: '.o_tax_group_amount_value:contains("120")',
    },
    {
        content: "Edit tax value",
        trigger: '.o_tax_group_edit_input input',
        run: 'text 2'
    },
    {
        content: "Check new value of total",
        trigger: '.oe_subtotal_footer_separator:contains("1,202")',
    },
    {
        content: "Discard changes",
        trigger: '.o_form_button_cancel',
    },
    {
        content: "Check tax value is reset",
        trigger: '.o_tax_group_amount_value:contains("120")',
    },
]});

return __exports;
});

odoo.define(`account.tax.group.tour.tests`, ['@account/../tests/tours/tax_group_tests'], function (require) {
                        return require('@account/../tests/tours/tax_group_tests')[Symbol.for("default")];
                        });
;

/*********************************************************
*  Filepath: /sale/static/tests/tours/sale_signature.js  *
*  Lines: 54                                             *
*********************************************************/
odoo.define('@sale/../tests/tours/sale_signature', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

// This tour relies on data created on the Python test.
registry.category("web_tour.tours").add('sale_signature', {
    test: true,
    url: '/my/quotes',
    steps: () => [
    {
        content: "open the test SO",
        trigger: 'a:containsExact("test SO")',
    },
    {
        content: "click sign",
        trigger: 'a:contains("Sign")',
    },
    {
        content: "check submit is enabled",
        trigger: '.o_portal_sign_submit:enabled',
        run: function () {},
    },
    {
        content: "click select style",
        trigger: '.o_web_sign_auto_select_style a',
    },
    {
        content: "click style 4",
        trigger: '.o_web_sign_auto_font_selection a:eq(3)',
    },
    {
        content: "click submit",
        trigger: '.o_portal_sign_submit:enabled',
    },
    {
        content: "check it's confirmed",
        trigger: '#quote_content:contains("Thank You")',
    }, {
        trigger: '#quote_content',
        run: function () {
            window.location.href = window.location.origin + '/web';
        },  // Avoid race condition at the end of the tour by returning to the home page.
    },
    {
        trigger: 'nav',
        run: function() {},
    }
]});

return __exports;
});
;

/******************************************************************************
*  Filepath: /website/static/tests/tour_utils/focus_blur_snippets_options.js  *
*  Lines: 22                                                                  *
******************************************************************************/
odoo.define('@website/../tests/tour_utils/focus_blur_snippets_options', ['web_editor.snippets.options'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const options = require("web_editor.snippets.options");

const FocusBlur = options.Class.extend({
    onFocus() {
        window.focusBlurSnippetsResult.push(`focus ${this.focusBlurName}`);
    },
    onBlur() {
        window.focusBlurSnippetsResult.push(`blur ${this.focusBlurName}`);
    },
});

options.registry.FocusBlurParent = FocusBlur.extend({focusBlurName: 'parent'});
options.registry.FocusBlurChild1 = FocusBlur.extend({focusBlurName: 'child1'});
options.registry.FocusBlurChild2 = FocusBlur.extend({focusBlurName: 'child2'});

return __exports;
});
;

/**************************************************************
*  Filepath: /website/static/tests/tours/automatic_editor.js  *
*  Lines: 103                                                 *
**************************************************************/
odoo.define('@website/../tests/tours/automatic_editor', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require("website.tour_utils");

wTourUtils.registerWebsitePreviewTour('automatic_editor_on_new_website', {
    test: true,
    url: '/',
},
[
    {
        content: "Select the language dropdown",
        trigger: 'iframe .js_language_selector .dropdown-toggle'
    },
    {
        content: "click on Add a language",
        trigger: 'iframe a.o_add_language',
    },
    {
        content: "type Parseltongue",
        trigger: 'div[name="lang_ids"] .o_input_dropdown input',
        run: 'text Parseltongue',
    },
    {
        content: 'select Parseltongue',
        trigger: '.dropdown-item:contains(Parseltongue)',
        in_modal: false,
    },
    {
        content: "load parseltongue",
        extra_trigger: '.modal div[name="lang_ids"] .rounded-pill .o_tag_badge_text:contains(Parseltongue)',
        trigger: '.modal-footer button[name=lang_install]',
    },
    {
        content: "Select the language dropdown",
        trigger: 'iframe .js_language_selector .dropdown-toggle',
    },
    {
        content: "Select parseltongue",
        trigger: 'iframe a.js_change_lang[data-url_code=pa_GB]',
        extra_trigger: 'iframe a.js_change_lang .o_lang_flag',
    },
    {
        content: "Check that we're on parseltongue and then go to settings",
        trigger: 'iframe html[lang=pa-GB]',
        run: () => {
            // Now go through the settings for a new website. A frontend_lang
            // cookie was set during previous steps. It should not be used when
            // redirecting to the frontend in the following steps.
            window.location.href = '/web#action=website.action_website_configuration';
        }
    },
    {
        content: "create a new website",
        trigger: 'button[name="action_website_create_new"]',
    },
    {
        content: "insert website name",
        trigger: 'div[name="name"] input',
        run: 'text Website EN'
    },
    {
        content: "validate the website creation modal",
        trigger: 'button.btn-primary'
    },
    {
        content: "skip configurator",
        // This trigger targets the skip button, it doesn't have a more
        // explicit class or ID.
        trigger: '.o_configurator_container .container-fluid .btn.btn-link'
    },
    {
        content: "make hover button appear",
        trigger: '.o_theme_preview',
        run: () => {
            $('.o_theme_preview .o_button_area').attr('style', 'visibility: visible; opacity: 1;');
        },
    },
    {
        content: "Install a theme",
        trigger: 'button[name="button_choose_theme"]'
    },
    {
        content: "Check that the editor is loaded",
        trigger: 'iframe body.editor_enable',
        timeout: 30000,
        run: () => null, // it's a check
    },
    {
        content: "exit edit mode",
        trigger: '.o_we_website_top_actions button.btn-primary:contains("Save")',
    },
    {
        content: "wait for editor to close",
        trigger: 'iframe body:not(.editor_enable)',
        run: () => null, // It's a check
    }
]);

return __exports;
});
;

/**********************************************************************
*  Filepath: /website/static/tests/tours/carousel_content_removal.js  *
*  Lines: 32                                                          *
**********************************************************************/
odoo.define('@website/../tests/tours/carousel_content_removal', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour("carousel_content_removal", {
    test: true,
    url: '/',
    edition: true,
}, [{
    trigger: "#snippet_structure .oe_snippet:has(span:contains('Carousel')) .oe_snippet_thumbnail",
    content: "Drag the Carousel block and drop it in your page.",
    run: "drag_and_drop iframe #wrap",
},
{
    trigger: "iframe .carousel .carousel-item.active .carousel-content",
    content: "Select the active carousel item.",
}, {
    trigger: "iframe .oe_overlay.oe_active .oe_snippet_remove",
    content: "Remove the active carousel item.",
},
{
    trigger: "iframe .carousel .carousel-item.active .container:not(:has(*))",
    content: "Check for a carousel slide with an empty container tag",
    allowInvisible: true,
    run: function () {},
}]);

return __exports;
});
;

/***************************************************************************
*  Filepath: /website/static/tests/tours/client_action_iframe_fallback.js  *
*  Lines: 29                                                               *
***************************************************************************/
odoo.define('@website/../tests/tours/client_action_iframe_fallback', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('client_action_iframe_fallback', {
    test: true,
    url: '/',
},
[
    {
        content: "Ensure we are on the expected page",
        trigger: 'body iframe html[data-view-xmlid="website.homepage"]',
        run: () => {}, // It's a check.
    }, {
        content: "Ensure the iframe fallback is not loaded in test mode",
        trigger: 'body',
        run: () => {
            if (document.querySelector('iframe[src="/website/iframefallback"]')) {
                console.error("The iframe fallback shouldn't be inside the DOM.");
            }
        },
    },
]);

return __exports;
});
;

/********************************************************************
*  Filepath: /website/static/tests/tours/client_action_redirect.js  *
*  Lines: 86                                                        *
********************************************************************/
odoo.define('@website/../tests/tours/client_action_redirect', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");

const testUrl = '/test_client_action_redirect';

const goToFrontendSteps = [{
    content: "Go to the frontend",
    trigger: 'body',
    run: () => {
        window.location.href = testUrl;
    },
}, {
    content: "Check we are in the frontend",
    trigger: 'body:not(:has(.o_website_preview)) #test_contact_FE',
    run: () => null, // it's a check
}];
const goToBackendSteps = [{
    content: "Go to the backend",
    trigger: 'body',
    run: () => {
        window.location.href = `/@${testUrl}`;
    },
}, {
    content: "Check we are in the backend",
    trigger: '.o_website_preview',
    run: () => null, // it's a check
}];
const checkEditorSteps = [{
    content: "Check that the editor is loaded",
    trigger: 'iframe body.editor_enable',
    timeout: 30000,
    run: () => null, // it's a check
}, {
    content: "exit edit mode",
    trigger: '.o_we_website_top_actions button.btn-primary:contains("Save")',
}, {
    content: "wait for editor to close",
    trigger: 'iframe body:not(.editor_enable)',
    run: () => null, // It's a check
}];

registry.category("web_tour.tours").add('client_action_redirect', {
    test: true,
    url: testUrl,
    steps: () => [
    // Case 1: From frontend, click on `enable_editor=1` link without `/@/` in it
    ...goToFrontendSteps,
    {
        content: "Click on the link to frontend",
        trigger: '#test_contact_FE',
    },
    ...checkEditorSteps,

    // Case 2: From frontend, click on `enable_editor=1` link with `/@/` in it
    ...goToFrontendSteps,
    {
        content: "Click on the link to backend",
        trigger: '#test_contact_BE',
    },
    ...checkEditorSteps,

    // Case 3: From backend, click on `enable_editor=1` link without `/@/` in it
    // TODO: This will be fixed in another fix related to the listening of the
    //       URL changes from the client action.
    // ...goToBackendSteps,
    // {
    //     content: "Click on the link to frontend (2)",
    //     trigger: 'iframe #test_contact_FR',
    // },
    // ...checkEditorSteps,

    // Case 4: From backend, click on `enable_editor=1` link with `/@/` in it
    ...goToBackendSteps,
    {
        content: "Click on the link to backend (2)",
        trigger: 'iframe #test_contact_BE',
    },
    ...checkEditorSteps,
]});

return __exports;
});
;

/********************************************************************
*  Filepath: /website/static/tests/tours/conditional_visibility.js  *
*  Lines: 187                                                       *
********************************************************************/
odoo.define('@website/../tests/tours/conditional_visibility', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');

const snippets = [
    {
        id: 's_text_image',
        name: 'Text - Image',
    },
    {
        id: "s_banner",
        name: "Banner",
    },
    {
        id: "s_popup",
        name: "Popup",
    },
];
function checkEyeIcon(snippetName, visible) {
    const eyeIcon = visible ? "fa-eye" : "fa-eye-slash";
    const openOrClose = visible ? "open" : "close";
    const endExplanation = `should be ${openOrClose} in the "Invisible Elements" panel`;
    const invisibleElPanel = "o_we_invisible_el_panel";
    return {
            content: `The eye icon of ${snippetName} ${endExplanation}`,
            trigger:
            `.${invisibleElPanel} .o_we_invisible_entry:contains("${snippetName}") i.${eyeIcon}`,
            run: () => {}, // it is a check
        };
}
function checkEyesIconAfterSave(footerIsHidden = true) {
    const eyeIconChecks = [
        checkEyeIcon("Header", false),
        checkEyeIcon("Text - Image", true),
        checkEyeIcon("Popup", false),
        checkEyeIcon("Banner", true),
    ];
    if (footerIsHidden) {
        eyeIconChecks.push(checkEyeIcon("Footer", false));
    }
    return eyeIconChecks;
}
wTourUtils.registerWebsitePreviewTour('conditional_visibility_1', {
    edition: true,
    url: '/',
    test: true,
}, [
wTourUtils.dragNDrop(snippets[0]),
wTourUtils.clickOnSnippet(snippets[0]),
wTourUtils.changeOption('ConditionalVisibility', 'we-toggler'),
{
    content: 'click on conditional visibility',
    trigger: '[data-name="visibility_conditional"]',
    run: 'click',
},
{
    content: 'click on utm medium toggler',
    trigger: '[data-save-attribute="visibilityValueUtmMedium"] we-toggler',
    run: 'click',
},
{
    trigger: '[data-save-attribute="visibilityValueUtmMedium"] we-selection-items [data-add-record="Email"]',
    content: 'click on Email',
    run: 'click',
},
...wTourUtils.clickOnSave(),
{
    content: 'Check if the rule was applied',
    extra_trigger: '.o_website_preview:only-child',
    trigger: 'iframe #wrap',
    allowInvisible: true,
    run: function (actions) {
        const style = window.getComputedStyle(this.$anchor[0].getElementsByClassName('s_text_image')[0]);
        if (style.display !== 'none') {
            console.error('error This item should be invisible and only visible if utm_medium === email');
        }
    },
},
...wTourUtils.clickOnEditAndWaitEditMode(),
{
    content: 'Check if the element is visible as it should always be visible in edit view',
    trigger: 'iframe #wrap .s_text_image',
    run: function (actions) {
        const style = window.getComputedStyle((this.$anchor[0]));
        if (style.display === 'none') {
            console.error('error This item should now be visible because utm_medium === email');
        }
    },
},
]);

wTourUtils.registerWebsitePreviewTour("conditional_visibility_3", {
    edition: true,
    test: true,
    url: "/",
},
[
checkEyeIcon("Text - Image", true),
// Drag a "Banner" snippet on the website.
wTourUtils.dragNDrop(snippets[1]),
// Click on the "Banner" snippet.
wTourUtils.clickOnSnippet(snippets[1]),
wTourUtils.changeOption("ConditionalVisibility", "we-toggler"),
wTourUtils.changeOption("ConditionalVisibility", '[data-name="visibility_conditional"]'),
checkEyeIcon("Banner", true),
{
    content: "click on 'Blocks'",
    trigger: "#snippets_menu button:contains('Blocks')",
},
// Drag a "Popup" snippet on the website.
wTourUtils.dragNDrop(snippets[2]),
{
    content: "Toggle the visibility of the popup",
    in_modal: false,
    trigger: ".o_we_invisible_el_panel .o_we_invisible_entry:contains('Popup')",
},
checkEyeIcon("Popup", false),
{
    content: "Click on footer",
    trigger: "iframe #wrapwrap footer",
},
wTourUtils.changeOption("HideFooter", "we-checkbox"),
checkEyeIcon("Footer", false),
{
    content: "Click on Header",
    trigger: "iframe #wrapwrap header",
},
wTourUtils.changeOption("TopMenuVisibility", "we-toggler"),
wTourUtils.changeOption("TopMenuVisibility", '[data-visibility="hidden"]'),
checkEyeIcon("Header", false),
{
    content: "Toggle the visibility of the Banner snippet",
    trigger: ".o_we_invisible_el_panel .o_we_invisible_entry:contains('Banner')",
},
checkEyeIcon("Banner", false),
...wTourUtils.clickOnSave(),
...wTourUtils.clickOnEditAndWaitEditMode(),
...checkEyesIconAfterSave(),
]);

wTourUtils.registerWebsitePreviewTour("conditional_visibility_4", {
    edition: true,
    test: true,
    url: "/",
},
[
// Click on the "Text-Image" snippet.
wTourUtils.clickOnSnippet(snippets[0]),
{
    content: "Click on the 'move down' option",
    trigger: "iframe we-button.o_we_user_value_widget.fa-angle-down",
},
...checkEyesIconAfterSave(),
{
    content: "Check the order on the 'Invisible Elements' panel",
    trigger: ".o_we_invisible_el_panel div:nth-child(3):contains('Banner')",
    run: () => {}, // it is a check
},
{
    content: "Toggle the visibility of the Footer",
    trigger: ".o_we_invisible_el_panel .o_we_invisible_entry:contains('Footer')",
},
{
    content: "Check that the footer is visible",
    trigger: "iframe #wrapwrap footer",
    run: () => {}, // it is a check
},
// Click on the "Banner" snippet.
wTourUtils.clickOnSnippet(snippets[1]),
{
    content: "Drag the 'Banner' snippet to the end of the page",
    trigger: "iframe .o_overlay_move_options .ui-draggable-handle",
    run: "drag_and_drop iframe #wrapwrap footer",
},
...checkEyesIconAfterSave(false),
{
    content: "Check the order on the 'Invisible Elements' panel",
    trigger: ".o_we_invisible_el_panel div:nth-child(3):contains('Text - Image')",
    run: () => {}, // it is a check
},
]);

return __exports;
});
;

/*****************************************************************************
*  Filepath: /website/static/tests/tours/conditional_visibility_frontend.js  *
*  Lines: 24                                                                 *
*****************************************************************************/
odoo.define('@website/../tests/tours/conditional_visibility_frontend', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('conditional_visibility_2', {
    test: true,
    url: '/?utm_medium=Email',
    steps: () => [{
    content: 'The content previously hidden should now be visible',
    trigger: 'body #wrap',
    run: function (actions) {
        const style = window.getComputedStyle(this.$anchor[0].getElementsByClassName('s_text_image')[0]);
        if (style.display === 'none') {
            console.error('error This item should now be visible because utm_medium === email');
        }
    },
},
]});

return __exports;
});
;

/**********************************************************************
*  Filepath: /website/static/tests/tours/configurator_translation.js  *
*  Lines: 80                                                          *
**********************************************************************/
odoo.define('@website/../tests/tours/configurator_translation', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('configurator_translation', {
    test: true,
    url: '/website/configurator',
    steps: () => [
    // Configurator first screen
    {
        content: "click next",
        trigger: 'button.o_configurator_show',
    },
    // Make sure "Back" works
    {
        content: "use browser's Back",
        trigger: 'a.o_change_website_type',
        run: () => {
            window.history.back();
        },
    }, {
        content: "return to description screen",
        trigger: 'button.o_configurator_show',
    },
    // Description screen
    {
        content: "select a website type",
        trigger: 'a.o_change_website_type',
    }, {
        content: "insert a website industry",
        trigger: '.o_configurator_industry input',
        run: 'text ab',
    }, {
        content: "select a website industry from the autocomplete",
        trigger: '.o_configurator_industry_wrapper ul li a:contains("in fr")',
    }, {
        content: "select an objective",
        trigger: '.o_configurator_purpose_dd a',
    }, {
        content: "choose from the objective list",
        trigger: 'a.o_change_website_purpose',
    },
    // Palette screen
    {
        content: "chose a palette card",
        trigger: '.palette_card',
    },
    // Features screen
    {
        content: "select confidentialité",
        trigger: '.card:contains(Parseltongue_privacy)',
    }, {
        content: "Click on build my website",
        trigger: 'button.btn-primary',
    }, {
        content: "Loader should be shown",
        trigger: '.o_website_loader_container',
        run: function () {}, // it's a check
    }, {
        content: "Wait untill the configurator is finished",
        trigger: '#oe_snippets.o_loaded',
        timeout: 30000,
    }, {
        // Check the content of the save button to make sure the website is in
        // Parseltongue. (The editor should be in the website's default language,
        // which should be parseltongue in this test.)
        content: "exit edit mode",
        trigger: '.o_we_website_top_actions button.btn-primary:contains("Save_Parseltongue")',
    }, {
         content: "wait for editor to be closed",
         trigger: 'iframe body:not(.editor_enable)',
         run: function () {}, // It's a check.
    }
]});

return __exports;
});
;

/*******************************************************************************
*  Filepath: /website/static/tests/tours/default_shape_gets_palette_colors.js  *
*  Lines: 35                                                                   *
*******************************************************************************/
odoo.define('@website/../tests/tours/default_shape_gets_palette_colors', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require("website.tour_utils");

wTourUtils.registerWebsitePreviewTour("default_shape_gets_palette_colors", {
    test: true,
    url: '/',
    edition: true,
}, [
    wTourUtils.dragNDrop({
        id: 's_text_image',
        name: 'Text - Image',
    }),
    wTourUtils.clickOnSnippet({
        id: 's_text_image',
        name: 'Text - Image',
    }),
    wTourUtils.changeOption('ColoredLevelBackground', 'Shape'),
    {
        content: "Check that shape does not have a background-image in its inline style",
        trigger: 'iframe #wrap .s_text_image .o_we_shape',
        run: () => {
            const shape = $('iframe:not(.o_ignore_in_tour)').contents().find('#wrap .s_text_image .o_we_shape')[0];
            if (shape.style.backgroundImage) {
                console.error("error The default shape has a background-image in its inline style (should rely on the class)");
            }
        },
    },
]);

return __exports;
});
;

/***************************************************************
*  Filepath: /website/static/tests/tours/edit_link_popover.js  *
*  Lines: 215                                                  *
***************************************************************/
odoo.define('@website/../tests/tours/edit_link_popover', ['website.tour_utils', '@web/core/browser/browser', '@web/core/utils/patch'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require("website.tour_utils");
const { browser } = require("@web/core/browser/browser");
const { patch } = require("@web/core/utils/patch");

const FIRST_PARAGRAPH = 'iframe #wrap .s_text_image p:nth-child(2)';

const clickFooter = [{
    content: "Save the link by clicking outside the URL input (not on a link element)",
    trigger: 'iframe footer h5:first',
}, {
    content: "Wait delayed click on footer",
    trigger: '.o_we_customize_panel we-title:contains("Footer")',
    run: function () {}, // it's a check
}];

const clickEditLink = [{
    content: "Click on Edit Link in Popover",
    trigger: 'iframe .o_edit_menu_popover .o_we_edit_link',
}, {
    content: "Ensure popover is closed",
    trigger: 'iframe html:not(:has(.o_edit_menu_popover))', // popover should be closed
    run: function () {}, // it's a check
    in_modal: false,
}];

wTourUtils.registerWebsitePreviewTour('edit_link_popover', {
    test: true,
    url: '/',
    edition: true,
}, [
    // 1. Test links in page content (web_editor)
    wTourUtils.dragNDrop({
        id: 's_text_image',
        name: 'Text - Image',
    }),
    {
        content: "Click on a paragraph",
        trigger: FIRST_PARAGRAPH,
        run: 'text Paragraph', // Make sure the selection is set in the paragraph
    },
    {
        content: "Click on 'Link' to open Link Dialog",
        trigger: "#toolbar:not(.oe-floating) #create-link",
    },
    {
        content: "Type the link URL /contactus",
        trigger: '#o_link_dialog_url_input',
        run: 'text /contactus'
    },
    ...clickFooter,
    {
        content: "Click on newly created link",
        trigger: `${FIRST_PARAGRAPH} a`,
    },
    {
        content: "Popover should be shown",
        trigger: 'iframe .o_edit_menu_popover .o_we_url_link:contains("Contact Us")', // At this point preview is loaded
        run: function () {}, // it's a check
    },
    ...clickEditLink,
    {
        content: "Type the link URL /",
        trigger: '#o_link_dialog_url_input',
        run: "text /"
    },
    ...clickFooter,
    {
        content: "Click on link",
        trigger: `${FIRST_PARAGRAPH} a`,
    },
    {
        content: "Popover should be shown with updated preview data",
        trigger: 'iframe .o_edit_menu_popover .o_we_url_link:contains("Home")',
        run: function () {}, // it's a check
    },
    {
        content: "Click on Remove Link in Popover",
        trigger: 'iframe .o_edit_menu_popover .o_we_remove_link',
    },
    {
        content: "Link should be removed",
        trigger: `${FIRST_PARAGRAPH}:not(:has(a))`,
        run: function () {}, // it's a check
    },
    {
        content: "Ensure popover is closed",
        trigger: 'iframe html:not(:has(.o_edit_menu_popover))', // popover should be closed
        run: function () {}, // it's a check
    },
    // 2. Test links in navbar (website)
    {
        content: "Click navbar menu Home",
        trigger: 'iframe #top_menu a:contains("Home")',
    },
    {
        content: "Popover should be shown (2)",
        trigger: 'iframe .o_edit_menu_popover .o_we_url_link:contains("Home")',
        run: function () {}, // it's a check
    },
    ...clickEditLink,
    {
        content: "Change the URL",
        trigger: '#url_input',
        run: "text /contactus"
    },
    {
        content: "Save the Edit Menu modal",
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "Click on the Home menu again",
        extra_trigger: 'div:not(.o_loading_dummy) > #oe_snippets',
        trigger: 'iframe #top_menu a:contains("Home")[href="/contactus"]',
    },
    {
        content: "Popover should be shown with updated preview data (2)",
        trigger: 'iframe .o_edit_menu_popover .o_we_url_link:contains("Contact Us")',
        run: function () {}, // it's a check
    },
    {
        content: "Click on Edit Menu in Popover",
        trigger: 'iframe .o_edit_menu_popover .js_edit_menu',
    },
    {
        content: "Edit Menu (tree) should open",
        trigger: '.o_website_dialog .oe_menu_editor',
        run: function () {}, // it's a check
    },
    {
        content: "Close modal",
        trigger: '.modal-footer .btn-secondary',
    },
    // 3. Test other links (CTA in navbar & links in footer)
    {
        content: "Click CTA in navbar",
        trigger: 'iframe #top_menu_container a.btn-primary[href="/contactus"]',
    },
    {
        content: "Popover should be shown (3)",
        trigger: 'iframe .o_edit_menu_popover .o_we_url_link:contains("Contact Us")',
        run: function () {}, // it's a check
    },
    {
        content: "Toolbar should be shown (3)",
        trigger: '.oe-toolbar:not(.oe-floating):has(#o_link_dialog_url_input:propValue(/contactus))',
        run: function () {}, // it's a check
    },
    {
        content: "Click 'Home' link in footer",
        trigger: 'iframe footer a[href="/"]',
    },
    {
        content: "Popover should be shown (4)",
        trigger: 'iframe .o_edit_menu_popover .o_we_url_link:contains("Home")',
        run: function () {}, // it's a check
    },
    {
        content: "Toolbar should be shown (4)",
        trigger: '.oe-toolbar:not(.oe-floating):has(#o_link_dialog_url_input:propValue(/))',
        run: function () {}, // it's a check
    },
    // 4. Popover should close when clicking non-link element
    ...clickFooter,
    // 5. Double click should not open popover but should open toolbar link
    {
        content: "Double click on link",
        extra_trigger: 'iframe html:not(:has(.o_edit_menu_popover))', // popover should be closed
        trigger: 'iframe footer a[href="/"]',
        run: function (actions) {
            // Create range to simulate real double click, see pull request
            const range = document.createRange();
            range.selectNodeContents(this.$anchor[0]);
            const sel = window.getSelection();
            sel.removeAllRanges();
            sel.addRange(range);
            actions.click();
            actions.dblclick();
        },
    },
    {
        content: "Ensure popover is opened on double click, and so is right panel edit link",
        trigger: 'html:has(#o_link_dialog_url_input)',
        extra_trigger: 'iframe html:has(.o_edit_menu_popover)',
        run: function () {}, // it's a check
    },
    {
        content: "Ensure that a click on the link popover link opens a new window in edit mode",
        trigger: 'iframe .o_edit_menu_popover a.o_we_url_link[target="_blank"]',
        extra_trigger: 'iframe .o_edit_menu_popover a.o_we_full_url[target="_blank"]',
        run: (actions) => {
            // We do not want to open a link in a tour
            patch(browser, 'window_open_action', {
                open: (url) => {
                    if (window.location.hostname === url.hostname && url.pathname.startsWith('/@/')) {
                        document.querySelector('body').classList.add('new_backend_window_opened');
                    }
                }
            }, { pure: true });
            actions.click();
        },
    },
    {
        content: "Ensure that link is opened correctly in edit mode",
        trigger: '.new_backend_window_opened',
        run: () => {}, // it's a check
    },
]);

return __exports;
});
;

/***********************************************************
*  Filepath: /website/static/tests/tours/edit_megamenu.js  *
*  Lines: 102                                              *
***********************************************************/
odoo.define('@website/../tests/tours/edit_megamenu', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require("website.tour_utils");

const toggleMegaMenu = (stepOptions) => Object.assign({}, {
    content: "Toggles the mega menu.",
    trigger: 'iframe #top_menu .nav-item a.o_mega_menu_toggle',
    run: function () {
        // If the mega menu is displayed inside the extra menu items, it should
        // already be displayed.
        if (!this.$anchor[0].closest('.o_extra_menu_items')) {
            this.$anchor[0].dispatchEvent(new Event('click'))
        }
    },
}, stepOptions);

wTourUtils.registerWebsitePreviewTour('edit_megamenu', {
    test: true,
    url: '/',
    edition: true,
}, [
    // Add a megamenu item to the top menu.
    {
        content: "Click on a menu item",
        trigger: 'iframe #top_menu .nav-item a',
    },
    {
        content: "Click on 'Link' to open Link Dialog",
        trigger: 'iframe .o_edit_menu_popover a.js_edit_menu',
    },
    {
        content: "Trigger the link dialog (click 'Add Mega Menu Item')",
        extra_trigger: '.o_website_dialog:visible',
        trigger: '.modal-body a:eq(1)',
    },
    {
        content: "Write a label for the new menu item",
        trigger: '.modal-dialog .o_website_dialog input',
        run: 'text Megaaaaa!'
    },
    {
        content: "Confirm the mega menu label",
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "Save the website menu with a new mega menu",
        trigger: '.modal-footer .btn-primary',
        extra_trigger: '.oe_menu_editor [data-is-mega-menu="true"] .js_menu_label:contains("Megaaaaa!")',
    },
    {
        trigger: '#oe_snippets.o_loaded',
        run() {},
    },
    // Edit a menu item
    wTourUtils.clickOnExtraMenuItem({extra_trigger: ".o_website_preview.editor_enable.editor_has_snippets:not(.o_is_blocked)"}, true),
    toggleMegaMenu({extra_trigger: 'iframe #top_menu .nav-item a.o_mega_menu_toggle:contains("Megaaaaa!")'}),
    {
        content: "Select the last menu link of the first column",
        trigger: 'iframe .s_mega_menu_odoo_menu .row > div:first-child .nav > :nth-child(6)', // 6th is the last one
    },
    {
        content: "Hit the delete button to remove the menu link",
        trigger: 'iframe .oe_overlay .oe_snippet_remove',
    },
    {
        content: "Check that the last menu link was deleted",
        trigger: 'iframe .s_mega_menu_odoo_menu .row > div:first-child .nav:not(:has(> :nth-child(6)))',
        run: () => null,
    },
    {
        content: "Clicks on the first title item.",
        trigger: 'iframe .o_mega_menu h4',
    },
    {
        content: "Press enter.",
        trigger: 'iframe .o_mega_menu h4',
        run: function (actions) {
            this.$anchor[0].dispatchEvent(new window.InputEvent('input', {bubbles: true, inputType: 'insertParagraph'}));
        },
    },
    {
        content: "The menu should still be visible. Edit a menu item.",
        trigger: 'iframe .o_mega_menu h4',
        // The content is removed in the previous step so it's now invisible.
        allowInvisible: true,
        run: 'text New Menu Item',
    },
    ...wTourUtils.clickOnSave(),
    wTourUtils.clickOnExtraMenuItem({extra_trigger: 'iframe body:not(.editor_enable)'}, true),
    toggleMegaMenu(),
    {
        content: "The menu item should have been renamed.",
        trigger: 'iframe .o_mega_menu h4:contains("New Menu Item")',
        run: function () {}, // it's a check
    },
]);

return __exports;
});
;

/********************************************************
*  Filepath: /website/static/tests/tours/edit_menus.js  *
*  Lines: 272                                           *
********************************************************/
odoo.define('@website/../tests/tours/edit_menus', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('edit_menus', {
    test: true,
    url: '/',
}, [
    // Add a megamenu item from the menu.
    {
        content: "open site menu",
        extra_trigger: "iframe #wrapwrap",
        trigger: 'button[data-menu-xmlid="website.menu_site"]',
    },
    {
        content: "Click on Edit Menu",
        trigger: 'a[data-menu-xmlid="website.menu_edit_menu"]',
    },
    {
        content: "Trigger the link dialog (click 'Add Mega Menu Item')",
        extra_trigger: '.o_website_dialog:visible',
        trigger: '.modal-body a:eq(1)',
    },
    {
        content: "Write a label for the new menu item",
        trigger: '.modal-dialog .o_website_dialog input',
        run: 'text Megaaaaa!'
    },
    {
        content: "Confirm the mega menu label",
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "Save the new menu",
        trigger: '.modal-footer .btn-primary',
        extra_trigger: '.oe_menu_editor [data-is-mega-menu="true"] .js_menu_label:contains("Megaaaaa!")',
    },
    wTourUtils.clickOnExtraMenuItem({extra_trigger: 'body:not(:has(.oe_menu_editor))'}, true),
    {
        content: "There should be a new megamenu item.",
        trigger: 'iframe #top_menu .nav-item a.o_mega_menu_toggle:contains("Megaaaaa!")',
        run: () => {}, // It's a check.
    },
    // Add a menu item in edit mode.
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "Click on a menu item",
        trigger: 'iframe #top_menu .nav-item a',
    },
    {
        content: "Click on Edit Menu",
        trigger: 'iframe .o_edit_menu_popover a.js_edit_menu',
    },
    {
        content: "Trigger the link dialog (click 'Add Menu Item')",
        extra_trigger: '.o_website_dialog:visible',
        trigger: '.modal-body a:eq(0)',
    },
    {
        content: "Confirm the new menu entry without a label",
        extra_trigger: '.modal-dialog .o_website_dialog input:eq(0)',
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "It didn't save without a label. Fill label input.",
        extra_trigger: '.o_website_dialog:eq(1):visible',
        trigger: '.modal-dialog .o_website_dialog input:eq(0)',
        run: 'text Random!',
    },
    {
        content: "Confirm the new menu entry without a url",
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "It didn't save without a url. Fill url input.",
        trigger: '.modal-dialog .o_website_dialog input:eq(1)',
        extra_trigger: '.modal-dialog .o_website_dialog input.is-invalid',
        run: 'text #',
    },
    {
        content: "Confirm the new menu entry",
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "Save the website menu with the new entry",
        trigger: '.modal-footer .btn-primary',
        extra_trigger: '.oe_menu_editor .js_menu_label:contains("Random!")',
    },
    // Edit the new menu item from the "edit link" popover button
    wTourUtils.clickOnExtraMenuItem({extra_trigger: '#oe_snippets.o_loaded'}, true),
    {
        content: "Menu should have a new link item",
        trigger: 'iframe #top_menu .nav-item a:contains("Random!")',
        // Don't click the new menu when the editor is still blocked.
        extra_trigger: ".o_website_preview.editor_enable.editor_has_snippets:not(.o_is_blocked)",
    },
    {
        content: "Click on Edit Link",
        trigger: 'iframe .o_edit_menu_popover a.o_we_edit_link',
    },
    {
        content: "Change the label",
        trigger: '.modal-dialog .o_website_dialog input:eq(0)',
        run: 'text Modnar',
    },
    {
        content: "Confirm the new label",
        trigger: '.modal-footer .btn-primary',
    },
    ...wTourUtils.clickOnSave(),
    wTourUtils.clickOnExtraMenuItem({extra_trigger: 'iframe body:not(.editor_enable)'}, true),
    {
        content: "Label should have changed",
        extra_trigger: "iframe body:not(.editor_enable)",
        trigger: 'iframe #top_menu .nav-item a:contains("Modnar")',
        run: () => {}, // it's a check
    },
    // Edit the menu item from the "edit menu" popover button
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "Click on the 'Modnar' link",
        trigger: 'iframe #top_menu .nav-item a:contains("Modnar")',
    },
    {
        content: "Click on the popover Edit Menu button",
        trigger: 'iframe .o_edit_menu_popover a.js_edit_menu',
    },
    {
        content: "Click on the dialog Edit Menu button",
        trigger: '.oe_menu_editor .js_menu_label:contains("Modnar")',
        run: function () {
            const liEl = this.$anchor[0].closest('[data-menu-id]');
            liEl.querySelector('button.js_edit_menu').click();
        },
    },
    {
        content: "Change the label",
        trigger: '.modal-dialog .o_website_dialog input:eq(0)',
        run: 'text Modnar !!',
    },
    {
        content: "Confirm the new menu label",
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "Save the website menu with the new menu label",
        trigger: '.modal-footer .btn-primary',
        extra_trigger: '.oe_menu_editor .js_menu_label:contains("Modnar !!")',
    },
    // Drag a block to be able to scroll later.
    wTourUtils.dragNDrop({id: 's_media_list', name: 'Media List'}),
    ...wTourUtils.clickOnSave(),
    wTourUtils.clickOnExtraMenuItem({extra_trigger: 'iframe body:not(.editor_enable)'}, true),
    {
        content: "Label should have changed",
        trigger: 'iframe #top_menu .nav-item a:contains("Modnar !!")',
        run: () => {}, // It's a check.
    },
    // Nest menu item from the menu.
    {
        content: "open site menu",
        trigger: 'button[data-menu-xmlid="website.menu_site"]',
    },
    {
        content: "Click on Edit Menu",
        trigger: 'a[data-menu-xmlid="website.menu_edit_menu"]',
    },
    {
        content: "Drag item into parent",
        trigger: '.oe_menu_editor li:contains("Contact us") > .ui-sortable-handle',
        // Menu rows are 38px tall.
        run: "drag_move_and_drop [50,38]@.oe_menu_editor li:contains('Home') > .ui-sortable-handle => .oe_menu_editor li:contains('Home') .ui-sortable-placeholder",
    },
    {
        content: "Wait for drop",
        trigger: '.oe_menu_editor li:contains("Home") ul li:contains("Contact us")',
        run: () => {}, // It's a check.
    },
    // Drag the Mega menu to the first position.
    {
        content: "Drag Mega at the top",
        trigger: '.oe_menu_editor li:contains("Megaaaaa!") > .ui-sortable-handle',
        run: "drag_move_and_drop [0,0]@.oe_menu_editor li:contains('Home') > .ui-sortable-handle => .oe_menu_editor li",
    },
    {
        content: "Wait for drop",
        trigger: '.oe_menu_editor:first-child:contains("Megaaaaa!")',
        run: () => {}, // It's a check.
    },
    {
        content: "Save the website menu with new nested menus",
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "Menu item should have a child",
        trigger: 'iframe #top_menu .nav-item a.dropdown-toggle:contains("Home")',
    },
    // Check that with the auto close of dropdown menus, the dropdowns remain
    // openable.
    {
        content: "When menu item is opened, child item must appear in the shown menu",
        trigger: 'iframe #top_menu .nav-item:contains("Home") ul.show li a.dropdown-item:contains("Contact us")[href="/contactus"]',
        run: function () {
            // Scroll down.
            this.$anchor[0].closest('body').querySelector('.o_footer_copyright_name')
                .scrollIntoView(true);
        },
    },
    {
        content: "The Home menu should be closed",
        trigger: 'iframe #top_menu .nav-item:contains("Home"):has(ul:not(.show))',
        run: () => {}, // It's a check.
    },
    {
        content: "Open the Home menu after scroll",
        trigger: 'iframe #top_menu .nav-item a.dropdown-toggle:contains("Home")',
    },
    {
        content: "Check that the Home menu is opened",
        trigger: 'iframe #top_menu .nav-item:contains("Home") ul.show li' +
            ' a.dropdown-item:contains("Contact us")[href="/contactus"]',
        run: () => {}, // It's a check.
    },
    {
        content: "Close the Home menu",
        trigger: 'iframe #top_menu .nav-item:has(a.dropdown-toggle:contains("Home"))',
    },
    {
        content: "Check that the Home menu is closed",
        trigger: 'iframe #top_menu .nav-item:contains("Home"):has(ul:not(.show))',
        run: () => {}, // It's a check.
    },
    {
        content: "Open the mega menu",
        trigger: 'iframe #top_menu .nav-item a.o_mega_menu_toggle:contains("Megaaaaa!")',
    },
    {
        content: "When the mega menu is opened, scroll up",
        trigger: 'iframe #top_menu .o_mega_menu_toggle.show',
        run: function () {
            const marginTopOfMegaMenu = getComputedStyle(
                this.$anchor[0].closest('.dropdown').querySelector('.o_mega_menu'))['margin-top'];
            if (marginTopOfMegaMenu !== '0px') {
                console.error('The margin-top of the mega menu should be 0px');
            }
            // Scroll up.
            this.$anchor[0].closest('body').querySelector('.s_media_list_item:nth-child(2)')
                .scrollIntoView(true);
        }
    },
    {
        content: "Check that the mega menu is closed",
        trigger: 'iframe #top_menu .nav-item:contains("Megaaaaa!"):has(div[data-name="Mega Menu"]:not(.show))',
        run:() => {}, // It's a check.
    },
    {
        content: "Open the mega menu after scroll",
        trigger: 'iframe #top_menu .nav-item a.o_mega_menu_toggle:contains("Megaaaaa!")',
    },
    {
        content: "Check that the mega menu is opened",
        trigger: 'iframe #top_menu .nav-item:has(a.o_mega_menu_toggle:contains("Megaaaaa!")) ' +
                 '.s_mega_menu_odoo_menu',
        run: () => {}, // It's a check.
    }
]);

return __exports;
});
;

/******************************************************************
*  Filepath: /website/static/tests/tours/edit_translated_page.js  *
*  Lines: 41                                                      *
******************************************************************/
odoo.define('@website/../tests/tours/edit_translated_page', ['@web/core/registry', 'website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const wTourUtils = require("website.tour_utils");

registry.category("web_tour.tours").add('edit_translated_page_redirect', {
    test: true,
    url: '/nl/contactus',
    steps: () => [
    {
        content: "Enter backend",
        trigger: 'a.o_frontend_to_backend_edit_btn',
    },
    {
        content: "Check the data-for attribute",
        trigger: 'iframe main:has([data-for="contactus_form"])',
        run: () => {}, // it's a check
        },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "Go to /nl",
        trigger: "body",
        run: () => {
            // After checking the presence of the editor dashboard, we visit a
            // translated version of the homepage. The homepage is a special
            // case (there is no trailing slash), so we test it separately.
            location.href = '/nl';
        },
    },
    {
        content: "Enter backend",
        trigger: 'a.o_frontend_to_backend_edit_btn',
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
]});

return __exports;
});
;

/*****************************************************************
*  Filepath: /website/static/tests/tours/focus_blur_snippets.js  *
*  Lines: 77                                                     *
*****************************************************************/
odoo.define('@website/../tests/tours/focus_blur_snippets', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('website.tour_utils');

const blockIDToData = {
    parent: {
        selector: 'iframe .s_focusblur',
        name: 'section',
        overlayIndex: 2,
    },
    child1: {
        selector: 'iframe .s_focusblur_child1',
        name: 'first child',
        overlayIndex: 1,
    },
    child2: {
        selector: 'iframe .s_focusblur_child2',
        name: 'second child',
        overlayIndex: 0,
    },
};

function clickAndCheck(blockID, expected) {
    const blockData = blockIDToData[blockID] || {};

    return [{
        content: blockID ? `Enable the ${blockData.name}` : 'Disable all blocks',
        trigger: blockData.selector || 'iframe #wrapwrap',
    }, {
        content: 'Once the related overlays are enabled/disabled, check that the focus/blur calls have been correct.',
        trigger: blockID
            ? `iframe .oe_overlay.ui-draggable:eq(${blockData.overlayIndex}).oe_active`
            : `iframe #oe_manipulators:not(:has(.oe_active))`,
        allowInvisible: !blockID,
        run: function (actions) {
            const result = window.focusBlurSnippetsResult;
            window.focusBlurSnippetsResult = [];

            if (expected.length !== result.length
                    || !expected.every((item, i) => item === result[i])) {
                console.error(`
                    Expected: ${expected.toString()}
                    Result: ${result.toString()}
                `);
            }
        },
    }];
}

window.focusBlurSnippetsResult = [];

wTourUtils.registerWebsitePreviewTour("focus_blur_snippets", {
    test: true,
    url: "/",
    edition: true,
}, [
    {
        content: 'Drag the custom block into the page',
        trigger: '#snippet_structure .oe_snippet:has(.oe_snippet_body.s_focusblur) .oe_snippet_thumbnail',
        run: 'drag_and_drop iframe #wrap',
    },
    ...clickAndCheck('parent', ['focus parent']),
    ...clickAndCheck(null, ['blur parent']),
    ...clickAndCheck('child1', ['focus parent', 'focus child1']),
    ...clickAndCheck('child1', []),
    ...clickAndCheck(null, ['blur parent', 'blur child1']),
    ...clickAndCheck('parent', ['focus parent']),
    ...clickAndCheck('child1', ['blur parent', 'focus parent', 'focus child1']),
    ...clickAndCheck('child2', ['blur parent', 'blur child1', 'focus parent', 'focus child2']),
    ...clickAndCheck('parent', ['blur parent', 'blur child2', 'focus parent']),
]);

return __exports;
});
;

/****************************************************************
*  Filepath: /website/static/tests/tours/gray_color_palette.js  *
*  Lines: 91                                                    *
****************************************************************/
odoo.define('@website/../tests/tours/gray_color_palette', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/
const wTourUtils = require('website.tour_utils');

function waitForCSSReload() {
    // TODO we should find a better way to wait for this in tests after CSS
    // reload, it is currently done multiple different ways depending on the
    // test.
    return [
        {
            // This step is here because the option is applied but triggers a
            // reloading of the CC value, so if the second value is sent too
            // soon, it will be ignored. Clicking on the snippet tab and back
            // will ensure that the mutex is cleared, and therefore we can apply
            // the saturation step.
            content: "Click on the blocks tab and back on theme to ensure the changes are applied",
            trigger: '.o_we_add_snippet_btn',
        },
        {
            content: "Go back to theme options",
            trigger: '.o_we_customize_theme_btn',
            extra_trigger: '#o_scroll',
        },
        {
            content: "Wait for no loading",
            trigger: 'body:not(:has(.o_we_ui_loading)) iframe body:not(:has(.o_we_ui_loading))',
            run: () => null,
        },
    ];
}

wTourUtils.registerWebsitePreviewTour('website_gray_color_palette', {
    test: true,
    url: '/',
    edition: true,
}, [
    {
        content: "Go to theme options",
        trigger: '.o_we_customize_theme_btn',
    },
    {
        content: "Toggle gray color palette",
        trigger: '.o_we_gray_preview.o_we_collapse_toggler',
    },
    {
        content: "Drag the hue slider",
        trigger: '.o_we_slider_tint[data-param="gray-hue"]',
        run: () => {
            const slider = document.querySelector('.o_we_slider_tint[data-param="gray-hue"] input');
            slider.value = 100;
            slider.dispatchEvent(new InputEvent('change', {bubbles: true}));
        },
    },
    {
        content: "Check the preview of the gray 900 after hue change",
        trigger: '[variable="900"][style="background-color: rgb(36, 41, 33) !important;"]',
        run: () => {}, // This is a check.
    },
    ...waitForCSSReload(),
    {
        content: "Drag the saturation slider",
        trigger: '.o_we_user_value_widget[data-param="gray-extra-saturation"]',
        run: () => {
            const slider = document.querySelector('.o_we_user_value_widget[data-param="gray-extra-saturation"] input');
            slider.value = 15;
            slider.dispatchEvent(new InputEvent('change', {bubbles: true}));
        }
    },
    {
        content: "Check the preview of the gray 900 after saturation change",
        trigger: '[variable="900"][style="background-color: rgb(34, 47, 27) !important;"]',
        run: () => {}, // This is a check.
    },
    ...waitForCSSReload(),
    {
        content: "Wait for the iframe to be loaded",
        trigger: 'iframe body',
        run: () => {
            const iframeEl = document.querySelector('.o_website_preview .o_iframe');
            const styles = iframeEl.contentWindow.getComputedStyle(iframeEl.contentDocument.documentElement);
            if (styles.getPropertyValue('--900').toString().replace(/ /g, '') !== '#222F1B') {
                console.error('The value for the gray 900 is not right');
            }
        }
    },
]);

return __exports;
});
;

/*********************************************************
*  Filepath: /website/static/tests/tours/grid_layout.js  *
*  Lines: 51                                             *
*********************************************************/
odoo.define('@website/../tests/tours/grid_layout', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('website_replace_grid_image', {
    test: true,
    url: '/',
    edition: true,
}, [
    wTourUtils.dragNDrop({
        id: 's_text_image',
        name: 'Text - Image',
    }),
    wTourUtils.clickOnSnippet({
        id: 's_text_image',
        name: 'Text - Image',
    }),
    {
        content: "Toggle to grid mode",
        trigger: '.o_we_user_value_widget[data-name="grid_mode"]',
    },
    {
        content: "Replace image",
        trigger: 'iframe .s_text_image img',
        run: 'dblclick',
    },
    {
        content: "Pick new image",
        trigger: '.o_select_media_dialog img[title="s_banner_default_image.jpg"]',
    },
    {
        content: "Add new image column",
        trigger: '.o_we_user_value_widget[data-add-element="image"]',
    },
    {
        content: "Replace new image",
        trigger: 'iframe .s_text_image img[src="/web/image/website.s_text_image_default_image"]',
        run: 'dblclick',
    },
    {
        content: "Pick new image",
        trigger: '.o_select_media_dialog img[title="s_banner_default_image.jpg"]',
    },
    ...wTourUtils.clickOnSave()
]);

return __exports;
});
;

/*************************************************************************
*  Filepath: /website/static/tests/tours/hide_chat_window_on_preview.js  *
*  Lines: 31                                                             *
*************************************************************************/
odoo.define('@website/../tests/tours/hide_chat_window_on_preview', ['@web/core/registry', 'website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/* @odoo-module */

const { registry } = require("@web/core/registry");

const wTourUtils = require("website.tour_utils");

registry.category("web_tour.tours").add("test_hide_chat_window_on_preview", {
    test: true,
    steps: () => [
        {
            trigger: ".o-mail-ChatWindow",
            run() {
                window.location.href = wTourUtils.getClientActionUrl("/");
            },
        },
        {
            trigger: ".o_website_preview",
            run() {
                if (document.querySelector(".o-mail-ChatWindow")) {
                    throw new Error("Chat window should not be visible");
                }
            },
        },
    ],
});

return __exports;
});
;

/*******************************************************************
*  Filepath: /website/static/tests/tours/homepage_edit_discard.js  *
*  Lines: 24                                                       *
*******************************************************************/
odoo.define('@website/../tests/tours/homepage_edit_discard', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require("website.tour_utils");

wTourUtils.registerWebsitePreviewTour('homepage_edit_discard', {
    test: true,
    url: '/',
    edition: true,
}, [{
    trigger: "#oe_snippets button[data-action=\"cancel\"]:not([disabled])",
    extra_trigger: "body:not(:has(.o_dialog))",
    content: "<b>Click Discard</b> to Discard all Changes.",
    position: "bottom",
}, {
    trigger: "iframe body:not(.editor_enable)",
    auto: true,
    run: () => null,
}]);

return __exports;
});
;

/*********************************************************
*  Filepath: /website/static/tests/tours/html_editor.js  *
*  Lines: 225                                            *
*********************************************************/
odoo.define('@website/../tests/tours/html_editor', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module**/
/* global ace */

const wTourUtils = require("website.tour_utils");

const adminCssModif = '#wrap {display: none;}';
const demoCssModif = '// demo_edition';

wTourUtils.registerWebsitePreviewTour('html_editor_multiple_templates', {
    url: '/generic',
    edition: true,
    test: true,
},
    [
        {
            content: "drop a snippet",
            trigger: ".oe_snippet:has(.s_cover) .oe_snippet_thumbnail",
            // id starting by 'oe_structure..' will actually create an inherited view
            run: "drag_and_drop iframe #oe_structure_test_ui",
        },
        ...wTourUtils.clickOnSave(),
        // 2. Edit generic view
        {
            content: "open site menu",
            extra_trigger: "iframe body:not(.editor_enable)",
            trigger: 'button[data-menu-xmlid="website.menu_site"]',
        },
        {
            content: "open html editor",
            trigger: 'a[data-menu-xmlid="website.menu_ace_editor"]',
        },
        {
            content: "add something in the generic view",
            trigger: 'div.ace_line .ace_xml:contains("Generic")',
            run: function () {
                ace.edit('ace-view-editor').getSession().insert({row: 3, column: 1}, '<p>somenewcontent</p>\n');
            },
        },
        // 3. Edit oe_structure specific view
        {
            content: "select oe_structure specific view",
            trigger: 'div.ace_line .ace_xml:contains("somenewcontent")',
            run: function () {
                var viewId = $('#ace-view-list option:contains("oe_structure_test_ui")').val();
                $('#ace-view-list').val(viewId).trigger('change');
            },
        },
        {
            content: "add something in the oe_structure specific view",
            extra_trigger: '#ace-view-id:contains("test.generic_view_oe_structure_test_ui")', // If no xml_id it should show key
            trigger: 'div.ace_line .ace_xml:contains("s_cover")',
            run: function () {
                ace.edit('ace-view-editor').getSession().insert({row: 2, column: 1}, '<p>anothernewcontent</p>\n');
            },
        },
        {
            content: "save the html editor",
            extra_trigger: 'div.ace_line .ace_xml:contains("anothernewcontent")',
            trigger: ".o_ace_view_editor button[data-action=save]",
        },
        {
           content: "check that the page has both modification",
           extra_trigger: 'iframe #wrapwrap:contains("anothernewcontent")',
           trigger: 'iframe #wrapwrap:contains("somenewcontent")',
           run: function () {}, // it's a check
       },
    ]
);

wTourUtils.registerWebsitePreviewTour('test_html_editor_scss', {
    url: '/contactus',
    test: true,
},
    [
        // 1. Open Html Editor and select a scss file
        {
            content: "open site menu",
            extra_trigger: 'iframe #wrap:visible', // ensure state for later
            trigger: 'button[data-menu-xmlid="website.menu_site"]',
        },
        {
            content: "open html editor",
            trigger: 'a[data-menu-xmlid="website.menu_ace_editor"]',
        },
        {
            content: "open type switcher",
            trigger: '.o_ace_type_switcher button',
        },
        {
            content: "select scss files",
            trigger: '.o_ace_type_switcher_choice[data-type="scss"]',
        },
        {
            content: "select 'user_custom_rules'",
            trigger: 'body:has(#ace-scss-list option:contains("user_custom_rules"))',
            run: function () {
                var scssId = $('#ace-scss-list option:contains("user_custom_rules")').val();
                $('#ace-scss-list').val(scssId).trigger('change');
            },
        },
        // 2. Edit that file and ensure it was saved then reset it
        {
            content: "add some scss content in the file",
            trigger: 'div.ace_line .ace_comment:contains("footer {")',
            run: function () {
                ace.edit('ace-view-editor').getSession().insert({row: 2, column: 0}, `${adminCssModif}\n`);
            },
        },
        {
            content: "save the html editor",
            extra_trigger: `div.ace_line:contains("${adminCssModif}")`,
            trigger: ".o_ace_view_editor button[data-action=save]",
        },
         {
            content: "check that the scss modification got applied",
            trigger: 'iframe body:has(#wrap:hidden)',
            run: function () {}, // it's a check
            timeout: 30000, // SCSS compilation might take some time
        },
        {
            content: "reset view (after reload, html editor should have been reopened where it was)",
            trigger: '#ace-view-id button[data-action="reset"]:not([disabled])',
        },
        {
            content: "confirm reset warning",
            trigger: '.modal-footer .btn-primary',
        },
        {
            content: "check that the scss file was reset correctly, wrap content should now be visible again",
            trigger: 'iframe #wrap:visible',
            run: function () {}, // it's a check
            timeout: 30000, // SCSS compilation might take some time
        },
        // 3. Customize again that file (will be used in second part of the test
        //    to ensure restricted user can still use the HTML Editor)
        {
            content: "add some scss content in the file",
            trigger: 'div.ace_line .ace_comment:contains("footer {")',
            run: function () {
                ace.edit('ace-view-editor').getSession().insert({row: 2, column: 0}, `${adminCssModif}\n`);
            },
        },
        {
            content: "save the html editor",
            extra_trigger: `div.ace_line:contains("${adminCssModif}")`,
            trigger: '.o_ace_view_editor button[data-action=save]',
        },
        {
            content: "check that the scss modification got applied",
            trigger: 'iframe body:has(#wrap:hidden)',
            run: function () {}, // it's a check
        },
    ]
);

wTourUtils.registerWebsitePreviewTour('test_html_editor_scss_2', {
    url: '/',
    test: true,
},
    [
        // This part of the test ensures that a restricted user can still use
        // the HTML Editor if someone else made a customization previously.

        // 4. Open Html Editor and select a scss file
        {
            content: "open site menu",
            trigger: 'button[data-menu-xmlid="website.menu_site"]',
        },
        {
            content: "open html editor",
            trigger: 'a[data-menu-xmlid="website.menu_ace_editor"]',
        },
        {
            content: "open type switcher",
            trigger: '.o_ace_type_switcher button',
        },
        {
            content: "select scss files",
            trigger: '.o_ace_type_switcher_choice[data-type="scss"]',
        },
        {
            content: "select 'user_custom_rules'",
            trigger: 'body:has(#ace-scss-list option:contains("user_custom_rules"))',
            run: function () {
                var scssId = $('#ace-scss-list option:contains("user_custom_rules")').val();
                $('#ace-scss-list').val(scssId).trigger('change');
            },
        },
        // 5. Edit that file and ensure it was saved then reset it
        {
            content: "add some scss content in the file",
            trigger: `div.ace_line:contains("${adminCssModif}")`, // ensure the admin modification is here
            run: function () {
                ace.edit('ace-view-editor').getSession().insert({row: 2, column: 0}, `${demoCssModif}\n`);
            },
        },
        {
            content: "save the html editor",
            extra_trigger: `div.ace_line:contains("${demoCssModif}")`,
            trigger: ".o_ace_view_editor button[data-action=save]",
        },
        {
            content: "reset view (after reload, html editor should have been reopened where it was)",
            trigger: '#ace-view-id button[data-action="reset"]:not([disabled])',
            timeout: 30000, // SCSS compilation might take some time
        },
        {
            content: "confirm reset warning",
            trigger: '.modal-footer .btn-primary',
        },
        {
            content: "check that the scss file was reset correctly",
            extra_trigger: `body:not(:has(div.ace_line:contains("${adminCssModif}")))`,
            trigger: `body:not(:has(div.ace_line:contains("${demoCssModif}")))`,
            run: function () {}, // it's a check
            timeout: 30000, // SCSS compilation might take some time
        },
    ]
);

return __exports;
});
;

/********************************************************
*  Filepath: /website/static/tests/tours/link_tools.js  *
*  Lines: 208                                           *
********************************************************/
odoo.define('@website/../tests/tours/link_tools', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');

const clickOnImgStep = {
    content: "Click somewhere else to save.",
    trigger: 'iframe #wrap .s_text_image img',
};

wTourUtils.registerWebsitePreviewTour('link_tools', {
    test: true,
    url: '/',
    edition: true,
}, [
    // 1. Create a new link from scratch.
    wTourUtils.dragNDrop({
        id: 's_text_image',
        name: 'Text - Image',
    }),
    {
        content: "Replace first paragraph, to insert a new link",
        trigger: 'iframe #wrap .s_text_image p',
        run: 'text Go to odoo: '
    },
    {
        content: "Open link tools",
        trigger: "#toolbar:not(.oe-floating) #create-link",
    },
    {
        content: "Type the link URL odoo.com",
        trigger: '#toolbar:not(.oe-floating) #o_link_dialog_url_input',
        run: 'text odoo.com'
    },
    clickOnImgStep,
    // 2. Edit the link with the link tools.
    {
        content: "Click on the newly created link",
        trigger: 'iframe .s_text_image a[href="http://odoo.com"]:contains("odoo.com")',
    },
    {
        content: "Label value should contain odoo.com",
        trigger: '#o_link_dialog_label_input',
        run: () => {
            if ($('#o_link_dialog_label_input').val() !== 'odoo.com') {
                throw new Error('Label value should contain odoo.com');
            }
        },
    },
    {
        content: "Change content (editing the label input) to odoo website_2",
        trigger: '#o_link_dialog_label_input',
        run: 'text odoo website_2',
    },
    {
        content: "Click again on the link",
        trigger: 'iframe .s_text_image a[href="http://odoo.com"]:contains("odoo website_2")',
    },
    {
        content: "Change content (editing the DOM) to odoo website",
        trigger: 'iframe .s_text_image a[href="http://odoo.com"]:contains("odoo website_2")',
        run: 'text odoo website',
    },
    clickOnImgStep,
    {
        content: "Click again on the link",
        trigger: 'iframe .s_text_image a[href="http://odoo.com"]:contains("odoo website")',
    },
    {
        content: "Label value should contain odoo website",
        trigger: '#o_link_dialog_label_input',
        run: () => {
            if ($('#o_link_dialog_label_input').val() !== 'odoo website') {
                throw new Error('Label value should contain odoo website');
            }
        },
    },
    {
        content: "Link tools, should be open, change the url",
        trigger: '#o_link_dialog_url_input',
        run: 'text odoo.be'
    },

    clickOnImgStep,
    ...wTourUtils.clickOnSave(),
    // 3. Edit a link after saving the page.
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    clickOnImgStep,
    {
        content: "The new link content should be odoo website and url odoo.be",
        trigger: 'iframe .s_text_image a[href="http://odoo.be"]:contains("odoo website")',
    },
    {
        content: "The new link content should be odoo website and url odoo.be",
        trigger: '#toolbar:not(.oe-floating) .dropdown:has([name="link_style_color"]) > button',
    },
    {
        // When doing automated testing, the link popover takes time to
        // hide. While hidding, the editor observer is unactive in order to
        // prevent the popover mutation to be recorded. In a manual
        // scenario, the popover has plenty of time to be hidden and the
        // obsever would be re-activated in time. As this problem arise only
        // in test, we make sure the popover is hidden
        trigger: 'iframe html:not(:has(.popover))',
        run: () => null, // it's a check
    },
    {
        content: "Click on the secondary style button.",
        trigger: '#toolbar:not(.oe-floating) we-button[data-value="secondary"]',
    },
    ...wTourUtils.clickOnSave(),
    {
        content: "The link should have the secondary button style.",
        trigger: 'iframe .s_text_image a.btn.btn-secondary[href="http://odoo.be"]:contains("odoo website")',
        run: () => {}, // It's a check.
    },
    // 4. Add link on image.
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    wTourUtils.dragNDrop({
        id: 's_three_columns',
        name: 'Columns',
    }),
    {
        content: "Click on the first image.",
        trigger: 'iframe .s_three_columns .row > :nth-child(1) img',
    },
    {
        content: "Activate link.",
        trigger: '.o_we_customize_panel we-row:contains("Media") we-button.fa-link',
    },
    {
        content: "Set URL.",
        trigger: '.o_we_customize_panel we-input:contains("Your URL") input',
        run: 'text odoo.com',
    },
    {
        content: "Deselect image.",
        trigger: 'iframe .s_three_columns .row > :nth-child(2) img',
    },
    {
        content: "Re-select image.",
        trigger: 'iframe .s_three_columns .row > :nth-child(1) img',
    },
    {
        content: "Check that the second image is not within a link.",
        trigger: 'iframe .s_three_columns .row > :nth-child(2) div > img',
        run: () => {}, // It's a check.
    },
    {
        content: "Check that link tools appear.",
        trigger: 'iframe .popover div a:contains("http://odoo.com")',
        run: () => {}, // It's a check.
    },
    // 5. Remove link from image.
    {
        content: "Remove link.",
        trigger: 'iframe .popover:contains("http://odoo.com") a .fa-chain-broken',
    },
    {
        content: "Check that image is not within a link anymore.",
        trigger: 'iframe .s_three_columns .row > :nth-child(1) div > img',
        run: () => {}, // It's a check.
    },
    // 6. Add mega menu with Cards template and edit URL on text-selected card.
    wTourUtils.clickOnElement("menu link", "iframe header .nav-item a"),
    wTourUtils.clickOnElement("'Edit menu' icon", "iframe .o_edit_menu_popover .fa-sitemap"),
    {
        content: "Click on 'Add Mega Menu Item' link",
        extra_trigger: '.o_website_dialog:visible',
        trigger: ".modal-body a:contains('Add Mega Menu Item')",
    },
    {
        content: "Enter mega menu name",
        trigger: ".modal-body input",
        run: "text Mega",
    },
    wTourUtils.clickOnElement("OK button", ".btn-primary"),
    {
        content: "Drag Mega at the top",
        trigger: '.oe_menu_editor li:contains("Mega") .fa-bars',
        run: "drag_move_and_drop [0,0]@.oe_menu_editor li:contains('Home') .fa-bars => .oe_menu_editor li",
    },
    {
        content: "Wait for drop",
        trigger: '.oe_menu_editor:first-child:contains("Mega")',
        run: () => {}, // This is a check.
    },
    wTourUtils.clickOnElement("Save button", ".btn-primary:contains('Save')"),
    wTourUtils.clickOnElement("mega menu", "iframe header .o_mega_menu_toggle"),
    wTourUtils.changeOption("MegaMenuLayout", "we-toggler"),
    wTourUtils.changeOption("MegaMenuLayout", '[data-select-label="Cards"]'),
    wTourUtils.clickOnElement("card's text", "iframe header .s_mega_menu_cards font"),
    {
        content: "Enter an URL",
        trigger: "#o_link_dialog_url_input",
        run: "text https://www.odoo.com",
    },
    {
        content: "Check nothing is lost",
        trigger: "iframe header .s_mega_menu_cards a[href='https://www.odoo.com']:has(img):has(h4):has(p font)",
        run: () => {}, // This is a check.
    },
]);

return __exports;
});
;

/**********************************************************
*  Filepath: /website/static/tests/tours/media_dialog.js  *
*  Lines: 102                                             *
**********************************************************/
odoo.define('@website/../tests/tours/media_dialog', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour("website_media_dialog_undraw", {
    test: true,
    url: '/',
    edition: true,
}, [
wTourUtils.dragNDrop({
    id: 's_text_image',
    name: 'Text - Image',
}),
{
    trigger: '.s_text_image img',
    run: "dblclick",
},
{
    trigger: '.o_select_media_dialog:has(.o_we_search_select option[value="media-library"])',
},
]);

wTourUtils.registerWebsitePreviewTour('website_media_dialog_icons', {
    test: true,
    url: '/',
    edition: true,
}, [
    wTourUtils.dragNDrop({
        id: 's_process_steps',
        name: 'Steps',
    }),
    {
        content: "Open MediaDialog from a snippet icon",
        trigger: 'iframe .s_process_steps .fa-unlock-alt',
        run: "dblclick",
    },
    {
        content: "Pick the same icon",
        trigger: '.o_select_media_dialog .o_we_attachment_selected.fa-unlock-alt',
    },
    {
        content: "Check if the icon remains the same",
        trigger: 'iframe .s_process_steps .fa-unlock-alt',
        run: () => null, // it's a check
    },
    {
        content: "Open MediaDialog again",
        trigger: 'iframe .s_process_steps .fa-unlock-alt',
        run: "dblclick",
    },
    {
        content: "Click on the ADD button",
        trigger: '.o_select_media_dialog .btn:contains(Add)',
    },
    {
        content: "Check if the icon remains the same",
        trigger: 'iframe .s_process_steps .fa-unlock-alt',
        run: () => null, // it's a check
    },
    ...wTourUtils.clickOnSave()
]);

wTourUtils.registerWebsitePreviewTour("website_media_dialog_image_shape", {
    test: true,
    url: "/",
    edition: true,
}, [
    wTourUtils.dragNDrop({
        id: "s_text_image",
        name: "Text - Image",
    }),
    {
        content: "Click on the image",
        trigger: "iframe .s_text_image img",
    },
    wTourUtils.changeOption("ImageTools", 'we-select[data-name="shape_img_opt"] we-toggler'),
    wTourUtils.changeOption("ImageTools", "we-button[data-set-img-shape]"),
    {
        content: "Open MediaDialog from an image",
        trigger: "iframe .s_text_image img[data-shape]",
        run: "dblclick",
    },
    {
        content: "Click on the 'Icons' tab",
        trigger: '.o_select_media_dialog .o_notebook_headers .nav-item a:contains("Icons")',
    },
    {
        content: "Select an icon",
        trigger: ".o_select_media_dialog:has(.nav-link.active:contains('Icons')) .tab-content span.fa-heart",
    },
    {
        content: "Checks that the icon doesn't have a shape",
        trigger: "iframe .s_text_image .fa-heart:not([data-shape])",
        run: () => {}, //it's a check
    },
]);

return __exports;
});
;

/***********************************************************
*  Filepath: /website/static/tests/tours/multi_edition.js  *
*  Lines: 42                                               *
***********************************************************/
odoo.define('@website/../tests/tours/multi_edition', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('website_multi_edition', {
    test: true,
    url: '/',
    edition: true,
}, [
    {
        content: 'Check the current page has not the elements that will be added',
        trigger: 'iframe body:not(:has(.s_text_image)):not(:has(.s_hr))',
        run: () => null,
    },
    // Edit the main element of the page
    wTourUtils.dragNDrop({
        id: 's_text_image',
        name: 'Text - Image',
    }),
    // Edit another part in the page, like the footer
    wTourUtils.dragNDrop({
        id: 's_hr',
        name: 'Separator',
    }),
    ...wTourUtils.clickOnSave(),
    {
        content: 'Check that the main element of the page was properly saved',
        trigger: 'iframe main .s_text_image',
        run: () => null,
    },
    {
        content: 'Check that the footer was properly saved',
        trigger: 'iframe footer .s_hr',
        run: () => null,
    },
]);

return __exports;
});
;

/**********************************************************
*  Filepath: /website/static/tests/tours/page_manager.js  *
*  Lines: 117                                             *
**********************************************************/
odoo.define('@website/../tests/tours/page_manager', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('website.tour_utils');

// TODO: This part should be moved in a QUnit test
const checkKanbanGroupBy = [{
    content: "Click on Kanban View",
    trigger: '.o_cp_switch_buttons .o_kanban',
}, {
    content: "Open search panel menu",
    extra_trigger: '.o_kanban_renderer',
    trigger: '.o_control_panel .o_searchview_dropdown_toggler',
}, {
    content: "Click on Add Custom Group",
    trigger: '.o_add_custom_group_menu',
}, {
    content: "Click on Apply", // Active is selected by default
    trigger: '.o_add_custom_group_menu + .o_accordion_values .btn-primary',
}, {
    content: "Click on List View",
    extra_trigger: '.o_kanban_renderer .o_kanban_header',
    trigger: '.o_cp_switch_buttons .o_list',
}, {
    content: "Remove applied Group By",
    extra_trigger: '.o_list_renderer',
    trigger: '.o_cp_searchview .o_facet_remove',
}];

const checkWebsiteFilter = [{
	content: "Click on the search options",
	trigger: ".o_searchview_dropdown_toggler",
}, {
	content: "Select My Website 2",
	trigger: ".o_dropdown_container.o_website_menu > .dropdown-item:contains('My Website 2')",
}, {
	content: "Check that the homepage is now the one of My Website 2",
	trigger: ".o_list_table .o_data_row .o_data_cell[name=name]:contains('Home') " +
			 "~ .o_data_cell[name=website_id]:contains('My Website 2')",
	run: () => null, // it's a check
}, {
	content: "Check that the search options are still open",
	trigger: ".o_search_bar_menu",
	run: () => null, // it's a check
}, {
	content: "Go back to My Website",
	trigger: ".o_dropdown_container.o_website_menu > .dropdown-item:contains('My Website')",
}, {
	content: "Check that the homepage is now the one of My Website",
	trigger: ".o_list_table .o_data_row .o_data_cell[name=name]:contains('Home') " +
			 "~ .o_data_cell[name=website_id]:contains('My Website'):not(:contains('2'))",
	run: () => null, // it's a check
}];

const deleteSelectedPage = [
    {
        content: "Click on Action",
        trigger: '.o_cp_action_menus button',
    },
    {
        content: "Click on Delete",
        trigger: '.o-dropdown--menu span:contains("Delete")',
    },
    {
        content: "Click on I am sure about this",
        trigger: 'main.modal-body input[type="checkbox"]',
        // The loading of the dependencies can take a while and
        // sometimes reach the default 10s timeout
        timeout: 20000,
    },
    {
        content: "Click on OK",
        trigger: '.modal-content footer button.btn-primary:not([disabled])',
    }
];
const homePage = 'tr:contains("Home")';

wTourUtils.registerWebsitePreviewTour('website_page_manager', {
    test: true,
    url: '/',
}, [
    {
        content: "Click on Site",
        trigger: 'button.dropdown-toggle[data-menu-xmlid="website.menu_site"]',
    },
    {
        content: "Click on Pages",
        trigger: 'a.dropdown-item[data-menu-xmlid="website.menu_website_pages_list"]',
    },
    ...checkKanbanGroupBy,
    ...checkWebsiteFilter,
    {
        content: "Click on Home Page",
        trigger: `.o_list_renderer ${homePage} td.o_list_record_selector input[type="checkbox"]`,
    },
    ...deleteSelectedPage,
    {
        content: "Check that the page has been removed",
        trigger: `.o_list_renderer:not(:has(${homePage}))`,
        run: () => null,
    },
    {
        content: "Click on All Pages",
        trigger: '.o_list_renderer thead input[type="checkbox"]',
    },
    ...deleteSelectedPage,
    {
        content: "Check that all pages have been removed",
        trigger: '.o_list_renderer tbody:not(:has([data-id]))',
        run: () => null,
    },
]);

return __exports;
});
;

/******************************************************
*  Filepath: /website/static/tests/tours/parallax.js  *
*  Lines: 56                                          *
******************************************************/
odoo.define('@website/../tests/tours/parallax', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require("website.tour_utils");

const coverSnippet = {id: "s_cover", name: "Cover"};

wTourUtils.registerWebsitePreviewTour("test_parallax", {
    test: true,
    url: "/",
    edition: true,
}, [
    wTourUtils.dragNDrop(coverSnippet),
    wTourUtils.clickOnSnippet(coverSnippet),
    wTourUtils.changeOption("BackgroundOptimize", "we-toggler"),
    wTourUtils.changeOption("BackgroundOptimize", 'we-button[data-gl-filter="blur"]'),
{
    content: "Check that the Cover snippet has the Blur filter on its background image",
    trigger: "iframe .s_cover span[data-gl-filter='blur']",
    isCheck: true,
},
    wTourUtils.changeOption("Parallax", "we-toggler"),
    wTourUtils.changeOption("Parallax", 'we-button[data-select-data-attribute="0"]'),
{
    content: "Check that the data related to the filter have been transferred to the new target",
    trigger: "iframe .s_cover[data-gl-filter='blur']",
    isCheck: true,
},
{
    content: "Check that the 'o_modified_image_to_save' class has been transferred to the new target",
    trigger: "iframe .s_cover.o_modified_image_to_save",
    isCheck: true,
},
    wTourUtils.changeOption("Parallax", "we-toggler"),
    wTourUtils.changeOption("Parallax", 'we-button[data-select-data-attribute="1"]'),
{
    content: "Check that the 'o_modified_image_to_save' class has been deleted from the old target",
    trigger: "iframe .s_cover:not(.o_modified_image_to_save)",
    isCheck: true,
},
{
    content: "Check that the 'o_modified_image_to_save' class has been transferred to the new target",
    trigger: "iframe span.s_parallax_bg.o_modified_image_to_save",
    isCheck: true,
},
{
    content: "Check that the data related to the filter have been transferred to the new target",
    trigger: "iframe span.s_parallax_bg[data-gl-filter='blur']",
    isCheck: true,
},
]);

return __exports;
});
;

/****************************************************************
*  Filepath: /website/static/tests/tours/public_user_editor.js  *
*  Lines: 16                                                    *
****************************************************************/
odoo.define('@website/../tests/tours/public_user_editor', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('public_user_editor', {
    test: true,
    steps: () => [{
    trigger: '.note-editable',
    run: function () {}, // Simple check
}]});

return __exports;
});
;

/***************************************************************************
*  Filepath: /website/static/tests/tours/public_user_editor_dep_widget.js  *
*  Lines: 22                                                               *
***************************************************************************/
odoo.define('@website/../tests/tours/public_user_editor_dep_widget', ['web.public.widget', '@web_editor/js/frontend/loadWysiwygFromTextarea'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const publicWidget = require("web.public.widget");
const { loadWysiwygFromTextarea } = require("@web_editor/js/frontend/loadWysiwygFromTextarea");

publicWidget.registry['public_user_editor_test'] = publicWidget.Widget.extend({
    selector: 'textarea.o_public_user_editor_test_textarea',

    /**
     * @override
     */
    start: async function () {
        await this._super(...arguments);
        await loadWysiwygFromTextarea(this, this.el, {});
    },
});

return __exports;
});
;

/************************************************************
*  Filepath: /website/static/tests/tours/reset_password.js  *
*  Lines: 33                                                *
************************************************************/
odoo.define('@website/../tests/tours/reset_password', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('website_reset_password', {
    test: true,
    steps: () => [
    {
        content: "fill new password",
        trigger: '.oe_reset_password_form input[name="password"]',
        run: "text adminadmin"
    },
    {
        content: "fill confirm password",
        trigger: '.oe_reset_password_form input[name="confirm_password"]',
        run: "text adminadmin"
    },
    {
        content: "submit reset password form",
        trigger: '.oe_reset_password_form button[type="submit"]',
    },
    {
        content: "check that we're logged in",
        trigger: '.o_user_menu .dropdown-toggle',
        run: function () {}
    },
]});

return __exports;
});
;

/***************************************************************
*  Filepath: /website/static/tests/tours/restricted_editor.js  *
*  Lines: 16                                                   *
***************************************************************/
odoo.define('@website/../tests/tours/restricted_editor', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require("website.tour_utils");

wTourUtils.registerWebsitePreviewTour("restricted_editor", {
    test: true,
    url: "/",
}, [
    ...wTourUtils.clickOnEditAndWaitEditMode(),
]);

return __exports;
});
;

/*************************************************
*  Filepath: /website/static/tests/tours/rte.js  *
*  Lines: 256                                    *
*************************************************/
odoo.define('@website/../tests/tours/rte', ['web.session', 'website.tour_utils', '@web_editor/js/wysiwyg/wysiwyg'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const session = require("web.session");
const wTourUtils = require("website.tour_utils");
const { Wysiwyg } = require("@web_editor/js/wysiwyg/wysiwyg");

var domReady = new Promise(function (resolve) {
    $(resolve);
});
var ready = Promise.all([domReady, session.is_bound]);

wTourUtils.registerWebsitePreviewTour('rte_translator', {
    test: true,
    url: '/',
    wait_for: ready,
}, [{
    content: "click language dropdown",
    trigger: 'iframe .js_language_selector .dropdown-toggle',
}, {
    content: "click on Add a language",
    trigger: 'iframe a.o_add_language',
}, {
    content: "type Parseltongue",
    trigger: 'div[name="lang_ids"] .o_input_dropdown input',
    run: 'text Parseltongue',
}, {
    content: 'select Parseltongue',
    trigger: '.dropdown-item:contains(Parseltongue)',
}, {
    content: "load Parseltongue",
    trigger: '.modal-footer .btn-primary',
    extra_trigger: '.modal-dialog div[name="lang_ids"] .rounded-pill .o_tag_badge_text:contains(Parseltongue)',
}, {
    content: "click language dropdown (2)",
    trigger: 'iframe .js_language_selector .dropdown-toggle',
    timeout: 60000,
}, {
    content: "go to english version",
    trigger: 'iframe .js_language_selector a[data-url_code="en"]',
    extra_trigger: 'iframe html[lang*="pa-GB"]',
}, {
    content: "Open new page menu",
    trigger: ".o_menu_systray .o_new_content_container > a",
    extra_trigger: 'iframe html[lang*="en-US"]',
    consumeVisibleOnly: true,
}, {
    content: "click on new page",
    trigger: '.o_new_content_element a',
}, {
    content: "insert file name",
    trigger: '.modal-dialog input[type="text"]',
    run: 'text rte_translator.xml',
}, {
    content: "create file",
    trigger: '.modal-dialog button.btn-primary',
    extra_trigger: 'input[type="text"]:propValue(rte_translator.xml)',
}, {
    content: "click on the 'page manager' button",
    trigger: 'button[name="website.action_website_pages_list"]',
}, {
    content: "click on the record to display the xml file in the iframe",
    trigger: 'td:contains("rte_translator.xml")',
}, {
    content: "Open new page menu",
    trigger: ".o_menu_systray .o_new_content_container > a",
    consumeVisibleOnly: true,
}, {
    content: "click on new page",
    trigger: '.o_new_content_element a',
}, {
    content: "insert page name",
    trigger: '.modal-dialog input[type="text"]',
    run: 'text rte_translator',
}, {
    content: "create page",
    trigger: '.modal-dialog button.btn-primary',
    extra_trigger: 'input[type="text"]:propValue(rte_translator)',
}, {
    content: "drop a snippet",
    trigger: "#snippet_structure .oe_snippet:eq(1) .oe_snippet_thumbnail",
    run: 'drag_and_drop iframe #wrap',
}, {
    content: "change content",
    trigger: 'iframe #wrap',
    run: function () {
        $('iframe:not(.o_ignore_in_tour)').contents().find("#wrap p:first").replaceWith('<p>Write one or <font style="background-color: yellow;">two paragraphs <b>describing</b></font> your product or\
                <font style="color: rgb(255, 0, 0);">services</font>. To be successful your content needs to be\
                useful to your <a href="/999">readers</a>.</p> <input value="test translate default value" placeholder="test translate placeholder"/>\
                <p>&lt;b&gt;&lt;/b&gt; is an HTML&nbsp;tag &amp; is empty</p>');
        $('iframe:not(.o_ignore_in_tour)').contents().find("#wrap img").attr("title", "test translate image title");
    }
}, {
    content: "save",
    trigger: 'button[data-action=save]',
    extra_trigger: 'iframe #wrap p:first b',
}, {
    content: "click language dropdown (3)",
    trigger: 'iframe .js_language_selector .dropdown-toggle',
    extra_trigger: 'iframe body:not(.editor_enable)',
}, {
    content: "click on Parseltongue version",
    trigger: 'iframe .js_language_selector a[data-url_code="pa_GB"]',
    extra_trigger: 'iframe html[lang*="en"]',
}, {
    content: "translate",
    trigger: '.o_menu_systray .o_translate_website_container > a',
    extra_trigger: 'iframe html:not(:has(#wrap p span))',
}, {
    content: "close modal",
    trigger: '.modal-footer .btn-secondary',
}, {
    content: "check if translation is activate",
    trigger: 'iframe [data-oe-translation-initial-sha]',
}, {
    content: "translate text",
    extra_trigger: '#oe_snippets.o_loaded',
    trigger: 'iframe #wrap p font:first',
    run: function (actionHelper) {
        actionHelper.text('translated Parseltongue text');
        Wysiwyg.setRange(this.$anchor.contents()[0], 22);
        this.$anchor.trigger($.Event("keyup", {key: '_', keyCode: 95}));
        this.$anchor.trigger('input');
    },
}, {
    content: "translate text with special char",
    trigger: 'iframe #wrap input + p span:first',
    run: function (actionHelper) {
        actionHelper.click();
        this.$anchor.prepend('&lt;{translated}&gt;');
        Wysiwyg.setRange(this.$anchor.contents()[0], 0);
        this.$anchor.trigger($.Event("keyup", {key: '_', keyCode: 95}));
        this.$anchor.trigger('input');
    },
}, {
    content: "click on input",
    trigger: 'iframe #wrap input:first',
    extra_trigger: 'iframe #wrap .o_dirty font:first:contains(translated Parseltongue text)',
    run: 'click',
}, {
    content: "translate placeholder",
    trigger: '.modal-dialog input:first',
    run: 'text test Parseltongue placeholder',
}, {
    content: "translate default value",
    trigger: '.modal-dialog input:last',
    run: 'text test Parseltongue default value',
}, {
    content: "close modal",
    trigger: '.modal-footer .btn-primary',
    extra_trigger: '.modal input:propValue(test Parseltongue placeholder)',
}, {
    content: "check: input marked as translated",
    trigger: 'iframe input[placeholder="test Parseltongue placeholder"].oe_translated',
    run: () => {},
}, {
    content: "save translation",
    trigger: 'button[data-action=save]',
}, {
    content: "check: content is translated",
    trigger: 'iframe #wrap p font:first:contains(translated Parseltongue text)',
    extra_trigger: 'iframe body:not(.editor_enable)',
    run: function () {}, // it's a check
}, {
    content: "check: content with special char is translated",
    trigger: "iframe #wrap input + p:contains(<{translated}><b></b> is an HTML\xa0tag & )",
    run: function () {}, // it's a check

}, {
    content: "check: placeholder translation",
    trigger: 'iframe input[placeholder="test Parseltongue placeholder"]',
    run: function () {}, // it's a check
}, {
    content: "check: default value translation",
    trigger: 'iframe input[value="test Parseltongue default value"]',
    run: () => {},
}, {
    content: "open language selector",
    trigger: 'iframe .js_language_selector button:first',
    extra_trigger: 'iframe html[lang*="pa-GB"]:not(:has(#wrap p span))',
}, {
    content: "return to english version",
    trigger: 'iframe .js_language_selector a[data-url_code="en"]',
}, {
    content: "Check body",
    trigger: "iframe body:not(:has(#wrap p font:first:containsExact(paragraphs <b>describing</b>)))",
    run: function () {}, // it's a check
},
...wTourUtils.clickOnEditAndWaitEditMode(),
{
    content: "select text",
    trigger: 'iframe #wrap p',
    run: function (actionHelper) {
        actionHelper.click();
        var el = this.$anchor[0];
        var mousedown = document.createEvent('MouseEvents');
        mousedown.initMouseEvent('mousedown', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, el);
        el.dispatchEvent(mousedown);
        var mouseup = document.createEvent('MouseEvents');
        Wysiwyg.setRange(el.childNodes[2], 6, el.childNodes[2], 13);
        mouseup.initMouseEvent('mouseup', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, el);
        el.dispatchEvent(mouseup);
    },
// This is disabled for now because it reveals a bug that is fixed in saas-15.1
// and considered a tradeoff in 15.0. The bug concerns the invalidation of
// translations when inserting tags with more than one character. Whereas <u>
// didn't trigger an invalidation, <span style="text-decoration-line: underline;">
// does.
// }, {
//     content: "underline",
//     trigger: '.oe-toolbar #underline',
}, {
    content: "save new change",
    trigger: 'button[data-action=save]',
    // See comment above.
    // extra_trigger: '#wrap.o_dirty p span[style*="text-decoration-line: underline;"]',
}, {
    content: "click language dropdown (4)",
    trigger: 'iframe .js_language_selector .dropdown-toggle',
    extra_trigger: 'iframe body:not(.editor_enable)',
}, {
    content: "return in Parseltongue",
    trigger: 'iframe html[lang="en-US"] .js_language_selector .js_change_lang[data-url_code="pa_GB"]',
}, {
    content: "check bis: content is translated",
    trigger: 'iframe #wrap p font:first:contains(translated Parseltongue text)',
    extra_trigger: 'iframe html[lang*="pa-GB"]',
}, {
    content: "check bis: placeholder translation",
    trigger: 'iframe input[placeholder="test Parseltongue placeholder"]',
}, {
    content: "open site menu",
    trigger: 'button[data-menu-xmlid="website.menu_site"]',
}, {
    content: "Open HTML editor",
    trigger: 'a[data-menu-xmlid="website.menu_ace_editor"]',
}, {
    content: "Check that the editor is not showing translated content (1)",
    trigger: '.ace_text-layer .ace_line:contains("an HTML")',
    run: function (actions) {
        var lineEscapedText = $(this.$anchor.text()).last().text();
        if (lineEscapedText !== "&lt;b&gt;&lt;/b&gt; is an HTML&nbsp;tag &amp; is empty") {
            console.error('The HTML editor should display the correct untranslated content');
            $('iframe:not(.o_ignore_in_tour)').contents().find('body').addClass('rte_translator_error');
        }
    },
}, {
    content: "Check that the editor is not showing translated content (2)",
    trigger: 'iframe body:not(.rte_translator_error)',
    run: function () {},
}]);

return __exports;
});
;

/************************************************************************
*  Filepath: /website/static/tests/tours/snippet_background_edition.js  *
*  Lines: 396                                                           *
************************************************************************/
odoo.define('@website/../tests/tours/snippet_background_edition', ['web_editor.utils', 'website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const weUtils = require('web_editor.utils');
const wTourUtils = require('website.tour_utils');

const snippets = [
    {
        id: 's_text_image',
        name: 'Text - Image',
    },
];
const gradients = [
    'linear-gradient(135deg, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%)',
    'linear-gradient(135deg, rgb(255, 222, 202) 0%, rgb(202, 115, 69) 100%)',
];

function typeToName(xType) {
    return xType === 'cc' ? 'color combinations' : xType === 'bg' ? 'background colors' : 'gradients';
}

function switchTo(type, _name) {
    const target = type === 'cc' ? 'color-combinations' : type === 'bg' ? 'custom-colors' : 'gradients';
    const name = _name || typeToName(type);
    return {
        trigger: `.o_we_colorpicker_switch_pane_btn[data-target="${target}"]`,
        content: `Switch to ${name}`,
    };
}

function addCheck(steps, checkX, checkNoX, xType, noSwitch = false) {
    if (!checkX && !checkNoX) {
        return;
    }

    const name = typeToName(xType);
    const selectorCheckX = checkX && `.o_we_color_btn[data-color="${checkX}"].selected`;
    const selectorCheckNoX = checkNoX && `.o_we_color_btn[data-color="${checkNoX}"]:not(.selected)`;
    const step = {
        trigger: selectorCheckX || selectorCheckNoX,
        content: `The correct ${name} is marked as selected`,
        position: 'bottom',
        run: () => null,
    };
    if (!selectorCheckX && selectorCheckNoX) {
        step.extra_trigger = selectorCheckNoX;
    }

    if (!noSwitch) {
        steps.push(switchTo(xType, name));
    }
    steps.push(step);
}

function checkAndUpdateBackgroundColor({
    checkCC, checkNoCC,
    checkBg, checkNoBg,
    checkGradient, checkNoGradient,
    changeType, change,
    finalSelector, finalRun
}) {
    const steps = [
        wTourUtils.changeBackgroundColor(),
    ];

    addCheck(steps, checkCC, checkNoCC, 'cc', true);
    addCheck(steps, checkBg, checkNoBg, 'bg');
    addCheck(steps, checkGradient, checkNoGradient, 'gradient');

    if (changeType) {
        steps.push(switchTo(changeType));
        steps.push(wTourUtils.changeOption('ColoredLevelBackground', `.o_we_color_btn[data-color="${change}"]`, 'background color', 'top', true));
        steps.push({
            trigger: finalSelector,
            content: "The selected colors have been applied (CC AND (BG or GRADIENT))",
            position: 'bottom',
            run: finalRun,
        });
    }

    return steps;
}

function updateAndCheckCustomGradient({updateStep, checkGradient}) {
    const steps = [updateStep, {
        trigger: `iframe #wrapwrap section.${snippets[0].id}.o_cc1`,
        content: 'Color combination 1 still selected',
        run: () => null,
    }];
    addCheck(steps, checkGradient, checkGradient !== gradients[0] && gradients[0], 'gradient', true);
    return steps;
}

wTourUtils.registerWebsitePreviewTour('snippet_background_edition', {
    url: '/',
    edition: true,
    test: true,
},
[
wTourUtils.dragNDrop(snippets[0]),
wTourUtils.clickOnSnippet(snippets[0]),

// Set background image and save.
{
    content: "Click on camera icon",
    trigger: ".snippet-option-ColoredLevelBackground we-button.fa-camera",
},
{
    content: "Click on image",
    trigger: ".o_select_media_dialog img[title='test.png']",
},
...wTourUtils.clickOnSave(),
{
    content: "Check that the image is set",
    trigger: `iframe section.${snippets[0].id} img[data-original-id]`,
    isCheck: true,
},
...wTourUtils.clickOnEditAndWaitEditMode(),
wTourUtils.clickOnSnippet(snippets[0]),
// Remove background image.
{
    content: "Click on camera icon",
    trigger: ".snippet-option-ColoredLevelBackground we-button.fa-camera",
},

// Add a color combination
...checkAndUpdateBackgroundColor({
    changeType: 'cc',
    change: 3,
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc3:not([class*=bg-]):not([style*="background"])`,
}),

// Change the color combination + Check the previous one was marked as selected
...checkAndUpdateBackgroundColor({
    checkCC: 3,
    changeType: 'cc',
    change: 2,
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc2:not(.o_cc3):not([class*=bg-])`,
}),

// Check the color combination was marked as selected + Edit the bg color
...checkAndUpdateBackgroundColor({
    checkCC: 2,
    checkNoCC: 3,
    changeType: 'bg',
    change: 'black-50',
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc2.bg-black-50`,
}),

// Check the current color palette selection + Change the bg color
...checkAndUpdateBackgroundColor({
    checkCC: 2,
    checkBg: 'black-50',
    changeType: 'bg',
    change: '800',
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc2.bg-800:not(.bg-black-50)`,
}),

// Check the current color palette selection + Change the color combination
// again. It should keep the bg color class.
...checkAndUpdateBackgroundColor({
    checkCC: 2,
    checkBg: '800',
    checkNoBg: 'black-50',
    changeType: 'cc',
    change: 4,
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc4:not(.o_cc2).bg-800`,
}),

// Check the current color palette status + Replace the bg color by a gradient
...checkAndUpdateBackgroundColor({
    checkCC: 4,
    checkNoCC: 2,
    checkBg: '800',
    changeType: 'gradient',
    change: gradients[0],
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc4:not(.bg-800)[style*="background-image: ${gradients[0]}"]`,
}),

// Check the current color palette status + Replace the gradient
...checkAndUpdateBackgroundColor({
    checkCC: 4,
    checkNoBg: '800',
    checkGradient: gradients[0],
    changeType: 'gradient',
    change: gradients[1],
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc4[style*="background-image: ${gradients[1]}"]:not([style*="background-image: ${gradients[0]}"])`,
}),

// Check the current color palette selection + Change the color combination
// again. It should keep the gradient.
...checkAndUpdateBackgroundColor({
    checkCC: 4,
    checkGradient: gradients[1],
    checkNoGradient: gradients[0],
    changeType: 'cc',
    change: 1,
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc1:not(.o_cc4)[style*="background-image: ${gradients[1]}"]`,
}),

// Final check of the color status in the color palette
...checkAndUpdateBackgroundColor({
    checkCC: 1,
    checkNoCC: 4,
    checkGradient: gradients[1],
}),

// Now, add an image on top of that color combination + gradient
{
    // Close the palette before selecting a media.
    trigger: '.snippet-option-ColoredLevelBackground we-title',
    content: 'Close palette',
},
wTourUtils.changeOption('ColoredLevelBackground', '[data-name="bg_image_toggle_opt"]'),
{
    trigger: '.o_existing_attachment_cell img',
    content: "Select an image in the media dialog",
},
{
    trigger: `iframe .${snippets[0].id}.o_cc.o_cc1`,
    run: function () {
        const parts = weUtils.backgroundImageCssToParts(this.$anchor.css('background-image'));
        if (!parts.url || !parts.url.startsWith('url(')) {
            console.error('An image should have been added as background.');
        }
        if (parts.gradient !== gradients[1]) {
            console.error('The gradient should have been kept when adding the background image');
        }
    },
},

// Replace the gradient while there is a background-image
...checkAndUpdateBackgroundColor({
    checkCC: 1,
    checkGradient: gradients[1],
    changeType: 'gradient',
    change: gradients[0],
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc1:not([style*="${gradients[1]}"])`,
    finalRun: function () {
        const parts = weUtils.backgroundImageCssToParts(this.$anchor.css('background-image'));
        if (!parts.url || !parts.url.startsWith('url(')) {
            console.error('The image should have been kept when changing the gradient');
        }
        if (parts.gradient !== gradients[0]) {
            console.error('The gradient should have been changed');
        }
    },
}),

// Customize gradient
wTourUtils.changeBackgroundColor(),
switchTo('gradient'),
// Avoid navigating across tabs to maintain current editor state
// Step colors
...updateAndCheckCustomGradient({
    updateStep: {
        trigger: '.colorpicker .o_custom_gradient_scale',
        content: 'Add step',
        run: 'click',
    },
    checkGradient: 'linear-gradient(135deg, rgb(203, 94, 238) 0%, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%)',
}),
...updateAndCheckCustomGradient({
    updateStep: {
        trigger: '.colorpicker .o_slider_multi input.active',
        content: 'Move step',
        run: () => {
            const slider = $('.colorpicker .o_slider_multi input.active');
            slider.val(45);
            slider.trigger('click');
        },
    },
    checkGradient: 'linear-gradient(135deg, rgb(203, 94, 238) 0%, rgb(203, 94, 238) 45%, rgb(75, 225, 236) 100%)',
}),
...updateAndCheckCustomGradient({
    updateStep: {
        trigger: '.colorpicker .o_color_picker_inputs .o_hex_div input',
        content: 'Pick step color',
        run: 'text #FF0000',
    },
    checkGradient: 'linear-gradient(135deg, rgb(203, 94, 238) 0%, rgb(255, 0, 0) 45%, rgb(75, 225, 236) 100%)',
}),
...updateAndCheckCustomGradient({
    updateStep: {
        trigger: '.colorpicker .o_remove_color',
        content: 'Delete step',
        run: 'click',
    },
    checkGradient: 'linear-gradient(135deg, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%)',
}),
// Linear
...updateAndCheckCustomGradient({
    updateStep: {
        trigger: '.colorpicker input[data-name="angle"]',
        content: 'Change angle',
        run: 'text_blur 50',
    },
    checkGradient: 'linear-gradient(50deg, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%)',
}),
// Radial
...updateAndCheckCustomGradient({
    updateStep: {
        trigger: '.colorpicker we-button[data-gradient-type="radial-gradient"]',
        content: 'Switch to Radial',
        run: 'click',
    },
    checkGradient: 'radial-gradient(circle farthest-side at 25% 25%, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%)',
}),
...updateAndCheckCustomGradient({
    updateStep: {
        trigger: '.colorpicker input[data-name="positionX"]',
        content: 'Change X position',
        run: 'text_blur 33',
    },
    checkGradient: 'radial-gradient(circle farthest-side at 33% 25%, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%)',
}),
...updateAndCheckCustomGradient({
    updateStep: {
        trigger: '.colorpicker input[data-name="positionY"]',
        content: 'Change Y position',
        run: 'text_blur 75',
    },
    checkGradient: 'radial-gradient(circle farthest-side at 33% 75%, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%)',
}),
...updateAndCheckCustomGradient({
    updateStep: {
        trigger: '.colorpicker we-button[data-gradient-size="closest-side"]',
        content: 'Change color spread size',
        run: 'click',
    },
    checkGradient: 'radial-gradient(circle closest-side at 33% 75%, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%)',
}),
// Revert to predefined gradient
{
    trigger: `.o_we_color_btn[data-color="${gradients[0]}"]`,
    content: `Revert to predefiend gradient ${gradients[0]}`,
    run: 'click',
},

// Replace the gradient by a bg color
...checkAndUpdateBackgroundColor({
    checkCC: 1,
    checkGradient: gradients[0],
    checkNoGradient: gradients[1],
    changeType: 'bg',
    change: 'black-75',
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc1.bg-black-75[style^="background-image: url("]:not([style*="${gradients[0]}"])`
}),

// Re-add a gradient
...checkAndUpdateBackgroundColor({
    checkCC: 1,
    checkBg: 'black-75',
    checkNoGradient: gradients[0],
    changeType: 'gradient',
    change: gradients[1],
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc1:not(.bg-black-75)`,
    finalRun: function () {
        const parts = weUtils.backgroundImageCssToParts(this.$anchor.css('background-image'));
        if (!parts.url || !parts.url.startsWith('url(')) {
            console.error('The image should have been kept when re-adding the gradient');
        }
        if (parts.gradient !== gradients[1]) {
            console.error('The gradient should have been re-added');
        }
    },
}),

// Final check of color selection and removing the image
...checkAndUpdateBackgroundColor({
    checkCC: 1,
    checkNoBg: 'black-75',
    checkGradient: gradients[1],
}),
wTourUtils.changeOption('ColoredLevelBackground', '[data-name="bg_image_toggle_opt"]', 'image toggle', 'top', true),
{
    trigger: `iframe .${snippets[0].id}.o_cc.o_cc1[style*="background-image: ${gradients[1]}"]`,
    run: () => null,
},

// Now removing all colors via the 'None' button (note: colorpicker still opened)
{
    trigger: '.o_colorpicker_reset',
    content: "Click on the None button of the color palette",
},
{
    trigger: `iframe .${snippets[0].id}:not(.o_cc):not(.o_cc1):not([style*="background-image"])`,
    content: "All color classes and properties should have been removed",
    run: () => null,
}
]);

return __exports;
});
;

/***************************************************************************
*  Filepath: /website/static/tests/tours/snippet_cache_across_websites.js  *
*  Lines: 47                                                               *
***************************************************************************/
odoo.define('@website/../tests/tours/snippet_cache_across_websites', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('snippet_cache_across_websites', {
    edition: true,
    test: true,
    url: '/@/'
}, [
    {
        content: "Check that the custom snippet is displayed",
        trigger: '#snippet_custom_body span:contains("custom_snippet_test")',
        run: () => null,
    },
    // There's no need to save, but canceling might or might not show a popup...
    ...wTourUtils.clickOnSave(),
    {
        content: "Click on the website switch to switch to website 2",
        trigger: '.o_website_switcher_container button',
    },
    {
        content: "Switch to website 2",
        // Ensure data-website-id exists
        extra_trigger: 'iframe html[data-website-id="1"]',
        trigger: '.o_website_switcher_container .dropdown-item:contains("My Website 2")'
    },
    {
        content: "Wait for the iframe to be loaded",
        // The page reload generates assets for website 2, it may take some time
        timeout: 20000,
        trigger: 'iframe html:not([data-website-id="1"])',
        run: () => null,
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "Check that the custom snippet is not here",
        extra_trigger: '#oe_snippets:not(:has(#snippet_custom_body span:contains("custom_snippet_test")))',
        trigger: '#oe_snippets:has(#snippet_custom.d-none)',
        run: () => null,
    },
]);

return __exports;
});
;

/***************************************************************
*  Filepath: /website/static/tests/tours/snippet_countdown.js  *
*  Lines: 62                                                   *
***************************************************************/
odoo.define('@website/../tests/tours/snippet_countdown', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('snippet_countdown', {
    test: true,
    url: '/',
    edition: true,
}, [
    wTourUtils.dragNDrop({id: 's_countdown', name: 'Countdown'}),
    wTourUtils.clickOnSnippet({id: 's_countdown', name: 'Countdown'}),
    wTourUtils.changeOption('countdown', 'we-select:has([data-end-action]) we-toggler', 'end action'),
    wTourUtils.changeOption('countdown', 'we-button[data-end-action="message"]', 'end action'),
    wTourUtils.changeOption('countdown', 'we-button.toggle-edit-message', 'message preview'),
    // The next two steps check that the end message does not disappear when a
    // widgets_start_request is triggered.
    {
        content: "Hover an option which has a preview",
        trigger: '[data-select-class="o_half_screen_height"]',
        run: function (actions) {
            this.$anchor.trigger('mouseover');
            this.$anchor.trigger('mouseenter');
        },
    },
    {
        content: "Check that the countdown message is still displayed",
        trigger: 'iframe .s_countdown .s_picture',
        run: () => {
            // Just a visibility check

            // Also make sure the mouseout and mouseleave are triggered so that
            // next steps make sense.
            // TODO the next steps are not actually testing anything without
            // it and the mouseout and mouseleave make sense but really it
            // should not be *necessary* to simulate those for the editor flow
            // to make some sense.
            const $previousAnchor = $('[data-select-class="o_half_screen_height"]');
            $previousAnchor.trigger('mouseout');
            $previousAnchor.trigger('mouseleave');
        },
    },
    // Next, we change the end action to message and no countdown while the edit
    // message toggle is still activated. It should hide the countdown
    wTourUtils.changeOption('countdown', 'we-select:has([data-end-action]) we-toggler', 'end action'),
    wTourUtils.changeOption('countdown', 'we-button[data-end-action="message_no_countdown"]', 'end action'),
    {
        content: "Check that the countdown is not displayed",
        trigger: 'iframe .s_countdown:has(.s_countdown_canvas_wrapper:not(:visible))',
        run: () => null, // Just a visibility check
    },
    {
        content: "Check that the message is still displayed",
        trigger: 'iframe .s_countdown .s_picture',
        run: () => null, // Just a visibility check
    },
]);

return __exports;
});
;

/**************************************************************************
*  Filepath: /website/static/tests/tours/snippet_editor_panel_options.js  *
*  Lines: 194                                                             *
**************************************************************************/
odoo.define('@website/../tests/tours/snippet_editor_panel_options', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('snippet_editor_panel_options', {
    test: true,
    url: '/',
    edition: true,
}, [
wTourUtils.dragNDrop({
    id: 's_text_image',
    name: 'Text - Image',
}),
// Test keeping the text selection when using the width option.
{
    content: "Click on the first paragraph.",
    trigger: 'iframe .s_text_image p',
}, {
    content: "The text toolbar should be visible. The paragraph should be selected.",
    trigger: '#oe_snippets .o_we_customize_panel > #o_we_editor_toolbar_container',
    run() {
        const iframeDocument = document.querySelector('.o_iframe').contentDocument;
        const pText = iframeDocument.querySelector('.s_text_image p').textContent;
        const selection = iframeDocument.getSelection().toString();
        if (pText !== selection) {
            console.error("The paragraph was not correctly selected.");
        }
    },
}, {
    content: "Click on the width option.",
    trigger: '[data-select-class="o_container_small"]',
}, {
    content: "The snippet should have the correct class.",
    trigger: 'iframe .s_text_image > .o_container_small',
    run: () => {}, // It's a check.
}, {
    content: "The text toolbar should still be visible, and the text still selected.",
    trigger: '#oe_snippets .o_we_customize_panel > #o_we_editor_toolbar_container',
    run() {
        const iframeDocument = document.querySelector('.o_iframe').contentDocument;
        const pText = iframeDocument.querySelector('.s_text_image p').textContent;
        const selection = iframeDocument.getSelection().toString();
        if (pText !== selection) {
            console.error("The paragraph text selection was lost.");
        }
    },
},
// Test the anchor option.
{
    content: "Click on the anchor option",
    trigger: '#oe_snippets .snippet-option-anchor we-button',
    run() {
        // The clipboard cannot be accessed from a script.
        // https://w3c.github.io/editing/docs/execCommand/#dfn-the-copy-command
        // The execCommand is patched for that step so that ClipboardJS still
        // sends the 'success' event.
        const oldExecCommand = document.execCommand;
        document.execCommand = () => true;
        this.$anchor[0].click();
        document.execCommand = oldExecCommand;
    }
}, {
    content: "Check the copied url from the notification toast",
    trigger: '.o_notification_manager .o_notification_content',
    run() {
        const { textContent } = this.$anchor[0];
        const url = textContent.substring(textContent.indexOf('/'));

        // The url should not target the client action
        if (url.startsWith('/@')) {
            console.error('The anchor option should target the frontend');
        }

        const iframeDocument = document.querySelector('.o_iframe').contentDocument;
        const snippetId = iframeDocument.querySelector('.s_text_image').id;
        if (!url || url.indexOf(snippetId) < 0) {
            console.error('The anchor option does not target the correct snippet.');
        }
    },
},
// Test keeping the text selection when adding columns to a snippet with none.
wTourUtils.goBackToBlocks(),
wTourUtils.dragNDrop({
    id: 's_text_block',
    name: 'Text',
}),
{
    content: "Click on the first paragraph.",
    trigger: 'iframe .s_text_block p',
}, {
    content: "The text toolbar should be visible. The paragraph should be selected.",
    trigger: '#oe_snippets .o_we_customize_panel > #o_we_editor_toolbar_container',
    run() {
        const iframeDocument = document.querySelector('.o_iframe').contentDocument;
        const pText = iframeDocument.querySelector('.s_text_block p').textContent;
        const selection = iframeDocument.getSelection().toString();
        if (pText !== selection) {
            console.error("The paragraph was not correctly selected.");
        }
    },
}, {
    content: "Click on the columns option.",
    trigger: '.snippet-option-layout_column we-select',
},
{
    content: "Change the number of columns.",
    trigger: '.snippet-option-layout_column [data-select-count="3"]',
}, {
    content: "The snippet should have the correct number of columns.",
    trigger: 'iframe .s_text_block .container > .row',
    run() {
        if (this.$anchor[0].childElementCount !== 3) {
            console.error("The snippet does not have the correct number of columns");
        }
    },
}, {
    content: "The text toolbar should still be visible, and the text still selected.",
    trigger: '#oe_snippets .o_we_customize_panel > #o_we_editor_toolbar_container',
    run() {
        const iframeDocument = document.querySelector('.o_iframe').contentDocument;
        const pText = iframeDocument.querySelector('.s_text_block p').textContent;
        const selection = iframeDocument.getSelection().toString();
        if (pText !== selection) {
            console.error("The paragraph text selection was lost.");
        }
    },
},
// Test keeping the text selection when removing all columns of a snippet.
{
    content: "Click on the columns option.",
    trigger: '.snippet-option-layout_column we-select',
},
{
    content: "Change the number of columns.",
    trigger: '.snippet-option-layout_column [data-select-count="0"]',
}, {
    content: "The snippet should have the correct number of columns.",
    trigger: 'iframe .s_text_block .container:not(:has(.row))',
}, {
    content: "The text toolbar should still be visible, and the text still selected.",
    trigger: '#oe_snippets .o_we_customize_panel > #o_we_editor_toolbar_container',
    run() {
        const iframeDocument = document.querySelector('.o_iframe').contentDocument;
        const pText = iframeDocument.querySelector('.s_text_block p').textContent;
        const selection = iframeDocument.getSelection().toString();
        if (pText !== selection) {
            console.error("The paragraph text selection was lost.");
        }
    },
},
// Test keeping the text selection when toggling the grid mode.
wTourUtils.changeOption("layout_column", 'we-button[data-name="grid_mode"]'),
{
    content: "The snippet row should have the grid mode class.",
    trigger: "iframe .s_text_block .row.o_grid_mode",
    run: () => {}, // It's a check.
}, {
    content: "The text toolbar should still be visible, and the text still selected.",
    trigger: "#oe_snippets .o_we_customize_panel > #o_we_editor_toolbar_container",
    run() {
        const iframeDocument = document.querySelector(".o_iframe").contentDocument;
        const pText = iframeDocument.querySelector(".s_text_block p").textContent;
        const selection = iframeDocument.getSelection().toString();
        if (pText !== selection) {
            console.error("The paragraph text selection was lost.");
        }
    },
},
// Test keeping the text selection when toggling back the normal mode.
wTourUtils.changeOption("layout_column", 'we-button[data-name="normal_mode"]'),
{
    content: "The snippet row should not have the grid mode class anymore.",
    trigger: "iframe .s_text_block .row:not(.o_grid_mode)",
    run: () => {}, // It's a check.
}, {
    content: "The text toolbar should still be visible, and the text still selected.",
    trigger: "#oe_snippets .o_we_customize_panel > #o_we_editor_toolbar_container",
    run() {
        const iframeDocument = document.querySelector(".o_iframe").contentDocument;
        const pText = iframeDocument.querySelector(".s_text_block p").textContent;
        const selection = iframeDocument.getSelection().toString();
        if (pText !== selection) {
            console.error("The paragraph text selection was lost.");
        }
    },
},
...wTourUtils.clickOnSave(),
]);

return __exports;
});
;

/*****************************************************************************
*  Filepath: /website/static/tests/tours/snippet_empty_parent_autoremove.js  *
*  Lines: 73                                                                 *
*****************************************************************************/
odoo.define('@website/../tests/tours/snippet_empty_parent_autoremove', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require("website.tour_utils");

function removeSelectedBlock() {
    return {
        content: "Remove selected block",
        trigger: '#oe_snippets we-customizeblock-options:nth-last-child(3) .oe_snippet_remove',
    };
}

wTourUtils.registerWebsitePreviewTour('snippet_empty_parent_autoremove', {
    test: true,
    url: '/',
    edition: true,
}, [
    // Base case: remove both columns from text - image
    wTourUtils.dragNDrop({
        id: 's_text_image',
        name: 'Text - Image',
    }),
    {
        content: "Click on second column",
        trigger: 'iframe #wrap .s_text_image .row > :nth-child(2)',
    },
    removeSelectedBlock(),
    {
        content: "Click on first column",
        trigger: 'iframe #wrap .s_text_image .row > :first-child',
    },
    removeSelectedBlock(),
    {
        content: "Check that #wrap is empty",
        trigger: 'iframe #wrap:empty',
    },

    // Banner: test that parallax, bg-filter and shape are not treated as content
    wTourUtils.dragNDrop({
        id: 's_banner',
        name: 'Banner',
    }),
    wTourUtils.clickOnSnippet({
        id: 's_banner',
        name: 'Banner',
    }),
    {
        content: "Check that parallax is present",
        trigger: 'iframe #wrap .s_banner .s_parallax_bg',
        run: () => null,
    },
    wTourUtils.changeOption('ColoredLevelBackground', 'Shape'),
    {
        content: "Check that shape is present",
        trigger: 'iframe #wrap .s_banner .o_we_shape',
        run: () => null,
    },
    {
        content: "Click on first column",
        trigger: 'iframe #wrap .s_banner .row > :first-child',
    },
    removeSelectedBlock(),
    {
        content: "Check that #wrap is empty",
        trigger: 'iframe #wrap:empty',
        run: () => null,
    },
]);

return __exports;
});
;

/*******************************************************************
*  Filepath: /website/static/tests/tours/snippet_image_gallery.js  *
*  Lines: 69                                                       *
*******************************************************************/
odoo.define('@website/../tests/tours/snippet_image_gallery', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('snippet_image_gallery', {
    test: true,
    url: '/',
    edition: true,
}, [
    wTourUtils.dragNDrop({id: 's_image_gallery', name: 'Images Wall'}),
    ...wTourUtils.clickOnSave(),
    {
        content: 'Click on an image of the Image Wall',
        trigger: 'iframe .s_image_gallery img',
        run: 'click',
    },
    {
        content: 'Check that the modal has opened properly',
        trigger: 'iframe .s_gallery_lightbox img',
        run: () => {}, // This is a check.
    },
]);

wTourUtils.registerWebsitePreviewTour("snippet_image_gallery_remove", {
    test: true,
    url: "/",
    edition: true,
}, [
    wTourUtils.dragNDrop({
        id: "s_image_gallery",
        name: "Image Gallery",
}), wTourUtils.clickOnSnippet({
    id: 's_image_gallery',
    name: 'Image Gallery',
}), {
    content: "Click on Remove all",
    trigger: "we-button:has(div:contains('Remove all'))",
}, {
    content: "Click on Add Images",
    trigger: "iframe span:contains('Add Images')",
}, {
    content: "Click on the first new image",
    trigger: ".o_select_media_dialog img[title='s_default_image.jpg']",
}, {
    content: "Click on the second new image",
    trigger: ".o_select_media_dialog img[title='s_default_image2.jpg']",
},
    wTourUtils.addMedia(),
   {
    content: "Click on the image of the Image Gallery snippet",
    trigger: "iframe .s_image_gallery .carousel-item.active  img",
}, {
    content: "Check that the Snippet Editor of the clicked image has been loaded",
    trigger: "we-customizeblock-options span:contains('Image'):not(:contains('Image Gallery'))",
    run: () => null,
}, {
    content: "Click on Remove Block",
    trigger: ".o_we_customize_panel we-title:has(span:contains('Image Gallery')) we-button[title='Remove Block']",
}, {
    content: "Check that the Image Gallery snippet has been removed",
    trigger: "iframe #wrap:not(:has(.s_image_gallery))",
    run: () => null,
}]);

return __exports;
});
;

/*******************************************************************
*  Filepath: /website/static/tests/tours/snippet_image_quality.js  *
*  Lines: 61                                                       *
*******************************************************************/
odoo.define('@website/../tests/tours/snippet_image_quality', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('website_image_quality', {
    test: true,
    url: '/',
    edition: true,
}, [
    wTourUtils.dragNDrop({
        id: 's_text_image',
        name: 'Text - Image',
    }),
    {
        content: "Select image",
        trigger: 'iframe .s_text_image img',
    },
    {
        content: "Set low quality",
        trigger: 'we-customizeblock-options:has(we-title:contains("Image")) we-range[data-set-quality] input',
        run: 'range 5',
    },
    {
        content: "Wait for image update: NOT original image",
        trigger: 'iframe .s_text_image img:not([src$="s_text_image_default_image"])',
        run: () => {}, // It is a check.
    },
    {
        content: "Check image size",
        // Reached size cannot be hardcoded because it changes with
        // different versions of Chrome.
        trigger: 'we-customizeblock-options:has(we-title:contains("Image")) .o_we_image_weight:contains(" kb"):not(:contains("16.1 kb"))',
        run() {
            // Make sure the reached size is smaller than the original one.
            if (parseFloat(this.$anchor[0].innerText) >= 47.5) {
                console.error("Image size should be smaller than original");
            }
        },
    },
    {
        content: "Set high quality",
        trigger: 'we-customizeblock-options:has(we-title:contains("Image")) we-range[data-set-quality] input',
        run: 'range 99',
    },
    {
        content: "Wait for image update: back to original image",
        trigger: 'iframe .s_text_image img[src$="QUntVvdqEdljipEUu7ez5lb6IqyGKzQmRxVnZX/2Q=="]',
        run: () => {}, // It is a check.
    },
    {
        content: "Check image size",
        trigger: 'we-customizeblock-options:has(we-title:contains("Image")) .o_we_image_weight:contains("47.5 kb")',
        run: () => {}, // It is a check.
    },
]);

return __exports;
});
;

/*****************************************************************
*  Filepath: /website/static/tests/tours/snippet_images_wall.js  *
*  Lines: 79                                                     *
*****************************************************************/
odoo.define('@website/../tests/tours/snippet_images_wall', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require("website.tour_utils");

const selectSignImageStep = {
    content: "Click on sign image",
    extra_trigger: ".o_we_customize_panel:not(:has(.snippet-option-GalleryElement))",
    trigger: "iframe .s_image_gallery img[data-original-src*='sign']",
};
// Without reselecting the image, the tour manages to click on the
// move button before the active image is updated.
const reselectSignImageSteps = [{
    content: "Select footer",
    trigger: "iframe footer",
}, selectSignImageStep];

wTourUtils.registerWebsitePreviewTour("snippet_images_wall", {
    test: true,
    url: "/",
    edition: true,
}, [
    wTourUtils.dragNDrop({
        id: "s_images_wall",
        name: "Images Wall",
}), wTourUtils.clickOnSnippet({
    id: "s_image_gallery",
    name: "Images Wall",
}),
selectSignImageStep,
{
    content: "Click on move to previous",
    trigger: ".snippet-option-GalleryElement we-button[data-position='prev']",
}, {
    content: "Check if sign is in second column",
    trigger: "iframe .s_image_gallery .o_masonry_col:nth-child(2):has(img[data-index='1'][data-original-src*='sign'])",
    isCheck: true,
},
...reselectSignImageSteps,
{
    content: "Click on move to first",
    trigger: ".snippet-option-GalleryElement we-button[data-position='first']",
}, {
    content: "Check if sign is in first column",
    trigger: "iframe .s_image_gallery .o_masonry_col:nth-child(1):has(img[data-index='0'][data-original-src*='sign'])",
    isCheck: true,
},
...reselectSignImageSteps,
{
    content: "Click on move to previous",
    trigger: ".snippet-option-GalleryElement we-button[data-position='prev']",
}, {
    content: "Check if sign is in third column",
    trigger: "iframe .s_image_gallery .o_masonry_col:nth-child(3):has(img[data-index='5'][data-original-src*='sign'])",
    isCheck: true,
},
...reselectSignImageSteps,
{
    content: "Click on move to next",
    trigger: ".snippet-option-GalleryElement we-button[data-position='next']",
}, {
    content: "Check if sign is in first column",
    trigger: "iframe .s_image_gallery .o_masonry_col:nth-child(1):has(img[data-index='0'][data-original-src*='sign'])",
    isCheck: true,
},
...reselectSignImageSteps,
{
    content: "Click on move to last",
    trigger: ".snippet-option-GalleryElement we-button[data-position='last']",
}, {
    content: "Check layout",
    trigger: "iframe .s_image_gallery .o_masonry_col:nth-child(3):has(img[data-index='5'][data-original-src*='sign'])",
    isCheck: true,
}]);

return __exports;
});
;

/**********************************************************************
*  Filepath: /website/static/tests/tours/snippet_popup_add_remove.js  *
*  Lines: 61                                                          *
**********************************************************************/
odoo.define('@website/../tests/tours/snippet_popup_add_remove', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('snippet_popup_add_remove', {
    test: true,
    url: '/',
    edition: true,
}, [{
    content: 'Drop s_popup snippet',
    trigger: '.oe_snippet:has( > [data-snippet="s_popup"]) .oe_snippet_thumbnail',
    run: "drag_and_drop iframe #wrap",
}, {
    content: 'Edit s_popup snippet',
    in_modal: false,
    trigger: 'iframe #wrap.o_editable [data-snippet="s_popup"] .row > div', // Click deep in the snippet structure
}, {
    content: 'Check s_popup setting are loaded, wait panel is visible',
    in_modal: false,
    trigger: '.o_we_customize_panel',
    run: () => null,
}, {
    content: `Remove the s_popup snippet`,
    in_modal: false,
    trigger: '.o_we_customize_panel we-customizeblock-options:contains("Popup") we-button.oe_snippet_remove:first',
}, {
    content: 'Check the s_popup was removed',
    in_modal: false,
    trigger: 'iframe #wrap.o_editable:not(:has([data-snippet="s_popup"]))',
    run: () => null,
},
// Test that undoing dropping the snippet removes the invisible elements panel.
{
    content: "Drop the snippet again.",
    trigger: '#oe_snippets .oe_snippet:has(> [data-snippet="s_popup"]) .oe_snippet_thumbnail',
    run: "drag_and_drop iframe #wrap",
}, {
    content: "The popup should be in the invisible elements panel.",
    in_modal: false,
    trigger: '.o_we_invisible_el_panel .o_we_invisible_entry',
    run: () => null, // It's a check.
}, {
    content: "Click on the 'undo' button.",
    in_modal: false,
    trigger: '#oe_snippets button[data-action="undo"]',
}, {
    content: "Check that the s_popup was removed.",
    in_modal: false,
    trigger: 'iframe #wrap.o_editable:not(:has([data-snippet="s_popup"]))',
    run: () => null, // It's a check.
}, {
    content: "The invisible elements panel should also be removed.",
    trigger: '#oe_snippets:has(.o_we_invisible_el_panel.d-none)',
    run: () => null, // It's a check.
}]);

return __exports;
});
;

/**************************************************************************
*  Filepath: /website/static/tests/tours/snippet_popup_and_animations.js  *
*  Lines: 124                                                             *
**************************************************************************/
odoo.define('@website/../tests/tours/snippet_popup_and_animations', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require("website.tour_utils");

const snippets = [
    {
        id: "s_popup",
        name: "Popup",
    },
    {
        id: "s_media_list",
        name: "Media List",
    },
    {
        id: "s_three_columns",
        name: "Columns",
    },
];

const setOnScrollAnim = function () {
    return [
        wTourUtils.changeOption("WebsiteAnimate", 'we-select[data-is-animation-type-selection="true"] we-toggler'),
        wTourUtils.changeOption("WebsiteAnimate", 'we-button[data-animation-mode="onScroll"]'),
        wTourUtils.changeOption("WebsiteAnimate", 'we-select[data-name="animation_effect_opt"] we-toggler'),
        wTourUtils.changeOption("WebsiteAnimate", 'we-button[data-name="o_anim_slide_in_opt"]'),
    ];
};

wTourUtils.registerWebsitePreviewTour("snippet_popup_and_animations", {
    test: true,
    url: "/",
    edition: true,
}, [
    wTourUtils.dragNDrop(snippets[1]), // Media List
    wTourUtils.dragNDrop(snippets[1]), // Media List
    wTourUtils.dragNDrop(snippets[2]), // Columns
    wTourUtils.clickOnElement("3rd columns", "iframe .s_three_columns .row > :last-child"),
    ...setOnScrollAnim(),
    {
        content: "Open the Cookies Bar.",
        trigger: ".o_we_invisible_el_panel .o_we_invisible_entry",
    },
    {
        content: "Scroll to top",
        trigger: "iframe #wrapwrap",
        extra_trigger: "iframe #website_cookies_bar:not(.d-none)",
        run: function () {
            const animatedColumnEl = this.$anchor[0].querySelector(".s_three_columns .row > :last-child");
            // When the animated element is fully visible, its animation delay
            // should be rounded to -1 in the following condition.
            if (Math.round(parseFloat(animatedColumnEl.style.animationDelay)) !== -1) {
                console.error("The scroll animation in the page did not start properly with the cookies bar open.");
            }
            this.$anchor[0].scrollTo({
                top: 0,
                left: 0,
                behavior: 'smooth'
            });
        },
    },
    {
        content: "Wait for the page to be scrolled to the top.",
        trigger: "iframe .s_three_columns .row > :last-child:not(.o_animating)",
        extra_trigger: "iframe header#top:not(.o_header_affixed)",
        run: function () {
            // If the column has been animated successfully, the animation delay
            // should be set to approximately zero when it is not visible.
            // The main goal of the following condition is to verify if the
            // animation delay is being updated as expected.
            if (Math.round(parseFloat(this.$anchor[0].style.animationDelay)) !== 0) {
                console.error("The scroll animation in the page did not end properly with the cookies bar open.");
            }
        },
    },
    {
        content: "Close the Cookies Bar.",
        trigger: ".o_we_invisible_el_panel .o_we_invisible_entry",
        run: "click",
    },
    wTourUtils.dragNDrop(snippets[0]), // Popup
    wTourUtils.dragNDrop(snippets[1]), // Media List
    {
        content: "Drag the Columns building block and drop it at the bottom of the popup.",
        trigger: '#oe_snippets .oe_snippet[name="Columns"] .oe_snippet_thumbnail:not(.o_we_already_dragging)',
        extra_trigger: ".o_website_preview.editor_enable.editor_has_snippets",
        run: "drag_and_drop iframe #wrapwrap .modal-content .s_media_list .container > .row > :last-child",
    },
    wTourUtils.clickOnElement("3rd columns", "iframe .s_popup .s_three_columns .row > :last-child"),
    ...setOnScrollAnim(),
    {
        content: "Verify the animation delay of the animated element in the popup at the beginning",
        trigger: "iframe .s_popup .modal",
        run: function () {
            const animatedColumnEl = this.$anchor[0].querySelector(".s_three_columns .row > :last-child");
            // When the animated element is fully visible, its animation delay
            // should be rounded to -1 in the following condition.
            if (Math.round(parseFloat(animatedColumnEl.style.animationDelay)) !== -1) {
                console.error("The scroll animation in the modal did not start properly.");
            }
            this.$anchor[0].closest(".modal").scrollTo({
                top: 0,
                left: 0,
                behavior: 'smooth'
            });
        },
    },
    {
        content: "Wait until the column is no longer animated/visible.",
        trigger: "iframe .s_popup .s_three_columns .row > :last-child:not(.o_animating)",
        run: function () {
            // If the column has been animated successfully, the animation delay
            // should be set to approximately zero when it is not visible.
            if (Math.round(parseFloat(this.$anchor[0].style.animationDelay)) !== 0) {
                console.error("The scroll animation in the modal did not end properly.");
            }
        },
    },
]);

return __exports;
});
;

/*************************************************************************
*  Filepath: /website/static/tests/tours/snippet_popup_and_scrollbar.js  *
*  Lines: 139                                                            *
*************************************************************************/
odoo.define('@website/../tests/tours/snippet_popup_and_scrollbar', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require("website.tour_utils");

const snippets = [
    {
        id: "s_popup",
        name: "Popup",
    },
    {
        id: "s_media_list",
        name: "Media List",
    },
];

const checkScrollbar = function (hasScrollbar) {
    return {
        content: `Check that the #wrapwrap ${hasScrollbar ? "has" : "does not have"} a vertical scrollbar.`,
        trigger: `iframe ${hasScrollbar ? "body:not(.modal-open)" : "body.modal-open"}`,
        run: function () {
            const wrapwrapEl = this.$anchor[0].querySelector("#wrapwrap");
            const wrapwrapStyle = window.getComputedStyle(wrapwrapEl);
            if (!hasScrollbar && (wrapwrapStyle.overflow !== "hidden" || parseFloat(wrapwrapStyle.paddingRight) < 1)) {
                console.error("error The #wrapwrap vertical scrollbar should be hidden");
            } else if (hasScrollbar && (wrapwrapStyle.overflow === "hidden" || parseFloat(wrapwrapStyle.paddingRight) > 0)) {
                console.error("error The #wrapwrap vertical scrollbar should be displayed");
            }
        },
    };
};

const toggleBackdrop = function () {
    return wTourUtils.changeOption('SnippetPopup', 'we-button[data-name="popup_backdrop_opt"] we-checkbox', 'backdrop');
};

wTourUtils.registerWebsitePreviewTour("snippet_popup_and_scrollbar", {
    test: true,
    url: "/",
    edition: true,
}, [
    wTourUtils.dragNDrop(snippets[1]), // Media List
    wTourUtils.dragNDrop(snippets[0]), // Popup
    checkScrollbar(false),
    {
        content: 'Click on the s_popup snippet',
        in_modal: false,
        trigger: 'iframe .s_popup .modal',
    },
    toggleBackdrop(), // hide Popup backdrop
    checkScrollbar(true),
    wTourUtils.goBackToBlocks(),
    {
        content: "Drag the Media List block and drop it in the popup.",
        trigger: "#oe_snippets .oe_snippet:has(> [data-snippet='s_media_list']) .oe_snippet_thumbnail",
        run: "drag_and_drop iframe #wrap .s_popup .modal-content.oe_structure",
    },
    checkScrollbar(false),
    {
        content: "Select the Media List snippet in the Popup.",
        trigger: "iframe #wrap .s_popup .modal-content .s_media_list",
    },
    {
        content: "Remove the Media List snippet in the Popup.",
        trigger: "iframe .oe_overlay.oe_active .oe_snippet_remove",
    },
    checkScrollbar(true),
    toggleBackdrop(), // show Popup backdrop
    checkScrollbar(false),
    {
        content: "Close the Popup.",
        trigger: ".o_we_invisible_el_panel .o_we_invisible_entry",
    },
    checkScrollbar(true),
    {
        content: "Open the Cookies Bar.",
        trigger: ".o_we_invisible_el_panel .o_we_invisible_entry:last-child",
    },
    checkScrollbar(true),
    toggleBackdrop(), // show Cookies Bar backdrop
    checkScrollbar(false),
    toggleBackdrop(), // hide Cookies Bar backdrop
    checkScrollbar(true),
    {
        content: "Open the Popup.",
        trigger: ".o_we_invisible_el_panel .o_we_invisible_entry",
    },
    checkScrollbar(false),
    wTourUtils.goBackToBlocks(),
    {
        content: "Drag the Media List block and drop it in the popup.",
        trigger: "#oe_snippets .oe_snippet:has(> [data-snippet='s_media_list']) .oe_snippet_thumbnail",
        run: "drag_and_drop iframe #wrap .s_popup .modal-content.oe_structure",
    },
    checkScrollbar(false),
    {
        content: 'Click on the s_popup snippet',
        in_modal: false,
        trigger: 'iframe .s_popup .modal',
    },
    {
        content: "Remove the s_popup snippet",
        trigger: ".o_we_customize_panel we-customizeblock-options:contains('Popup') we-button.oe_snippet_remove:first",
        in_modal: false,
        run: "click",
    },
    checkScrollbar(true),
    wTourUtils.goBackToBlocks(),
    {
        content: "Drag a Media List snippet and drop it in the Cookies Bar.",
        trigger: "#oe_snippets .oe_snippet:has(> [data-snippet='s_media_list']) .oe_snippet_thumbnail",
        run: "drag_and_drop iframe #website_cookies_bar .modal-content.oe_structure",
    },
    {
        content: "Select the Media List snippet in the Cookies Bar.",
        trigger: "iframe #website_cookies_bar .modal-content .s_media_list",
    },
    {
        content: "Duplicate the Media List snippet",
        trigger: ".o_we_customize_panel we-customizeblock-options:contains('Media List') we-button.oe_snippet_clone:first",
        in_modal: false,
        run: "click",
    },
    checkScrollbar(false),
    {
        content: "Remove the first Media List snippet in the Cookies Bar.",
        trigger: "iframe .oe_overlay.oe_active .oe_snippet_remove",
    },
    {
        content: "Remove the second Media List snippet in the Cookies Bar.",
        trigger: "iframe .oe_overlay.oe_active .oe_snippet_remove",
    },
    checkScrollbar(true),
]);

return __exports;
});
;

/****************************************************************************
*  Filepath: /website/static/tests/tours/snippet_popup_display_on_click.js  *
*  Lines: 91                                                                *
****************************************************************************/
odoo.define('@website/../tests/tours/snippet_popup_display_on_click', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require("website.tour_utils");

wTourUtils.registerWebsitePreviewTour("snippet_popup_display_on_click", {
    test: true,
    url: "/",
    edition: true,
}, [
    wTourUtils.dragNDrop({id: "s_text_image", name: "Image - Text"}),
    wTourUtils.dragNDrop({id: "s_popup", name: "Popup"}),
    {
        content: "Click inside the popup to access its options menu.",
        in_modal: false,
        trigger: "iframe .s_popup .s_banner",
    },
    wTourUtils.changeOption("SnippetPopup", 'we-select[data-attribute-name="display"] we-toggler'),
    {
        content: "Click on the display 'On Click' option",
        trigger: "#oe_snippets we-button[data-name='onclick_opt']",
        in_modal: false,
        run() {
            // The clipboard cannot be accessed from a script.
            // https://w3c.github.io/editing/docs/execCommand/#dfn-the-copy-command
            // The execCommand is patched for that step so that ClipboardJS still
            // sends the "success" event.
            const oldExecCommand = document.execCommand;
            document.execCommand = () => true;
            this.$anchor[0].click();
            document.execCommand = oldExecCommand;
        }
    },
    {
        content: "Check the copied anchor from the notification toast",
        trigger: ".o_notification_manager .o_notification_content",
        run() {
            const notificationContent = this.$anchor[0].innerText;
            const anchor = notificationContent.substring(notificationContent.indexOf("#"));

            if (anchor !== "#Win-%2420") {
                console.error("The popup anchor is not '#Win-%2420' as expected.");
            }
        },
    },
    wTourUtils.clickOnElement("button to close the popup", "iframe .s_popup_close"),
    wTourUtils.clickOnElement("text image snippet button", "iframe .s_text_image .btn-primary"),
    {
        content: "Paste the popup anchor in the URL input",
        trigger: "#o_link_dialog_url_input",
        run: "text #Win-%2420"
    },
    ...wTourUtils.clickOnSave(),
    wTourUtils.clickOnElement("text image snippet button", "iframe .s_text_image .btn-primary"),
    {
        content: "Verify that the popup opens after clicked the button.",
        in_modal: false,
        trigger: "iframe .s_popup .modal[id='Win-%2420'].show",
    },
    wTourUtils.clickOnElement("button to close the popup", "iframe .s_popup_close"),
    {
        content: "Go to the 'contactus' page.",
        trigger: "iframe a[href='/contactus']",
    },
    {
        content: "wait for the page to be loaded",
        trigger: ".o_website_preview[data-view-xmlid='website.contactus']",
        run: () => null, // it"s a check
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    wTourUtils.dragNDrop({id: "s_text_image", name: "Image - Text"}),
    wTourUtils.clickOnElement("text image snippet button", "iframe .s_text_image .btn-primary"),
    {
        content: "Add a link to the homepage popup in the URL input",
        trigger: "#o_link_dialog_url_input",
        run: "text /#Win-%2420"
    },
    ...wTourUtils.clickOnSave(),
    wTourUtils.clickOnElement("text image snippet button", "iframe .s_text_image .btn-primary"),
    {
        content: "Verify that the popup opens when the homepage page loads.",
        in_modal: false,
        extra_trigger: ".o_website_preview[data-view-xmlid='website.homepage']",
        trigger: "iframe .s_popup .modal[id='Win-%2420'].show",
    },
]);

return __exports;
});
;

/******************************************************************
*  Filepath: /website/static/tests/tours/snippet_social_media.js  *
*  Lines: 197                                                     *
******************************************************************/
odoo.define('@website/../tests/tours/snippet_social_media', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');

// TODO: Remove following steps once fix of task-3212519 is done.
// Those steps are preventing a race condition to happen in the meantime: when
// the tour was clicking on the toggle to hide facebook in the next step, it
// would actually "ignore" the result of the click on the toggle and would just
// consider the action of focusing out the input.
const socialRaceConditionClass = 'social_media_race_condition';
const preventRaceConditionStep = [{
    content: "Wait a few ms to avoid race condition",
    // Ensure the class is remove from previous call of those steps
    extra_trigger: `body:not(.${socialRaceConditionClass})`,
    trigger: 'iframe .s_social_media',
    run() {
        setTimeout(() => {
            document.body.classList.add(socialRaceConditionClass);
        }, 500);
    }
}, {
    content: "Check the race condition class is added after a few ms",
    trigger: `body.${socialRaceConditionClass}`,
    run() {
        document.body.classList.remove(socialRaceConditionClass);
    }
}];

const addNewSocialNetwork = function (optionIndex, linkIndex, url) {
    return [{
        content: "Click on Add New Social Network",
        trigger: 'we-list we-button.o_we_list_add_optional',
    },
    {
        content: "Ensure new option is found",
        trigger: `we-list table input:eq(${optionIndex})[data-list-position=${optionIndex}][data-dom-position=${linkIndex}][data-undeletable=false]`,
        run: () => {}, // This is a check.
    },
    {
        content: "Ensure new link is found",
        trigger: `iframe .s_social_media:has(a:eq(${linkIndex})[href='https://www.example.com'])`,
        run: () => {}, // This is a check.
    },
    {
        content: "Change added Option label",
        trigger: `we-list table input:eq(${optionIndex})`,
        run: `text_blur ${url}`,
    },
    {
        content: "Ensure new link is changed",
        trigger: `iframe .s_social_media:has(a:eq(${linkIndex})[href='${url}'])`,
        run: () => {}, // This is a check.
    },
    ...preventRaceConditionStep,
    ];
};

wTourUtils.registerWebsitePreviewTour('snippet_social_media', {
    test: true,
    url: '/',
    edition: true,
}, [
    wTourUtils.dragNDrop({id: 's_social_media', name: 'Social Media'}),
    wTourUtils.clickOnSnippet({id: 's_social_media', name: 'Social Media'}),
    ...addNewSocialNetwork(7, 7, 'https://www.youtu.be/y7TlnAv6cto'),
    {
        content: 'Click on the toggle to hide Facebook',
        trigger: 'we-list table we-button.o_we_user_value_widget',
        run: 'click',
    },
    {
        content: "Ensure twitter became first",
        trigger: 'iframe .s_social_media:has(a:eq(0)[href="/website/social/twitter"])',
        run: () => {}, // This is a check.
    },
    {
        content: 'Drag the facebook link at the end of the list',
        trigger: 'we-list table we-button.o_we_drag_handle',
        position: 'bottom',
        run: "drag_and_drop we-list table tr:last-child",
    },
    {
        content: 'Check drop completed',
        trigger: 'we-list table input:eq(7)[data-media="facebook"]',
        run: () => {}, // This is a check.
    },
    ...preventRaceConditionStep,
    // Create a Link for which we don't have an icon to propose.
    ...addNewSocialNetwork(8, 7, 'https://whatever.it/1EdSw9X'),
    // Create a custom instagram link.
    ...addNewSocialNetwork(9, 8, 'https://instagr.am/odoo.official/'),
    {
        content: "Check if the result is correct before removing",
        trigger: "iframe .s_social_media" +
                 ":has(a:eq(0)[href='/website/social/twitter'])" +
                 ":has(a:eq(1)[href='/website/social/linkedin'])" +
                 ":has(a:eq(2)[href='/website/social/youtube'])" +
                 ":has(a:eq(3)[href='/website/social/instagram'])" +
                 ":has(a:eq(4)[href='/website/social/github'])" +
                 ":has(a:eq(5)[href='/website/social/tiktok'])" +
                 ":has(a:eq(6)[href='https://www.youtu.be/y7TlnAv6cto']:has(i.fa-youtube))" +
                 ":has(a:eq(7)[href='https://whatever.it/1EdSw9X']:has(i.fa-pencil))" +
                 ":has(a:eq(8)[href='https://instagr.am/odoo.official/']:has(i.fa-instagram))",
        run: () => {}, // This is a check.
    },
    // Create a custom link, not officially supported, ensure icon is found.
    {
        content: 'Change custom social to unsupported link',
        trigger: 'we-list table input:eq(6)',
        run: 'text_blur https://www.paypal.com/abc',
    },
    {
        content: "Ensure paypal icon is found",
        trigger: "iframe .s_social_media" +
                 ":has(a:eq(6)[href='https://www.paypal.com/abc']:has(i.fa-paypal))",
        run: () => {}, // This is a check.
    },
    ...preventRaceConditionStep,
    {
        content: 'Delete the custom link',
        trigger: 'we-list we-button.o_we_select_remove_option',
        run: 'click',
    },
    {
        content: "Ensure custom link was removed",
        trigger: 'iframe .s_social_media:has(a:eq(6)[href="https://whatever.it/1EdSw9X"]:has(i.fa-pencil))',
        run: () => {}, // This is a check.
    },
    {
        content: 'Click on the toggle to show Facebook',
        trigger: 'we-list table we-button.o_we_user_value_widget:not(.active)',
        run: 'click',
    },
    {
        content: "Check if the result is correct after removing",
        trigger: "iframe .s_social_media" +
                 ":has(a:eq(0)[href='/website/social/twitter'])" +
                 ":has(a:eq(1)[href='/website/social/linkedin'])" +
                 ":has(a:eq(2)[href='/website/social/youtube'])" +
                 ":has(a:eq(3)[href='/website/social/instagram'])" +
                 ":has(a:eq(4)[href='/website/social/github'])" +
                 ":has(a:eq(5)[href='/website/social/tiktok'])" +
                 ":has(a:eq(6)[href='/website/social/facebook'])" +
                 ":has(a:eq(7)[href='https://whatever.it/1EdSw9X']:has(i.fa-pencil))" +
                 ":has(a:eq(8)[href='https://instagr.am/odoo.official/']:has(i.fa-instagram))",
        run: () => {}, // This is a check.
    },
    {
        content: 'Change url of the DB instagram link',
        trigger: 'we-list table input:eq(3)',
        run: 'text_blur https://instagram.com/odoo.official/',
    },
    {
        content: 'Save',
        trigger: 'button[data-action=save]',
        run: 'click',
    },
    {
        content: "Wait until save's calls are finished",
        trigger: "iframe body:not(.editor_enable)",
        run: function () {}, // it's a check
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    wTourUtils.clickOnSnippet({
        id: 's_social_media',
        name: 'Social Media',
    }),
    {
        content: "Check if we can still change custom icons",
        trigger: 'iframe .s_social_media a[href="https://whatever.it/1EdSw9X"] i.fa-pencil',
        run: 'dblclick',
    },
    {
        content: "Select a new icon",
        trigger: '.o_select_media_dialog .fa-heart',
    },
    {
        content: "Check if the result is correct after setting the icon",
        trigger: "iframe .s_social_media" +
                 ":has(a:eq(0)[href='/website/social/twitter'])" +
                 ":has(a:eq(1)[href='/website/social/linkedin'])" +
                 ":has(a:eq(2)[href='/website/social/youtube'])" +
                 ":has(a:eq(3)[href='/website/social/instagram'])" +
                 ":has(a:eq(4)[href='/website/social/github'])" +
                 ":has(a:eq(5)[href='/website/social/tiktok'])" +
                 ":has(a:eq(6)[href='/website/social/facebook'])" +
                 ":has(a:eq(7)[href='https://whatever.it/1EdSw9X']:has(i.fa-heart))" +
                 ":has(a:eq(8)[href='https://instagr.am/odoo.official/']:has(i.fa-instagram))",
        isCheck: true,
    },
]);

return __exports;
});
;

/**********************************************************************
*  Filepath: /website/static/tests/tours/snippet_table_of_content.js  *
*  Lines: 89                                                          *
**********************************************************************/
odoo.define('@website/../tests/tours/snippet_table_of_content', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');

const scrollToHeading = function (position) {
    return {
        content: `Scroll to h1 number ${position}`,
        trigger: `iframe h1:eq(${position})`,
        run: function () {
            this.$anchor[0].scrollIntoView(true);
        },
    };
};
const checkTOCNavBar = function (tocPosition, activeHeaderPosition) {
    return {
        content: `Check that the header ${activeHeaderPosition} is active for TOC ${tocPosition}`,
        trigger: `iframe .s_table_of_content:eq(${tocPosition}) .table_of_content_link:eq(${activeHeaderPosition}).active `,
        run: () => {}, // This is a check.
    };
};

wTourUtils.registerWebsitePreviewTour('snippet_table_of_content', {
    test: true,
    url: '/',
    edition: true,
}, [
    wTourUtils.dragNDrop({id: 's_table_of_content', name: 'Table of Content'}),
    wTourUtils.dragNDrop({id: 's_table_of_content', name: 'Table of Content'}),
    // To make sure that the public widgets of the two previous ones started.
    wTourUtils.dragNDrop({id: 's_banner', name: 'Banner'}),
    ...wTourUtils.clickOnSave(),
    checkTOCNavBar(0, 0),
    checkTOCNavBar(1, 0),
    scrollToHeading(1),
    checkTOCNavBar(0, 1),
    checkTOCNavBar(1, 0),
    scrollToHeading(2),
    checkTOCNavBar(1, 0),
    scrollToHeading(3),
    checkTOCNavBar(1, 1),
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "Click on the first TOC's title",
        trigger: 'iframe .s_table_of_content:eq(0) h1',
    },
    {
        content: "Hide the first TOC on mobile",
        trigger: '[data-toggle-device-visibility="no_mobile"]',
    },
    {
        content: "Click on the second TOC's title",
        trigger: 'iframe .s_table_of_content:eq(1) h1',
    },
    {
        content: "Hide the second TOC on desktop",
        trigger: '[data-toggle-device-visibility="no_desktop"]',
    },
    ...wTourUtils.clickOnSave(),
    {
        content: "Check that we have the good TOC on desktop",
        trigger: 'iframe .s_table_of_content.o_snippet_mobile_invisible',
        run: () => {
            if ($(document.querySelector('iframe .s_table_of_content.o_snippet_desktop_invisible'))
                    .is(':visible')) {
                console.error('The mobile TOC should not be visible on desktop');
            }
        },
    },
    {
        content: "Toggle the mobile view",
        trigger: '.o_mobile_preview',
    },
    {
        content: "Check that we have the good TOC on mobile",
        trigger: 'iframe .s_table_of_content.o_snippet_desktop_invisible',
        run: () => {
            if ($(document.querySelector('iframe .s_table_of_content.o_snippet_mobile_invisible'))
                    .is(':visible')) {
                console.error('The desktop TOC should not be visible on mobile');
            }
        },
    },
]);

return __exports;
});
;

/*****************************************************************
*  Filepath: /website/static/tests/tours/snippet_translation.js  *
*  Lines: 56                                                     *
*****************************************************************/
odoo.define('@website/../tests/tours/snippet_translation', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('snippet_translation', {
    url: '/',
    edition: true,
    test: true,
}, [
    wTourUtils.dragNDrop({name: 'Cover'}),
    {
        content: "Check that contact us contain Parseltongue",
        trigger: 'iframe .s_cover .btn-primary:contains("Contact us in Parseltongue")',
        run: () => null, // it's a check
    },
    {
        content: "Check that the save button contains 'in fu_GB'",
        trigger: '.btn[data-action="save"]:contains("Save in fu_GB")',
        run: () => null, // it's a check
    },
]);
wTourUtils.registerWebsitePreviewTour('snippet_translation_changing_lang', {
    url: '/',
    test: true,
}, [
    {
        content: "Change language to Parseltongue",
        trigger: 'iframe .js_language_selector .btn',
    },
    {
        content: "Change the language to English",
        trigger: 'iframe .js_language_selector .js_change_lang[data-url_code="en"]',
    },
    {
        content: "Enable translation",
        trigger: '.o_translate_website_container a',
    },
    {
        content: "Close the dialog",
        trigger: '.modal-footer .btn-primary',
    },
    ...wTourUtils.clickOnSave(),
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    wTourUtils.dragNDrop({name: 'Cover'}),
    {
        content: "Check that contact us contain Parseltongue",
        trigger: 'iframe .s_cover .btn-primary:contains("Contact us in Parseltongue")',
        run: () => null, // it's a check
    },
]);

return __exports;
});
;

/*************************************************************
*  Filepath: /website/static/tests/tours/snippet_version.js  *
*  Lines: 65                                                 *
*************************************************************/
odoo.define('@website/../tests/tours/snippet_version', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require("website.tour_utils");

wTourUtils.registerWebsitePreviewTour("snippet_version", {
    edition: true,
    url: "/",
    test: true,
}, [{
    content: "Drop s_test_snip snippet",
    trigger: '#oe_snippets .oe_snippet:has(.s_test_snip) .oe_snippet_thumbnail',
    run: "drag_and_drop iframe #wrap",
}, {
    content: "Drop s_text_image snippet",
    trigger: '#oe_snippets .oe_snippet:has(.s_text_image) .oe_snippet_thumbnail:not(.o_we_already_dragging)',
    run: "drag_and_drop iframe #wrap",
}, {
    content: "Test t-snippet and t-snippet-call: snippets have data-snippet set",
    trigger: '#oe_snippets .o_panel_body > .oe_snippet.ui-draggable',
    run: function () {
        // Tests done here as all these are not visible on the page
        const draggableSnippets = document.querySelectorAll('#oe_snippets .o_panel_body > .oe_snippet.ui-draggable > :nth-child(2)');
        if (![...draggableSnippets].every(el => el.dataset.snippet)) {
            console.error("error Some t-snippet are missing their template name");
        }
        if (!document.querySelector('#oe_snippets [data-snippet="s_test_snip"] [data-snippet="s_share"]')) {
            console.error("error s_share t-called inside s_test_snip is missing template name");
        }
        if (!document.querySelector('iframe:not(.o_ignore_in_tour)').contentDocument.querySelector('#wrap [data-snippet="s_test_snip"] [data-snippet="s_share"]')) {
            console.error("error Dropped a s_test_snip snippet but missing s_share template name in it");
        }
    },
},
    ...wTourUtils.clickOnSave(),
    ...wTourUtils.clickOnEditAndWaitEditMode(),
{
    content: "Modify the version of snippets",
    trigger: '#oe_snippets .o_panel_body > .oe_snippet',
    run: function () {
        document.querySelector('#oe_snippets .oe_snippet > [data-snippet="s_test_snip"]').dataset.vjs = '999';
        document.querySelector('#oe_snippets .oe_snippet > [data-snippet="s_share"]').dataset.vcss = '999';
        document.querySelector('#oe_snippets .oe_snippet > [data-snippet="s_text_image"]').dataset.vxml = '999';
    },
}, {
    content: "Edit s_test_snip",
    trigger: 'iframe #wrap.o_editable .s_test_snip',
}, {
    content: "Edit text_image",
    extra_trigger: 'we-customizeblock-options:contains(Test snip) .snippet-option-VersionControl > we-alert',
    trigger: 'iframe #wrap.o_editable .s_text_image',
}, {
    content: "Edit s_share",
    extra_trigger: 'we-customizeblock-options:contains(Text - Image) .snippet-option-VersionControl  > we-alert',
    trigger: 'iframe #wrap.o_editable .s_share',
}, {
    content: "s_share is outdated",
    extra_trigger: 'we-customizeblock-options:contains(Share) .snippet-option-VersionControl > we-alert',
    trigger: 'iframe body',
}]);

return __exports;
});
;

/************************************************************************
*  Filepath: /website/static/tests/tours/snippets_all_drag_and_drop.js  *
*  Lines: 128                                                           *
************************************************************************/
odoo.define('@website/../tests/tours/snippets_all_drag_and_drop', ['@website/components/wysiwyg_adapter/wysiwyg_adapter', 'website.tour_utils', 'web.utils', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { WysiwygAdapterComponent } = require("@website/components/wysiwyg_adapter/wysiwyg_adapter");
const websiteTourUtils = require("website.tour_utils");
const { patch, unpatch } = require("web.utils");

const patchWysiwygAdapter = () => patch(WysiwygAdapterComponent.prototype, 'snippets_all_drag_and_drop.wysiwyg_adapter', {
    _trigger_up(ev) {
        this._super(...arguments);
        if (ev.name === 'snippet_removed') {
            $('body').attr('test-dd-snippet-removed', true);
        }
    }
});

const unpatchWysiwygAdapter = () => unpatch(WysiwygAdapterComponent.prototype, 'snippets_all_drag_and_drop.wysiwyg_adapter');

const { registry } = require("@web/core/registry");

let snippetsNames = (new URL(document.location.href)).searchParams.get('snippets_names') || '';
// When this test is loaded in the backend, the search params aren't as easy to
// read as before. Little trickery to make this test run.
const searchParams = new URLSearchParams(window.location.href.split('#')[1]).get('path');
if (searchParams) {
    snippetsNames = new URLSearchParams(searchParams.split('/')[1]).get('snippets_names') || '';
    snippetsNames = snippetsNames.split(',');
}
let steps = [];
let n = 0;
for (const snippet of snippetsNames) {
    n++;
    const isModal = ['s_popup', 's_newsletter_subscribe_popup'].includes(snippet)
    const snippetSteps = [{
        content: `Drop ${snippet} snippet [${n}/${snippetsNames.length}]`,
        trigger: `#oe_snippets .oe_snippet:has( > [data-snippet='${snippet}']) .oe_snippet_thumbnail`,
        run: "drag_and_drop iframe #wrap",
    }, {
        content: `Edit ${snippet} snippet`,
        trigger: `iframe #wrap.o_editable [data-snippet='${snippet}']${isModal ? ' .modal.show' : ''}`,
    }, {
        content: `check ${snippet} setting are loaded, wait panel is visible`,
        trigger: ".o_we_customize_panel",
        run: function () {}, // it's a check
    }, {
        content: `Remove the ${snippet} snippet`, // Avoid bad perf if many snippets
        trigger: "we-button.oe_snippet_remove:last"
    }, {
        content: `click on 'BLOCKS' tab (${snippet})`,
        extra_trigger: 'body[test-dd-snippet-removed]',
        trigger: ".o_we_add_snippet_btn",
        run: function (actions) {
            $('body').removeAttr('test-dd-snippet-removed');
            actions.auto();
        },
    }];

    if (snippet === 's_google_map') {
        snippetSteps.splice(1, 3, {
            content: 'Close API Key popup',
            trigger: "iframe .modal-footer .btn-secondary",
        });
    } else if (['s_popup', 's_newsletter_subscribe_popup'].includes(snippet)) {
        snippetSteps[2]['in_modal'] = false;
        snippetSteps.splice(3, 2, {
            content: `Hide the ${snippet} popup`,
            trigger: `iframe [data-snippet='${snippet}'] .s_popup_close`,
        }, {
            content: `Make sure ${snippet} is hidden`,
            trigger: "iframe body:not(.modal-open)",
        });
    }
    steps = steps.concat(snippetSteps);
}

registry.category("web_tour.tours").add("snippets_all_drag_and_drop", {
    test: true,
    // To run the tour locally, you need to insert the URL sent by the python
    // tour here. There is currently an issue with tours which don't have an URL
    // url: '/?enable_editor=1&snippets_names=s_showcase,s_numbers,s_...',
    steps: () => [
    ...websiteTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "Ensure snippets are actually passed at the test.",
        trigger: "body",
        run: function () {
            // safety check, otherwise the test might "break" one day and
            // receive no steps. The test would then not test anything anymore
            // without us noticing it.
            if (steps.length < 220) {
                console.error(`This test is not behaving as it should, got only ${steps.length} steps.`);
            }
            patchWysiwygAdapter();
        },
    },
    // This first step is needed as it will be used later for inner snippets
    // Without this, it will dropped inside the footer and will need an extra
    // selector.
    {
        content: "Drop s_text_image snippet",
        trigger: "#oe_snippets .oe_snippet:has( > [data-snippet='s_text_image']) .oe_snippet_thumbnail",
        run: "drag_and_drop iframe #wrap"
    },
    {
        content: "Edit s_text_image snippet",
        trigger: "iframe #wrap.o_editable [data-snippet='s_text_image']"
    },
    {
        content: "check setting are loaded, wait panel is visible",
        trigger: ".o_we_customize_panel"
    },
    {
        content: "click on 'BLOCKS' tab",
        trigger: ".o_we_add_snippet_btn"
    },
].concat(steps).concat([
    {
        content: "Remove wysiwyg patch",
        trigger: "body",
        run: () => unpatchWysiwygAdapter(),
    }
]),
});

return __exports;
});
;

/*********************************************************************
*  Filepath: /website/static/tests/tours/specific_website_editor.js  *
*  Lines: 33                                                         *
*********************************************************************/
odoo.define('@website/../tests/tours/specific_website_editor', ['@web/core/registry', 'website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const wTourUtils = require("website.tour_utils");

wTourUtils.registerWebsitePreviewTour("generic_website_editor", {
    test: true,
    edition: true,
}, [{
    trigger: 'iframe body:not([data-hello="world"])',
    content: 'Check that the editor DOM matches its website-generic features',
    run: function () {}, // Simple check
}]);

// Good practice would have been to use `wTourUtils.registerWebsitePreviewTour`
// for this tour with `edition: true` and remove the first step to enter edit
// mode. Unfortunately this breaks the page and therefore the test fails for
// unknown reason.
registry.category("web_tour.tours").add('specific_website_editor', {
    test: true,
    steps: () => [
    ...wTourUtils.clickOnEditAndWaitEditMode(),
{
    trigger: 'iframe body[data-hello="world"]',
    content: 'Check that the editor DOM matches its website-specific features',
    run: function () {}, // Simple check
}]});

return __exports;
});
;

/******************************************************************
*  Filepath: /website/static/tests/tours/start_cloned_snippet.js  *
*  Lines: 39                                                      *
******************************************************************/
odoo.define('@website/../tests/tours/start_cloned_snippet', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('website.tour_utils');

const countdownSnippet = {
    name: 'Countdown',
    id: 's_countdown',
};
const dragNDropOutOfFooter = wTourUtils.dragNDrop(countdownSnippet);
dragNDropOutOfFooter.run = 'drag_and_drop iframe #wrapwrap #wrap';

wTourUtils.registerWebsitePreviewTour('website_start_cloned_snippet', {
    edition: true,
    test: true,
    url: '/',
}, [
    dragNDropOutOfFooter,
    wTourUtils.clickOnSnippet(countdownSnippet),
    {
        content: 'Click on clone snippet',
        trigger: '.oe_snippet_clone',
    },
    {
        content: 'Check that the cloned snippet has a canvas and that something has been drawn inside of it',
        trigger: 'iframe .s_countdown:eq(1) canvas',
        run: function () {
            // Check that at least one bit has been drawn in the canvas
            if (!this.$anchor[0].getContext('2d').getImageData(0, 0, 1000, 1000).data.includes(1)) {
                console.error('The cloned snippet should have been started');
            }
        },
    },
]);

return __exports;
});
;

/*************************************************************
*  Filepath: /website/static/tests/tours/text_animations.js  *
*  Lines: 52                                                 *
*************************************************************/
odoo.define('@website/../tests/tours/text_animations', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require("website.tour_utils");

wTourUtils.registerWebsitePreviewTour("text_animations", {
    test: true,
    url: "/",
    edition: true,
}, [
    wTourUtils.dragNDrop({
        id: "s_cover",
        name: "Cover",
    }),
    {
        content: "Click on the snippet title",
        trigger: "iframe .s_cover h1 > font",
        run: "dblclick", // Make sure the title is selected.
    },
    {
        content: "Click on the 'Animate Text' button to activate the option",
        trigger: "div.o_we_animate_text",
    },
    {
        content: "Check that the animation was applied",
        trigger: "iframe .s_cover h1 span.o_animated_text",
        isCheck: true,
    },
    {
        content: "Click on the 'Animate Text' button",
        trigger: "div.o_we_animate_text",
    },
    {
        content: "Check that the animation was disabled for the title",
        trigger: "iframe .s_cover:not(:has(.o_animated_text))",
        isCheck: true,
    },
    {
        content: "Try to apply the text animation again",
        trigger: "div.o_we_animate_text",
    },
    {
        content: "Check that the animation was applied",
        trigger: "iframe .s_cover:has(span.o_animated_text)",
        isCheck: true,
    },
]);

return __exports;
});
;

/*****************************************************************
*  Filepath: /website/static/tests/tours/translate_menu_name.js  *
*  Lines: 31                                                     *
*****************************************************************/
odoo.define('@website/../tests/tours/translate_menu_name', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('translate_menu_name', {
    url: '/pa_GB',
    test: true,
    edition: false,
}, [
    {
        content: "activate translate mode",
        trigger: '.o_translate_website_container a',
    },
    {
        content: "Close the dialog",
        trigger: '.modal-footer .btn-primary',
    },
    wTourUtils.clickOnExtraMenuItem({}, true),
    {
        content: "translate the menu entry",
        trigger: 'iframe a[href="/englishURL"] span',
        run: 'text value pa-GB',
    },
    ...wTourUtils.clickOnSave(),
]);

return __exports;
});
;

/*************************************************************
*  Filepath: /website/static/tests/tours/unsplash_beacon.js  *
*  Lines: 19                                                 *
*************************************************************/
odoo.define('@website/../tests/tours/unsplash_beacon', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add("test_unsplash_beacon", {
    test: true,
    url: "/",
    steps: () => [{
        content: "Verify whether beacon was sent.",
        trigger: 'img[data-beacon="sent"]',
        isCheck: true,
    }],
});

return __exports;
});
;

/****************************************************************************
*  Filepath: /website/static/tests/tours/website_backend_menus_redirect.js  *
*  Lines: 36                                                                *
****************************************************************************/
odoo.define('@website/../tests/tours/website_backend_menus_redirect', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('website_backend_menus_redirect', {
    test: true,
    url: '/',
    steps: () => [
{
    content: 'Need at least a step so the tour is not failing in enterprise',
    trigger: 'body',
    edition: 'enterprise',
}, {
    content: 'Make frontend to backend menus appears',
    trigger: 'body:has(#wrap)',
    run: function () {
        // The dropdown is hidden behind an SVG on hover animation.
        this.$anchor.find('.o_frontend_to_backend_apps_menu').addClass('show');
    },
    edition: 'community',
}, {
    content: 'Click on Test Root backend menu',
    trigger: '.o_frontend_to_backend_apps_menu a:contains("Test Root")',
    edition: 'community',
}, {
    content: 'Check that we landed on the apps page (Apps), and not the Home Action page (Settings)',
    trigger: '.oe_module_vignette',
    edition: 'community',
}
]});

return __exports;
});
;

/*****************************************************************
*  Filepath: /website/static/tests/tours/website_click_tests.js  *
*  Lines: 43                                                     *
*****************************************************************/
odoo.define('@website/../tests/tours/website_click_tests', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('website.tour_utils');

const cover = {
    id: 's_cover',
    name: 'Cover',
};

wTourUtils.registerWebsitePreviewTour('website_click_tour', {
    test: true,
    url: '/',
}, [
    {
        content: "trigger a page navigation",
        trigger: 'iframe a[href="/contactus"]',
    },
    {
        content: "wait for the page to be loaded",
        trigger: '.o_website_preview[data-view-xmlid="website.contactus"]',
        run: () => null, // it's a check
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "click on a link that would trigger navigation",
        trigger: 'iframe a[href="/"]',
    },
    wTourUtils.goBackToBlocks(),
    wTourUtils.dragNDrop(cover),
    wTourUtils.clickOnSnippet(cover),
    ...wTourUtils.clickOnSave(),
    {
        content: "wait for the iframe to be ready",
        trigger: 'iframe body:not(.editor_enable)',
        run: () => null, // it's a check
    }
]);

return __exports;
});
;

/*****************************************************************
*  Filepath: /website/static/tests/tours/website_form_editor.js  *
*  Lines: 690                                                    *
*****************************************************************/
odoo.define('@website/../tests/tours/website_form_editor', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module alias=website.tour.form_editor **/

    const wTourUtils = require("website.tour_utils");

    // Visibility possible values:
    const VISIBLE = 'Always Visible';
    const HIDDEN = 'Hidden';
    const CONDITIONALVISIBILITY = 'Visible only if';

    const NB_NON_ESSENTIAL_REQUIRED_FIELDS_IN_DEFAULT_FORM = 2;
    const ESSENTIAL_FIELDS_VALID_DATA_FOR_DEFAULT_FORM = [
        {
            name: 'email_from',
            value: 'admin@odoo.com',
        },
        {
            name: 'subject',
            value: 'Hello, world!',
        }
    ];
    const essentialFieldsForDefaultFormFillInSteps = [];
    for (const data of ESSENTIAL_FIELDS_VALID_DATA_FOR_DEFAULT_FORM) {
        essentialFieldsForDefaultFormFillInSteps.push({
            content: "Enter data in model-required field",
            trigger: `iframe .s_website_form_model_required .s_website_form_input[name="${data.name}"]`,
            run: `text ${data.value}`,
        });
    }

    // Replace all `"` character by `&quot;`, all `'` character by `&apos;` and
    // all "`" character by `&lsquo;`.
    const getQuotesEncodedName = function (name) {
            return name.replaceAll(/"/g, character => `&quot;`)
                       .replaceAll(/'/g, character => `&apos;`)
                       .replaceAll(/`/g, character => `&lsquo;`)
                       .replaceAll("\\", character => `&bsol;`);
    };

    const triggerFieldByLabel = (label) => {
        return `.s_website_form_field.s_website_form_custom:has(label:contains("${label}"))`;
    };
    const selectFieldByLabel = (label) => {
        return [{
            content: `Select field "${label}"`,
            trigger: "iframe " + triggerFieldByLabel(label),
        }];
    };
    const selectButtonByText = function (text) {
        return [{
            content: "Open the select",
            trigger: `we-select:has(we-button:contains("${text}")) we-toggler`,
        },
        {
            content: "Click on the option",
            trigger: `we-select we-button:contains("${text}")`,
        }];
    };
    const selectButtonByData = function (data) {
        return [{
            content: "Open the select",
            trigger: `we-select:has(we-button[${data}]) we-toggler`,
        }, {
            content: "Click on the option",
            trigger: `we-select we-button[${data}]`,
        }];
    };
    const addField = function (name, type, label, required, isCustom,
                               display = {visibility: VISIBLE, condition: ""}) {
        const data = isCustom ? `data-custom-field="${name}"` : `data-existing-field="${name}"`;
        const ret = [{
            content: "Select form",
            extra_trigger: 'iframe .s_website_form_field',
            trigger: 'iframe section.s_website_form',
        }, {
            content: "Add field",
            trigger: 'we-button[data-add-field]',
        },
        ...selectButtonByData(data),
        {
            content: "Wait for field to load",
            trigger: `iframe .s_website_form_field[data-type="${name}"], .s_website_form_input[name="${name}"]`, //custom or existing field
            run: function () {},
        },
        ...selectButtonByText(display.visibility),
    ];
        let testText = 'iframe .s_website_form_field';
        if (display.condition) {
            ret.push({
                content: "Set the visibility condition",
                trigger: 'we-input[data-attribute-name="visibilityCondition"] input',
                run: `text ${display.condition}`,
            });
        }
        if (required) {
            testText += '.s_website_form_required';
            ret.push({
                content: "Mark the field as required",
                trigger: 'we-button[data-name="required_opt"] we-checkbox',
            });
        }
        if (label) {
            testText += `:has(label:contains(${label}))`;
            ret.push({
                content: "Change the label text",
                trigger: 'we-input[data-set-label-text] input',
                run: `text ${label}`,
            });
        }
        if (type !== 'checkbox' && type !== 'radio' && type !== 'select') {
            let inputType = type === 'textarea' ? type : `input[type="${type}"]`;
            const nameAttribute = isCustom && label ? getQuotesEncodedName(label) : name;
            testText += `:has(${inputType}[name="${nameAttribute}"]${required ? "[required]" : ""})`;
            // Because 'testText' will be used as selector to verify the content
            // of the label, the `\` character needs to be escaped.
            testText = testText.replaceAll("\\", "\\\\");
        }
        ret.push({
            content: "Check the resulting field",
            trigger: testText,
            run: function () {},
        });
        return ret;
    };
    const addCustomField = function (name, type, label, required, display) {
        return addField(name, type, label, required, true, display);
    };
    const addExistingField = function (name, type, label, required, display) {
        return addField(name, type, label, required, false, display);
    };

    wTourUtils.registerWebsitePreviewTour("website_form_editor_tour", {
        url: '/',
        edition: true,
        test: true,
    }, [
        // Drop a form builder snippet and configure it
        {
            content: "Drop the form snippet",
            trigger: '#oe_snippets .oe_snippet:has(.s_website_form) .oe_snippet_thumbnail',
            run: 'drag_and_drop iframe #wrap',
        }, {
            content: "Select form by clicking on an input field",
            extra_trigger: 'iframe .s_website_form_field',
            trigger: 'iframe section.s_website_form input',
        }, {
            content: "Verify that the form editor appeared",
            trigger: '.o_we_customize_panel .snippet-option-WebsiteFormEditor',
            run: () => null,
        }, {
            content: "Go back to blocks to unselect form",
            trigger: '.o_we_add_snippet_btn',
        }, {
            content: "Select form by clicking on a text area",
            extra_trigger: 'iframe .s_website_form_field',
            trigger: 'iframe section.s_website_form textarea',
        }, {
            content: "Verify that the form editor appeared",
            trigger: '.o_we_customize_panel .snippet-option-WebsiteFormEditor',
            run: () => null,
        }, {
            content: "Rename the field label",
            trigger: 'we-input[data-set-label-text] input',
            run: "text Renamed",
        }, {
            content: "Leave the rename options",
            trigger: 'we-input[data-set-label-text] input',
            run: "text_blur",
        }, {
            content: "Go back to blocks to unselect form",
            trigger: '.o_we_add_snippet_btn',
        }, {
            content: "Select form itself (not a specific field)",
            extra_trigger: 'iframe .s_website_form_field',
            trigger: 'iframe section.s_website_form',
        },
        ...selectButtonByText('Send an E-mail'),
        {
            content: "Form has a model name",
            trigger: 'iframe section.s_website_form form[data-model_name="mail.mail"]',
        }, {
            content: 'Edit the Phone Number field',
            trigger: 'iframe input[name="phone"]',
        }, {
            content: 'Change the label position of the phone field',
            trigger: 'we-button[data-select-label-position="right"]',
        },
        ...addExistingField('email_cc', 'text', 'Test conditional visibility', false, {visibility: CONDITIONALVISIBILITY, condition: 'odoo'}),

        ...addExistingField('date', 'text', 'Test Date', true),

        ...addExistingField('record_name', 'text', 'Awesome Label', false, {visibility: HIDDEN}),

        ...addExistingField('body_html', 'textarea', 'Your Message', true),

        ...addExistingField('recipient_ids', 'checkbox'),

        ...addCustomField('one2many', 'checkbox', 'Products', true),
        {
            content: "Change Option 1 label",
            trigger: 'we-list table input:eq(0)',
            run: 'text Iphone',
        }, {
            content: "Change Option 2 label",
            trigger: 'we-list table input:eq(1)',
            run: 'text Galaxy S',
        }, {
            content: "Change first Option 3 label",
            trigger: 'we-list table input:eq(2)',
            run: 'text Xperia',
        }, {
            content: "Click on Add new Checkbox",
            trigger: 'we-list we-button.o_we_list_add_optional',
        }, {
            content: "Change added Option label",
            trigger: 'we-list table input:eq(3)',
            run: 'text Wiko Stairway',
        }, {
            content: "Check the resulting field",
            trigger: "iframe .s_website_form_field.s_website_form_custom.s_website_form_required" +
                        ":has(.s_website_form_multiple[data-display='horizontal'])" +
                        ":has(.checkbox:has(label:contains('Iphone')):has(input[type='checkbox'][required]))" +
                        ":has(.checkbox:has(label:contains('Galaxy S')):has(input[type='checkbox'][required]))" +
                        ":has(.checkbox:has(label:contains('Xperia')):has(input[type='checkbox'][required]))" +
                        ":has(.checkbox:has(label:contains('Wiko Stairway')):has(input[type='checkbox'][required]))",
            run: function () {},
        },
        ...selectButtonByData('data-multi-checkbox-display="vertical"'),
        {
            content: "Check the resulting field",
            trigger: "iframe .s_website_form_field.s_website_form_custom.s_website_form_required" +
                        ":has(.s_website_form_multiple[data-display='vertical'])" +
                        ":has(.checkbox:has(label:contains('Iphone')):has(input[type='checkbox'][required]))" +
                        ":has(.checkbox:has(label:contains('Galaxy S')):has(input[type='checkbox'][required]))" +
                        ":has(.checkbox:has(label:contains('Xperia')):has(input[type='checkbox'][required]))" +
                        ":has(.checkbox:has(label:contains('Wiko Stairway')):has(input[type='checkbox'][required]))",
            run: function () {},
        },

        ...addCustomField('selection', 'radio', 'Service', true),
        {
            content: "Change Option 1 label",
            trigger: 'we-list table input:eq(0)',
            run: 'text After-sales Service',
        }, {
            content: "Change Option 2 label",
            trigger: 'we-list table input:eq(1)',
            run: 'text Invoicing Service',
        }, {
            content: "Change first Option 3 label",
            trigger: 'we-list table input:eq(2)',
            run: 'text Development Service',
        }, {
            content: "Click on Add new Checkbox",
            trigger: 'we-list we-button.o_we_list_add_optional',
        }, {
            content: "Change last Option label",
            trigger: 'we-list table input:eq(3)',
            run: 'text Management Service',
        }, {
            content: "Mark the field as not required",
            trigger: 'we-button[data-name="required_opt"] we-checkbox',
        }, {
            content: "Check the resulting field",
            trigger: "iframe .s_website_form_field.s_website_form_custom:not(.s_website_form_required)" +
                        ":has(.radio:has(label:contains('After-sales Service')):has(input[type='radio']:not([required])))" +
                        ":has(.radio:has(label:contains('Invoicing Service')):has(input[type='radio']:not([required])))" +
                        ":has(.radio:has(label:contains('Development Service')):has(input[type='radio']:not([required])))" +
                        ":has(.radio:has(label:contains('Management Service')):has(input[type='radio']:not([required])))",
            run: function () {},
        },

        ...addCustomField('many2one', 'select', 'State', true),

        // Customize custom selection field
        {
            content: "Change Option 1 Label",
            trigger: 'we-list table input:eq(0)',
            run: 'text Germany',
        }, {
            content: "Change Option 2 Label",
            trigger: 'we-list table input:eq(1)',
            run: 'text Belgium',
        }, {
            content: "Change first Option 3 label",
            trigger: 'we-list table input:eq(2)',
            run: 'text France',
        }, {
            content: "Click on Add new Checkbox",
            trigger: 'we-list we-button.o_we_list_add_optional',
        }, {
            content: "Change last Option label",
            trigger: 'we-list table input:eq(3)',
            run: 'text Canada',
        }, {
            content: "Remove Germany Option",
            trigger: '.o_we_select_remove_option:eq(0)',
        }, {
            content: "Click on Add new Checkbox",
            trigger: 'we-list we-button.o_we_list_add_optional',
        }, {
            content: "Change last option label with a number",
            trigger: 'we-list table input:eq(3)',
            run: 'text 44 - UK',
        }, {
            content: "Check that the input value is the full option value",
            trigger: 'we-list table input:eq(3)',
            run: () => {
                const addedOptionEl = document.querySelector('iframe.o_iframe').contentDocument.querySelector('.s_website_form_field select option[value="44 - UK"]');
                if (!addedOptionEl) {
                    console.error('The number option was not correctly added');
                }
            },
        }, {
            content: "Check the resulting snippet",
            trigger: "iframe .s_website_form_field.s_website_form_custom.s_website_form_required" +
                        ":has(label:contains('State'))" +
                        ":has(select[required]:hidden)" +
                        ":has(.s_website_form_select_item:contains('Belgium'))" +
                        ":has(.s_website_form_select_item:contains('France'))" +
                        ":has(.s_website_form_select_item:contains('Canada'))" +
                        ":has(.s_website_form_select_item:contains('44 - UK'))" +
                        ":not(:has(.s_website_form_select_item:contains('Germany')))",
            run: function () {},
        },

        ...addExistingField('attachment_ids', 'file', 'Invoice Scan'),

        {
            content: "Insure the history step of the editor is not checking for unbreakable",
            trigger: 'iframe #wrapwrap',
            run: () => {
                const wysiwyg = $('iframe:not(.o_ignore_in_tour)').contents().find('#wrapwrap').data('wysiwyg');
                wysiwyg.odooEditor.historyStep(true);
            },
        },
        // Edit the submit button using linkDialog.
        {
            content: "Click submit button to show edit popover",
            trigger: 'iframe .s_website_form_send',
        }, {
            content: "Click on Edit Link in Popover",
            trigger: 'iframe .o_edit_menu_popover .o_we_edit_link',
        }, {
            content: "Check that no URL field is suggested",
            trigger: '.oe-toolbar:not(.oe-floating):has(#url_row:hidden)',
            run: () => null,
        }, {
            content: "Change button's style",
            trigger: '.dropdown:has([name="link_style_color"]) > button',
            run: () => {
                $('.dropdown:has([name="link_style_color"]) > button').click();
                $('[data-value="secondary"]').click();
                $('.dropdown:has([name="link_style_shape"]) > button').click();
                $('[data-value="rounded-circle"]').click();
                $('.dropdown:has([name="link_style_size"]) > button').click();
                $('[data-value="sm"]').click();
            },
        }, {
            content: "Check the resulting button",
            trigger: 'iframe .s_website_form_send.btn.btn-sm.btn-secondary.rounded-circle',
            run: () => null,
        },
        // Add a default value to a auto-fillable field.
        {
            content: 'Select the name field',
            trigger: 'iframe .s_website_form_field:eq(0)',
        }, {
            content: 'Set a default value to the name field',
            trigger: 'we-input[data-attribute-name="value"] input',
            run: 'text John Smith',
        },

        // Add two fields: the 1st one's visibility is tied to the 2nd one
        // being set, and the 2nd one is autopopulated. As a result, both
        // should be visible by default.
        ...addCustomField("char", "text", "field A", false, {visibility: CONDITIONALVISIBILITY}),
        ...addCustomField("char", "text", "field B", false),
        ...selectFieldByLabel("field A"),
        ...selectButtonByData('data-set-visibility-dependency="field B"'),
        ...selectButtonByData('data-select-data-attribute="set"'),
        ...selectFieldByLabel("field B"),
        {
            content: "Insert default value",
            trigger: 'we-input[data-attribute-name="value"] input',
            run: "text prefilled",
        },
        {
            content: "Save the page",
            trigger: "button[data-action=save]",
        },
        {
            content: 'Verify value attribute and property',
            extra_trigger: 'iframe body:not(.editor_enable)',
            trigger: 'iframe .s_website_form_field:eq(0) input[value="John Smith"]:propValue("Mitchell Admin")',
        },
        {
            content: 'Verify that phone field is still auto-fillable',
            trigger: 'iframe .s_website_form_field input[data-fill-with="phone"]:propValue("+1 555-555-5555")',
        },
        // Check that the resulting form behavior is correct.
        {
            content: "Check that field B prefill text is set",
            trigger: `iframe ${triggerFieldByLabel("field B")}:has(input[value="prefilled"])`,
            run: () => null, // it's a check
        }, {
            content: "Check that field A is visible",
            trigger: `iframe .s_website_form:has(${triggerFieldByLabel("field A")}:visible)`,
            run: () => null, // it's a check
        },
        // A) Check that if we edit again and save again the default value is
        // not deleted.
        // B) Add a 3rd field. Field A's visibility is tied to field B being set,
        // field B is autopopulated and its visibility is tied to field C being
        // set, and field C is empty.
        ...wTourUtils.clickOnEditAndWaitEditMode(),
        {
            content: 'Edit the form',
            trigger: 'iframe .s_website_form_field:eq(0) input',
            run: 'click',
        },
        ...addCustomField("char", "text", "field C", false),
        ...selectFieldByLabel("field B"),
        ...selectButtonByText(CONDITIONALVISIBILITY),
        ...selectButtonByData('data-set-visibility-dependency="field C"'),
        ...selectButtonByData('data-select-data-attribute="set"'),
        {
            content: 'Save the page',
            trigger: 'button[data-action=save]',
            run: 'click',
        },

        // Check that the resulting form behavior is correct.
        {
            content: 'Verify that the value has not been deleted',
            extra_trigger: 'iframe body:not(.editor_enable)',
            trigger: 'iframe .s_website_form_field:eq(0) input[value="John Smith"]',
        }, {
            content: "Check that fields A and B are not visible and that field B's prefill text is still set",
            trigger: "iframe .s_website_form" +
                `:has(${triggerFieldByLabel("field A")}:not(:visible))` +
                `:has(${triggerFieldByLabel("field B")}` +
                `:has(input[value="prefilled"]):not(:visible))`,
            run: () => null, // it's a check
        }, {
            content: "Type something in field C",
            trigger: `iframe ${triggerFieldByLabel("field C")} input`,
            run: "text Sesame",
        }, {
            content: "Check that fields A and B are visible",
            trigger: `iframe .s_website_form:has(${triggerFieldByLabel("field B")}:visible)` +
                `:has(${triggerFieldByLabel("field A")}:visible)`,
            run: () => null, // it's a check
        },

        // Have field A's visibility tied to field B containing something,
        // while field B's visibility is also tied to another field.
        ...wTourUtils.clickOnEditAndWaitEditMode(),
        ...selectFieldByLabel("field A"),
        {
            content: "Verify that the form editor appeared",
            trigger: ".o_we_customize_panel .snippet-option-WebsiteFormEditor",
            run: () => null,
        },
        ...selectButtonByData('data-select-data-attribute="contains"'),
        {
            content: "Tie the visibility of field A to field B containing 'peek-a-boo'",
            trigger: "we-input[data-name=hidden_condition_additional_text] input",
            run: "text peek-a-boo",
        },
        ...wTourUtils.clickOnSave(),

        // Check that the resulting form works and does not raise an error.
         {
            content: "Write anything in C",
            trigger: `iframe ${triggerFieldByLabel("field C")} input`,
            run: "text Mellon",
        }, {
            content: "Check that field B is visible, but field A is not",
            trigger: `iframe .s_website_form:has(${triggerFieldByLabel("field B")}:visible)` +
                `:has(${triggerFieldByLabel("field A")}:not(:visible))`,
            run: () => null, // it's a check
        }, {
            content: "Insert 'peek-a-boo' in field B",
            trigger: `iframe ${triggerFieldByLabel("field B")} input`,
            run: "text peek-a-boo",
        }, {
            content: "Check that field A is visible",
            trigger: `iframe .s_website_form:has(${triggerFieldByLabel("field A")}:visible)`,
            run: () => null, // it's a check
        },
        ...wTourUtils.clickOnEditAndWaitEditMode(),
        {
            content: 'Click on the submit button',
            trigger: 'iframe .s_website_form_send',
            run: 'click',
        },
        {
            content: 'Change the Recipient Email',
            trigger: '[data-field-name="email_to"] input',
            run: 'text test@test.test',
        },
        // The next four calls to "addCustomField" are there to ensure such
        // characters do not make the form editor crash.
        ...addCustomField("char", "text", "''", false),
        ...addCustomField("char", "text", '""', false),
        ...addCustomField("char", "text", "``", false),
        ...addCustomField("char", "text", "\\", false),
        {
            content: 'Save the page',
            trigger: 'button[data-action=save]',
            run: 'click',
        },
        {
            content: 'Verify that the recipient email has been saved',
            trigger: 'iframe body:not(.editor_enable)',
            // We have to this that way because the input type = hidden.
            extra_trigger: 'iframe form:has(input[name="email_to"][value="test@test.test"])',
        },
    ]);

    function editContactUs(steps) {
        return [
            {
                content: "Select the contact us form by clicking on an input field",
                trigger: 'iframe .s_website_form input',
                extra_trigger: '#oe_snippets .oe_snippet_thumbnail',
                run: 'click',
            },
            ...steps,
            {
                content: 'Save the page',
                trigger: 'button[data-action=save]',
            },
            {
                content: 'Wait for reload',
                trigger: 'body:not(.editor_enable)',
            },
        ];
    }

    wTourUtils.registerWebsitePreviewTour('website_form_contactus_edition_with_email', {
        url: '/contactus',
        edition: true,
        test: true,
    }, editContactUs([
        {
            content: 'Change the Recipient Email',
            trigger: '[data-field-name="email_to"] input',
            run: 'text test@test.test',
        },
    ]));
    wTourUtils.registerWebsitePreviewTour('website_form_contactus_edition_no_email', {
        url: '/contactus',
        edition: true,
        test: true,
    }, editContactUs([
        {
            content: "Change a random option",
            trigger: '[data-set-mark] input',
            run: 'text_blur **',
        },
    ]));

    wTourUtils.registerWebsitePreviewTour('website_form_conditional_required_checkboxes', {
        test: true,
        url: '/',
        edition: true,
    }, [
        // Create a form with two checkboxes: the second one required but
        // invisible when the first one is checked. Basically this should allow
        // to have: both checkboxes are visible by default but the form can
        // only be sent if one of the checkbox is checked.
        {
            content: "Add the form snippet",
            trigger: '#oe_snippets .oe_snippet:has(.s_website_form) .oe_snippet_thumbnail',
            run: 'drag_and_drop iframe #wrap',
        }, {
            content: "Select the form by clicking on an input field",
            extra_trigger: 'iframe .s_website_form_field',
            trigger: 'iframe section.s_website_form input',
            run: function (actions) {
                actions.auto();

                // The next steps will be about removing non essential required
                // fields. For the robustness of the test, check that amount
                // of field stays the same.
                const requiredFields = this.$anchor.closest('[data-snippet]').find('.s_website_form_required');
                if (requiredFields.length !== NB_NON_ESSENTIAL_REQUIRED_FIELDS_IN_DEFAULT_FORM) {
                    console.error('The amount of required fields seems to have changed');
                }
            },
        },
        ...((function () {
            const steps = [];
            for (let i = 0; i < NB_NON_ESSENTIAL_REQUIRED_FIELDS_IN_DEFAULT_FORM; i++) {
                steps.push({
                    content: "Select required field to remove",
                    trigger: 'iframe .s_website_form_required .s_website_form_input',
                });
                steps.push({
                    content: "Remove required field",
                    trigger: 'iframe .oe_overlay .oe_snippet_remove',
                });
            }
            return steps;
        })()),
        ...addCustomField('boolean', 'checkbox', 'Checkbox 1', false),
        ...addCustomField('boolean', 'checkbox', 'Checkbox 2', true, {visibility: CONDITIONALVISIBILITY}),
        {
            content: "Open condition item select",
            trigger: 'we-select[data-name="hidden_condition_opt"] we-toggler',
        }, {
            content: "Choose first checkbox as condition item",
            trigger: 'we-button[data-set-visibility-dependency="Checkbox 1"]',
        }, {
            content: "Open condition comparator select",
            trigger: 'we-select[data-attribute-name="visibilityComparator"] we-toggler',
        }, {
            content: "Choose 'not equal to' comparator",
            trigger: 'we-button[data-select-data-attribute="!selected"]',
        }, {
            content: 'Save the page',
            trigger: 'button[data-action=save]',
        },

        // Check that the resulting form behavior is correct
        {
            content: "Wait for page reload",
            trigger: 'iframe body:not(.editor_enable) [data-snippet="s_website_form"]',
            run: function (actions) {
                // The next steps will be about removing non essential required
                // fields. For the robustness of the test, check that amount
                // of field stays the same.
                const essentialFields = this.$anchor.find('.s_website_form_model_required');
                if (essentialFields.length !== ESSENTIAL_FIELDS_VALID_DATA_FOR_DEFAULT_FORM.length) {
                    console.error('The amount of model-required fields seems to have changed');
                }
            },
        },
        ...essentialFieldsForDefaultFormFillInSteps,
        {
            content: 'Try sending empty form',
            trigger: 'iframe .s_website_form_send',
        }, {
            content: 'Check the form could not be sent',
            trigger: 'iframe #s_website_form_result.text-danger',
            run: () => null,
        }, {
            content: 'Check the first checkbox',
            trigger: 'iframe input[type="checkbox"][name="Checkbox 1"]',
        }, {
            content: 'Check the second checkbox is now hidden',
            trigger: 'iframe .s_website_form:has(input[type="checkbox"][name="Checkbox 2"]:not(:visible))',
            run: () => null,
        }, {
            content: 'Try sending the form',
            trigger: 'iframe .s_website_form_send',
        }, {
            content: "Check the form was sent (success page without form)",
            trigger: 'iframe body:not(:has([data-snippet="s_website_form"])) .fa-check-circle',
            run: () => null,
        }, {
            content: "Go back to the form",
            trigger: 'iframe a.navbar-brand.logo',
        },
        ...essentialFieldsForDefaultFormFillInSteps,
        {
            content: 'Check the second checkbox',
            trigger: 'iframe input[type="checkbox"][name="Checkbox 2"]',
        }, {
            content: 'Try sending the form again',
            trigger: 'iframe .s_website_form_send',
        }, {
            content: "Check the form was again sent (success page without form)",
            trigger: 'iframe body:not(:has([data-snippet="s_website_form"])) .fa-check-circle',
            run: () => null,
        }
    ]);

    __exports[Symbol.for("default")] = {};

return __exports;
});

odoo.define(`website.tour.form_editor`, ['@website/../tests/tours/website_form_editor'], function (require) {
                        return require('@website/../tests/tours/website_form_editor')[Symbol.for("default")];
                        });
;

/**************************************************************************
*  Filepath: /website/static/tests/tours/website_form_editor_frontend.js  *
*  Lines: 215                                                             *
**************************************************************************/
odoo.define('@website/../tests/tours/website_form_editor_frontend', ['@web/core/registry', 'web.rpc'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/
const { registry } = require("@web/core/registry");
const rpc = require('web.rpc');

registry.category("web_tour.tours").add("website_form_editor_tour_submit", {
    test: true,
    steps: () => [
    {
        content:  "Try to send the form with some required fields not filled in",
        extra_trigger:  "form[data-model_name='mail.mail']" +
                        "[data-success-page='/contactus-thank-you']" +
                        ":has(.s_website_form_field:has(label:contains('Your Name')):has(input[type='text'][name='name'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Your Email')):has(input[type='email'][name='email_from'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Your Question')):has(textarea[name='description'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Subject')):has(input[type='text'][name='subject'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Test Date')):has(input[type='text'][name='date'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Awesome Label')):hidden)" +
                        ":has(.s_website_form_field:has(label:contains('Your Message')):has(textarea[name='body_html'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Products')):has(input[type='checkbox'][name='Products'][value='Iphone'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Products')):has(input[type='checkbox'][name='Products'][value='Galaxy S'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Products')):has(input[type='checkbox'][name='Products'][value='Xperia'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Products')):has(input[type='checkbox'][name='Products'][value='Wiko Stairway'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Service')):has(input[type='radio'][name='Service'][value='After-sales Service']:not([required])))" +
                        ":has(.s_website_form_field:has(label:contains('Service')):has(input[type='radio'][name='Service'][value='Invoicing Service']:not([required])))" +
                        ":has(.s_website_form_field:has(label:contains('Service')):has(input[type='radio'][name='Service'][value='Development Service']:not([required])))" +
                        ":has(.s_website_form_field:has(label:contains('Service')):has(input[type='radio'][name='Service'][value='Management Service']:not([required])))" +
                        ":has(.s_website_form_field:has(label:contains('State')):has(select[name='State'][required]:has(option[value='Belgium'])))" +
                        ":has(.s_website_form_field.s_website_form_required:has(label:contains('State')):has(select[name='State'][required]:has(option[value='France'])))" +
                        ":has(.s_website_form_field:has(label:contains('State')):has(select[name='State'][required]:has(option[value='Canada'])))" +
                        ":has(.s_website_form_field:has(label:contains('Invoice Scan')))" +
                        ":has(.s_website_form_field:has(input[name='email_to'][value='test@test.test']))",
        trigger:  ".s_website_form_send"
    },
    {
        content:  "Check if required fields were detected and complete the Subject field",
        extra_trigger:  "form:has(#s_website_form_result.text-danger)" +
                        ":has(.s_website_form_field:has(label:contains('Your Name')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('Email')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Your Question')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Subject')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Test Date')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Your Message')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Products')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Service')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('State')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('Invoice Scan')):not(.o_has_error))",
        trigger:  "input[name=subject]",
        run:      "text Jane Smith"
    },
    {
        content:  "Update required field status by trying to Send again",
        trigger:  ".s_website_form_send"
    },
    {
        content:  "Check if required fields were detected and complete the Message field",
        extra_trigger:  "form:has(#s_website_form_result.text-danger)" +
                        ":has(.s_website_form_field:has(label:contains('Your Name')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('Email')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Your Question')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Subject')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('Test Date')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Your Message')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Products')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Service')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('State')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('Invoice Scan')):not(.o_has_error))",
        trigger:  "textarea[name=body_html]",
        run:      "text A useless message"
    },
    {
        content:  "Update required field status by trying to Send again",
        trigger:  ".s_website_form_send"
    },
    {
        content:  "Check if required fields was detected and check a product. If this fails, you probably broke the cleanForSave.",
        extra_trigger:  "form:has(#s_website_form_result.text-danger)" +
                        ":has(.s_website_form_field:has(label:contains('Your Name')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('Email')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Your Question')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Subject')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('Test Date')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Your Message')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('Products')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Service')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('State')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('Invoice Scan')):not(.o_has_error))",
        trigger:  "input[name=Products][value='Wiko Stairway']"
    },
    {
        content:  "Complete Date field",
        trigger:  ".s_website_form_datetime [data-toggle='datetimepicker']",
    },
    {
        content:  "Check another product",
        trigger:  "input[name='Products'][value='Xperia']"
    },
    {
        content:  "Check a service",
        trigger:  "input[name='Service'][value='Development Service']"
    },
    {
        content:  "Complete Your Name field",
        trigger:  "input[name='name']",
        run:      "text chhagan"
    },
    {
        content:  "Complete Email field",
        trigger:  "input[name=email_from]",
        run:      "text test@mail.com"
    },
    {
        content: "Complete Subject field",
        trigger: 'input[name="subject"]',
        run: 'text subject',
    },
    {
        content:  "Complete Your Question field",
        trigger:  "textarea[name='description']",
        run:      "text magan"
    },
    {
        content: "Check if conditional field is visible, it shouldn't.",
        trigger: "body",
        run: function () {
            const style = window.getComputedStyle(this.$anchor[0].getElementsByClassName('s_website_form_field_hidden_if')[0]);
            if (style.display !== 'none') {
                console.error('error This field should be invisible when the name is not odoo');
            }
        }
    },
    {
        content: "Change name input",
        trigger: "input[name='name']",
        run: "text odoo",
    },
    {
        content: "Check if conditional field is visible, it should.",
        trigger: "input[name='email_cc']",
    },
    {
        content: "Select state option",
        trigger: "select[name='State']",
        run: 'text 44 - UK',
    },
    {
        content:  "Send the form",
        trigger:  ".s_website_form_send"
    },
    {
        content:  "Check form is submitted without errors",
        trigger:  "#wrap:has(h1:contains('Thank You!'))"
    }
]});

registry.category("web_tour.tours").add("website_form_editor_tour_results", {
    test: true,
    steps: () => [
    {
        content: "Check mail.mail records have been created",
        trigger: "body",
        run: function () {
            var mailDef = rpc.query({
                    model: 'mail.mail',
                    method: 'search_count',
                    args: [[
                        ['email_to', '=', 'test@test.test'],
                        ['body_html', 'like', 'A useless message'],
                        ['body_html', 'like', 'Service : Development Service'],
                        ['body_html', 'like', 'State : 44 - UK'],
                        ['body_html', 'like', 'Products : Xperia,Wiko Stairway']
                    ]],
                });
            var success = function(model, count) {
                if (count > 0) {
                    $('body').append('<div id="website_form_editor_success_test_tour_'+model+'"></div>');
                }
            };
            mailDef.then(success.bind(this, 'mail_mail'));
        }
    },
    {
        content:  "Check mail.mail records have been created",
        trigger:  "#website_form_editor_success_test_tour_mail_mail",
        allowInvisible: true,
    }
]});
registry.category("web_tour.tours").add('website_form_contactus_submit', {
    test: true,
    url: '/contactus',
    steps: () => [
    // As the demo portal user, only two inputs needs to be filled to send
    // the email
    {
        content: "Fill in the subject",
        trigger: 'input[name="subject"]',
    },
    {
        content: 'Fill in the message',
        trigger: 'textarea[name="description"]',
    },
    {
        content: 'Send the form',
        trigger: '.s_website_form_send',
    },
    {
        content: 'Check form is submitted without errors',
        trigger: '#wrap:has(h1:contains("Thank You!"))',
    },
]});

return __exports;
});
;

/*****************************************************************
*  Filepath: /website/static/tests/tours/website_navbar_menu.js  *
*  Lines: 24                                                     *
*****************************************************************/
odoo.define('@website/../tests/tours/website_navbar_menu', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add("website_navbar_menu", {
    test: true,
    url: "/",
    steps: () => [
    {
        content: "Ensure menus are in DOM",
        trigger: '#top_menu .nav-item a:contains("Test Tour Menu")',
        run: function () {}, // it's a check
    }, {
        content: "Ensure menus loading is done (so they are actually visible)",
        trigger: 'body:not(:has(.o_menu_loading))',
        run: function () {}, // it's a check
    }
]});

return __exports;
});
;

/******************************************************************
*  Filepath: /website/static/tests/tours/website_page_options.js  *
*  Lines: 62                                                      *
******************************************************************/
odoo.define('@website/../tests/tours/website_page_options', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('website_page_options', {
    test: true,
    url: '/',
    edition: true,
}, [
    wTourUtils.clickOnSnippet({id: 'o_header_standard', name: 'Header'}),
    wTourUtils.changeOption('TopMenuVisibility', 'we-select:has([data-visibility]) we-toggler'),
    wTourUtils.changeOption('TopMenuVisibility', 'we-button[data-visibility="transparent"]'),
    // It's important to test saving right after changing that option only as
    // this is why this test was made in the first place: the page was not
    // marked as dirty when that option was the only one that was changed.
    ...wTourUtils.clickOnSave(),
    {
        content: "Check that the header is transparent",
        trigger: 'iframe #wrapwrap.o_header_overlay',
        run: () => null, // it's a check
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    wTourUtils.clickOnSnippet({id: 'o_header_standard', name: 'Header'}),
    wTourUtils.changeOption('topMenuColor', 'we-select.o_we_so_color_palette'),
    wTourUtils.changeOption('topMenuColor', 'button[data-color="black-50"]', 'background color', 'bottom', true),
    ...wTourUtils.clickOnSave(),
    {
        content: "Check that the header is in black-50",
        trigger: 'iframe header#top.bg-black-50',
        run: () => null, // it's a check
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    wTourUtils.clickOnSnippet({id: 'o_header_standard', name: 'Header'}),
    wTourUtils.changeOption('TopMenuVisibility', 'we-select:has([data-visibility]) we-toggler'),
    wTourUtils.changeOption('TopMenuVisibility', 'we-button[data-visibility="hidden"]'),
    ...wTourUtils.clickOnSave(),
    {
        content: "Check that the header is hidden",
        trigger: 'iframe #wrapwrap:has(header#top.d-none.o_snippet_invisible)',
        run: () => null, // it's a check
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "Click on 'header' in the invisible elements list",
        trigger: '.o_we_invisible_el_panel .o_we_invisible_entry',
    },
    wTourUtils.clickOnSnippet({id: 'o_footer', name: 'Footer'}),
    wTourUtils.changeOption('HideFooter', 'we-button[data-name="hide_footer_page_opt"] we-checkbox'),
    ...wTourUtils.clickOnSave(),
    {
        content: "Check that the footer is hidden and the header is visible",
        trigger: 'iframe #wrapwrap:has(.o_footer.d-none.o_snippet_invisible)',
        extra_trigger: 'iframe #wrapwrap header#top:not(.d-none)',
        run: () => null, // it's a check
    },
]);

return __exports;
});
;

/************************************************************************
*  Filepath: /website/static/tests/tours/website_snippets_menu_tabs.js  *
*  Lines: 39                                                            *
************************************************************************/
odoo.define('@website/../tests/tours/website_snippets_menu_tabs', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour("website_snippets_menu_tabs", {
    test: true,
    url: "/",
    edition: true,
}, [
    wTourUtils.goToTheme(),
    {
        content: "Click on the empty 'DRAG BUILDING BLOCKS HERE' area.",
        extra_trigger: 'we-customizeblock-option.snippet-option-ThemeColors',
        trigger: 'iframe main > .oe_structure.oe_empty',
        run: 'click',
    },
    wTourUtils.goToTheme(),
    {
        content: "Verify that the customize panel is not empty.",
        trigger: '.o_we_customize_panel > we-customizeblock-options',
        run: () => null, // it's a check
    },
    {
        content: "Click on the style tab.",
        trigger: '#snippets_menu .o_we_customize_snippet_btn',
    },
    wTourUtils.goToTheme(),
    {
        content: "Verify that the customize panel is not empty.",
        trigger: '.o_we_customize_panel > we-customizeblock-options',
        run: () => null, // it's a check
    },
]);

return __exports;
});
;

/*******************************************************************
*  Filepath: /website/static/tests/tours/website_style_edition.js  *
*  Lines: 55                                                       *
*******************************************************************/
odoo.define('@website/../tests/tours/website_style_edition', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require("website.tour_utils");

const TARGET_FONT_SIZE = 30;

const checkFontSize = function () {
    const style = document.defaultView.getComputedStyle(this.$anchor[0]);
    if (style.fontSize !== `${TARGET_FONT_SIZE}px`) {
        console.error(`Expected the font-size to be equal to ${TARGET_FONT_SIZE}px but found ${style.fontSize} instead`);
    }
};

wTourUtils.registerWebsitePreviewTour("website_style_edition", {
    test: true,
    url: '/',
    edition: true,
}, [{
    content: "Go to theme options",
    trigger: '.o_we_customize_theme_btn',
}, {
    content: "Change font size",
    trigger: '[data-variable="font-size-base"] input',
    run: `text_blur ${TARGET_FONT_SIZE}`,
}, {
    content: "Check the font size was properly adapted",
    trigger: 'iframe #wrapwrap',
    // Waiting the CSS to be reloaded: the code adds a new assets bundle with
    // a #t=... at the end then removes the old one.
    extra_trigger: 'iframe html:not(:has(link[href$="web.assets_frontend.min.css"]))',
    run: checkFontSize,
},
...wTourUtils.clickOnSave(),
{
    content: "Check the font size is still ok outside of edit mode",
    trigger: 'iframe body:not(.editor_enable) #wrapwrap',
    run: checkFontSize,
},
...wTourUtils.clickOnEditAndWaitEditMode(),
wTourUtils.goToTheme(),
{
    content: "Click on the Background Image selection",
    trigger: '[data-customize-body-bg-type="\'image\'"]:not(.active)',
    extra_trigger: '[data-customize-body-bg-type="NONE"].active',
}, {
    content: "The media dialog should open",
    trigger: '.o_select_media_dialog',
    run: () => {}, // It's a check.
}]);

return __exports;
});
;

/******************************************************************
*  Filepath: /website/static/tests/tours/website_text_edition.js  *
*  Lines: 72                                                      *
******************************************************************/
odoo.define('@website/../tests/tours/website_text_edition', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('website.tour_utils');

const WEBSITE_MAIN_COLOR = '#ABCDEF';

wTourUtils.registerWebsitePreviewTour('website_text_edition', {
    test: true,
    url: '/',
    edition: true,
}, [
    {
        content: "Go to theme options",
        trigger: '.o_we_customize_theme_btn',
    },
    {
        content: "Open colorpicker to change website main color",
        trigger: 'we-select[data-color="o-color-1"] .o_we_color_preview',
    },
    {
        content: "Input the value for the new website main color (also make sure it is independent from the backend)",
        trigger: '.o_hex_input',
        run: `text_blur ${WEBSITE_MAIN_COLOR}`,
    },
    {
        content: "Go to the blocks tab",
        trigger: '.o_we_add_snippet_btn',
    },
    wTourUtils.dragNDrop({id: 's_text_block', name: 'Text'}),
    {
        content: "Click on the text block first paragraph (to auto select)",
        trigger: 'iframe .s_text_block p',
    },
    {
        content: "Open the foreground colorpicker",
        trigger: '#toolbar:not(.oe-floating) #oe-text-color',
    },
    {
        content: "Go to the 'solid' tab",
        trigger: '.o_we_colorpicker_switch_pane_btn[data-target="custom-colors"]',
    },
    {
        content: "Input the website main color explicitly",
        trigger: '.o_hex_input',
        run: `text_blur ${WEBSITE_MAIN_COLOR}`,
    },
    {
        content: "Check that paragraph now uses the main color *class*",
        trigger: 'iframe .s_text_block p',
        run: function (actions) {
            const fontEl = this.$anchor[0].querySelector('font');
            if (!fontEl) {
                console.error("A background color should have been applied");
                return;
            }
            if (fontEl.style.backgroundColor) {
                console.error("The paragraph should not have an inline style background color");
                return;
            }
            if (!fontEl.classList.contains('text-o-color-1')) {
                console.error("The paragraph should have the right background color class");
                return;
            }
        },
    }
]);

return __exports;
});
;

/**********************************************************************************************
*  Filepath: /website/static/src/client_actions/website_preview/website_preview_test_mode.js  *
*  Lines: 18                                                                                  *
**********************************************************************************************/
odoo.define('@website/client_actions/website_preview/website_preview_test_mode', ['web.utils', '@website/client_actions/website_preview/website_preview'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/
const { patch } = require('web.utils');
const { WebsitePreview } = require('@website/client_actions/website_preview/website_preview');

patch(WebsitePreview.prototype, 'website_preview_test_mode', {
    /**
     * @override
     */
    get testMode() {
        return true;
    }
});

return __exports;
});
;

/**************************************************************
*  Filepath: /stock/static/tests/tours/stock_report_tests.js  *
*  Lines: 27                                                  *
**************************************************************/
odoo.define('@stock/../tests/tours/stock_report_tests', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/
    
    const { registry } = require("@web/core/registry");

    registry.category("web_tour.tours").add('test_stock_route_diagram_report', {
        test: true,
        steps: () => [
    {
        trigger: '.o_kanban_record',
        extra_trigger: '.o_breadcrumb',
    },
    {
        trigger: '.nav-item > a:contains("Inventory")',
    },
    {
        trigger: '.btn[id="stock.view_diagram_button"]',
    },
    {
        trigger: 'iframe .o_report_stock_rule',
    },
    ]});

return __exports;
});
;

/**************************************************************************************
*  Filepath: /mail_enterprise/static/tests/tours/discuss_channel_expand_test_tour.js  *
*  Lines: 40                                                                          *
**************************************************************************************/
odoo.define('@mail_enterprise/../tests/tours/discuss_channel_expand_test_tour', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/* @odoo-module */

const { registry } = require("@web/core/registry");

/**
 * This tour depends on data created by python test in charge of launching it.
 * It is not intended to work when launched from interface. It is needed to test
 * an action (action manager) which is not possible to test with QUnit.
 * @see mail_enterprise/tests/test_discuss_channel_expand.py
 */
registry
    .category("web_tour.tours")
    .add("mail_enterprise/static/tests/tours/discuss_channel_expand_test_tour.js", {
        test: true,
        steps: () => [
            {
                content: "Click on 'Open Actions Menu' in the chat window header to show expand button",
                trigger:
                    '.o-mail-ChatWindow:has(.o-mail-ChatWindow-name:contains("test-mail-channel-expand-tour")) [title="Open Actions Menu"]',
            },
            {
                content: "Click on expand button to open channel in Discuss",
                trigger:
                    '.o-mail-ChatWindow:has(.o-mail-ChatWindow-name:contains("test-mail-channel-expand-tour")) [title="Open in Discuss"]',
            },
            {
                content:
                    "Check that first message of #test-mail-channel-expand-tour is shown in Discuss app",
                trigger:
                    '.o-mail-Discuss-content .o-mail-Message-body:contains("test-message-mail-channel-expand-tour")',
                run: () => {},
            },
        ],
    });

return __exports;
});
;

/************************************************************************
*  Filepath: /account_accountant/static/tests/tours/tax_group_tests.js  *
*  Lines: 24                                                            *
************************************************************************/
odoo.define('@account_accountant/../tests/tours/tax_group_tests', ['account.tax.group.tour.tests', '@web/core/registry', '@web/core/utils/patch'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */
require("account.tax.group.tour.tests")
const { registry } = require("@web/core/registry");
const { patch } = require("@web/core/utils/patch");

patch(registry.category("web_tour.tours").get("account_tax_group"), "patch_account_tax_group", {
    steps() {
        const originalSteps = this._super();
        const accountMenuClickIndex = originalSteps.findIndex((step) => step.id === 'account_menu_click');
        originalSteps.splice(accountMenuClickIndex, 1, 
            {
                trigger: '.o_app[data-menu-xmlid="account_accountant.menu_accounting"]',
                content: "Go to Accounting",
            }
        );
        return originalSteps;
    }
});

return __exports;
});
;

/********************************************************************************************
*  Filepath: /account_accountant/static/tests/tours/test_tour_bank_rec_rainbowman_reset.js  *
*  Lines: 84                                                                                *
********************************************************************************************/
odoo.define('@account_accountant/../tests/tours/test_tour_bank_rec_rainbowman_reset', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('account_accountant_bank_rec_widget_rainbowman_reset',
    {
        test: true,
        url: '/web',
        steps: () => [
        stepUtils.showAppsMenuItem(),
        ...stepUtils.goToAppSteps('account_accountant.menu_accounting', "Open the accounting module"),

        // Open the widget. The first line should be selected by default.
        {
            content: "Open the bank reconciliation widget",
            extra_trigger: ".o_breadcrumb",
            trigger: "button.btn-primary[name='action_open_reconcile']",
        },
        {
            content: "'line1' should be selected and form mounted",
            extra_trigger: "div[name='line_ids'] td[field='name']:contains('line1')",
            trigger: ".o_bank_rec_selected_st_line:contains('line1')",
            run: () => {},
        },
        // Rainbowman gets reset
        {
            content: "Mount invoice 2 for line 1",
            trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table td[name='move_id']:contains('INV/2019/00002')",
        },
        {
            content: "Validate line1",
            extra_trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table tr.o_rec_widget_list_selected_item td[name='move_id']:contains('INV/2019/00002')",
            trigger: "button:contains('Validate')",
        },
        {
            content: "No records brings rainbows",
            extra_trigger: ".o_bank_rec_selected_st_line:contains('line2')",
            trigger: "div.o_kanban_view .o_searchview_input",
            run: "text thisShouldNotReturnAnyRecords",
        },
        {
            content: "Select the Journal Entry search option from the dropdown",
            trigger: ".o_searchview_autocomplete li:contains(Journal Entry)",
        },
        {
            content: "Remove the filter while rainbow man is on screen",
            extra_trigger: ".o_reward_rainbow_man:contains('You reconciled 1 transaction in')",
            trigger: ".o_kanban_view .o_searchview_facet:nth-child(3) .o_facet_remove",
        },
        {
            content: "Search for no results again",
            extra_trigger: ".o_bank_rec_st_line:contains('line2')",
            trigger: "div.o_kanban_view .o_searchview_input",
            run: "text thisShouldNotReturnAnyRecords",
        },
        {
            content: "Select the Journal Entry search option from the dropdown",
            trigger: ".o_searchview_autocomplete li:contains(Journal Entry)",
        },
        {
            content: "No content helper is displayed instead of rainbowman",
            trigger: ".o_view_nocontent_smiling_face",
            run: () => {},
        },
        // End
        stepUtils.toggleHomeMenu(),
        ...stepUtils.goToAppSteps(
            'account_accountant.menu_accounting',
            "Reset back to accounting module"
        ),
        {
            content: "check that we're back on the dashboard",
            trigger: 'a:contains("Customer Invoices")',
            run() {},
        }
    ]
});

return __exports;
});
;

/**************************************************************************************
*  Filepath: /account_accountant/static/tests/tours/test_tour_bank_rec_statements.js  *
*  Lines: 80                                                                          *
**************************************************************************************/
odoo.define('@account_accountant/../tests/tours/test_tour_bank_rec_statements', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('account_accountant_bank_rec_widget_statements',
    {
        test: true,
        url: '/web',
        steps: () => [
        stepUtils.showAppsMenuItem(),
        ...stepUtils.goToAppSteps('account_accountant.menu_accounting', "Open the accounting module"),
        {
            content: "Open the bank reconciliation widget",
            extra_trigger: ".o_breadcrumb",
            trigger: "button.btn-primary[name='action_open_reconcile']",
        },
        {
            content: "Statement button",
            trigger: ".o_bank_rec_st_line:eq(2) .oe_kanban_action_a:contains('Statement')",
            allowInvisible: true,
        },
        {
            content: "Save the statement with proposed values",
            extra_trigger: ".modal-dialog:contains('Create Statement')",
            trigger: ".o_form_button_save",
        },
        {
            content: "Click the Valid Statement with $ 1,000.00 that is visible in Kanban",
            trigger: "span[name='kanban-subline-clickable-amount']:contains('$ 1,000.00')",
        },
        {
            content: "Modify the end balance",
            trigger: "input[id='balance_end_real_0']",
            run: "text 100",
        },
        {
            content: "Dialog displays warning, save anyway",
            extra_trigger: ".modal-body div.alert-warning:contains('The running balance')",
            trigger: ".modal-dialog .btn-primary[special='save']",
        },
        {
            content: "Click the red statement, after checking the balance",
            extra_trigger: ".btn-link:contains('$ 2,100.00')",
            trigger: "span[name='kanban-subline-clickable-amount']:contains('$ 100.00')",
        },
        {
            content: "Delete the statement",
            trigger: ".modal-dialog .btn-danger:contains('Delete')",
        },
        {
            content: "Confirm Deletion",
            extra_trigger: ".modal-dialog:contains('Confirmation')",
            trigger: ".btn-primary:contains('Ok')",
        },
        {
            content: "balance displays $3000.00 and no statement",
            extra_trigger: ".o_kanban_renderer:not(:has(.kanban-statement))",
            trigger: ".btn-link:contains('$ 3,000')",
            isCheck: true,
        },
        // End
        stepUtils.toggleHomeMenu(),
        ...stepUtils.goToAppSteps(
            'account_accountant.menu_accounting',
            "Reset back to accounting module"
        ),
        {
            content: "check that we're back on the dashboard",
            trigger: 'a:contains("Customer Invoices")',
            run() {},
        }
    ]
});

return __exports;
});
;

/******************************************************************************
*  Filepath: /account_accountant/static/tests/tours/test_tour_bank_rec_ui.js  *
*  Lines: 613                                                                 *
******************************************************************************/
odoo.define('@account_accountant/../tests/tours/test_tour_bank_rec_ui', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('account_accountant_bank_rec_widget_ui',
    {
        test: true,
        url: '/web',
        steps: () => [
        stepUtils.showAppsMenuItem(),
        ...stepUtils.goToAppSteps('account_accountant.menu_accounting', "Open the accounting module"),

        // Open the widget. The first line should be selected by default.
        {
            content: "Open the bank reconciliation widget",
            extra_trigger: ".o_breadcrumb",
            trigger: "button.btn-primary[name='action_open_reconcile']",
        },
        {
            content: "'line1' should be selected and form mounted",
            extra_trigger: "div[name='line_ids'] td[field='name']:contains('line1')",
            trigger: ".o_bank_rec_selected_st_line:contains('line1')",
            run: () => {},
        },
        // Select line2. It should remain selected when returning using the breadcrumbs.
        {
            content: "select 'line2'",
            extra_trigger: ".o_bank_rec_st_line:contains('line3')",
            trigger: ".o_bank_rec_st_line:contains('line2')",
        },
        {
            content: "'line2' should be selected",
            trigger: ".o_bank_rec_selected_st_line:contains('line2')",
            run: () => {},
        },
        {
            content: "View an invoice",
            trigger: "button.btn-secondary[name='action_open_business_doc']:eq(1)",
        },
        {
            content: "Breadcrumb back to Bank Reconciliation from INV/2019/00002",
            trigger: ".breadcrumb-item:contains('Bank Reconciliation')",
            extra_trigger: ".o_breadcrumb .active:contains('INV/2019/00002')",
            run: "click"
        },
        {
            content: "'line2' should be selected after returning",
            trigger: ".o_bank_rec_selected_st_line:contains('line2')",
            extra_trigger: ".o_bank_rec_st_line:contains('line1')",
        },
        {
            content: "'line2' form mounted",
            extra_trigger: "div[name='line_ids'] td[field='name']:contains('line2')",
            trigger: ".o_bank_rec_selected_st_line:contains('line2')",
        },
        // Keep AML search, and prepared entry (line_ids) when changing tabs, using breadcrumbs, and view switcher
        {
            content: "AMLs list has both invoices",
            extra_trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table tr:nth-child(3) td[name='move_id']:contains('INV/2019/00001')",
            trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table tr:nth-child(2) td[name='move_id']:contains('INV/2019/00002')",
            run: () => {},
        },
        {
            content: "Search for INV/2019/00001",
            extra_trigger: "a.active[name='amls_tab']",
            trigger: "div.bank_rec_widget_form_amls_list_anchor .o_searchview_input",
            run: "text INV/2019/00001",
        },
        {
            content: "Select the Journal Entry search option from the dropdown",
            trigger: ".o_searchview_autocomplete li:contains(Journal Entry)",
        },
        {
            content: "AMLs list only displays one invoice",
            trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table tr:nth-child(1) td[name='move_id']:contains('INV/2019/00001')",
            run: () => {},
        },
        {
            content: "Select 'manual_operations_tab'",
            trigger: "a[name='manual_operations_tab']",
        },
        {
            content: "Select 'amls_tab'",
            extra_trigger: "div[name='partner_id'] input",
            trigger: "a[name='amls_tab']",
        },
        {
            content: "AMLs list contains the search facet, and one invoice - select it",
            extra_trigger: "div.bank_rec_widget_form_amls_list_anchor .o_searchview_facet:nth-child(1) .o_facet_value:contains('INV/2019/00001')",
            trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table tr:nth-child(1) td[name='move_id']:contains('INV/2019/00001')",
            run: "click"
        },
        {
            content: "Check INV/2019/00001 is well marked as selected",
            extra_trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table tr.o_rec_widget_list_selected_item td[name='move_id']:contains('INV/2019/00001')",
            trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table tr.o_rec_widget_list_selected_item td[name='move_id']:contains('INV/2019/00001')",
            run: function() {},
        },
        {
            content: "View an invoice",
            trigger: "button.btn-secondary[name='action_open_business_doc']:nth-child(1)",
        },
        {
            content: "Breadcrumb back to Bank Reconciliation from INV/2019/00001",
            trigger: ".breadcrumb-item:contains('Bank Reconciliation')",
            extra_trigger: ".o_breadcrumb .active:contains('INV/2019/00001')",
        },
        {
            content: "Check INV/2019/00001 is selected and still contains the search facet",
            extra_trigger: "div.bank_rec_widget_form_amls_list_anchor .o_searchview_facet:nth-child(1) .o_facet_value:contains('INV/2019/00001')",
            trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table tr.o_rec_widget_list_selected_item td[name='move_id']:contains('INV/2019/00001')",
            run: () => {},
        },
        // Search should remove some lines, select the first unmatched record, and persist when returning with breadcrumbs
        {
            content: "Search for line2",
            extra_trigger: "a.active[name='amls_tab']",
            trigger: "div.o_kanban_view .o_searchview_input",
            run: "text line2",
        },
        {
            content: "Select the Transaction search option from the dropdown",
            trigger: ".o_searchview_autocomplete li:contains(Transaction)",
        },
        {
            content: "'line2' should be selected",
            trigger: ".o_bank_rec_st_line:last():contains('line2')",
            extra_trigger: "div[name='line_ids'] td[field='name']:contains('line2')",
            run: () => {}
        },
        {
            content: "Nothing has changed: INV/2019/00001 is selected and still contains the search facet",
            extra_trigger: "div.bank_rec_widget_form_amls_list_anchor .o_searchview_facet:nth-child(1) .o_facet_value:contains('INV/2019/00001')",
            trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table tr.o_rec_widget_list_selected_item td[name='move_id']:contains('INV/2019/00001')",
            run: () => {},
        },
        {
            content: "Switch to list view",
            extra_trigger: ".o_switch_view.o_kanban.active",
            trigger: ".o_switch_view.o_list",
        },
        {
            content: "Switch back to kanban",
            extra_trigger: ".o_switch_view.o_list.active",
            trigger: ".o_switch_view.o_kanban",
        },
        {
            content: "Remove the kanban filter for line2",
            trigger: ".o_kanban_view .o_searchview_facet:nth-child(3) .o_facet_remove",
        },
        {
            content: "Nothing has changed: INV/2019/00001 is still selected and contains the search facet",
            extra_trigger: "div.bank_rec_widget_form_amls_list_anchor .o_searchview_facet:nth-child(1) .o_facet_value:contains('INV/2019/00001')",
            trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table tr.o_rec_widget_list_selected_item td[name='move_id']:contains('INV/2019/00001')",
            run: () => {},
        },
        // AML Search Facet is removed, and line_ids reset when changing line
        {
            content: "selecting 'line1' should reset the AML search filter ",
            extra_trigger: ".o_bank_rec_st_line:contains('line3')",
            trigger: ".o_bank_rec_st_line:contains('line1')",
        },
        {
            content: "select 'line2' again",
            extra_trigger: "div[name='line_ids'] td[field='name']:contains('line1')",
            trigger: ".o_bank_rec_st_line:contains('line2')",
        },
        {
            content: "Bank Suspense Account is back",
            extra_trigger: "div[name='line_ids'] td[field='name']:contains('line2')",
            trigger: "div[name='line_ids'] .o_bank_rec_auto_balance_line",
            run: () => {},
        },
        {
            content: "AML Search Filter has been reset",
            trigger: ".o_list_view .o_searchview_input_container:not(:has(.o_searchview_facet))",
            run: () => {},
        },
        // Test statement line selection when using the pager
        {
            content: "Click Pager",
            trigger: ".o_pager_value:first()",
        },
        {
            content: "Change pager to display lines 1-2",
            trigger: "input.o_pager_value",
            run: "text 1-2",
        },
        {
            content: "Last St Line is line2",
            extra_trigger: ".o_pager_value:contains('1-2')",
            trigger: ".o_bank_rec_st_line:last():contains('line2')",
            run: () => {},
        },
        {
            content: "Page Next",
            trigger: ".o_pager_next:first()",
        },
        {
            content: "Statement line3 is selected",
            extra_trigger: ".o_pager_value:contains('3-3')",
            trigger: ".o_bank_rec_selected_st_line:contains('line3')",
            run: () => {},
        },
        {
            content: "Page to beginning",
            trigger: ".o_pager_next:first()",
        },
        {
            content: "Statement line1 is selected",
            extra_trigger: "div[name='line_ids'] td[field='name']:contains('line1')",
            trigger: ".o_bank_rec_selected_st_line:contains('line1')",
            run: () => {},
        },
        // HTML buttons
        {
            content: "Mount an invoice",
            trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table td[name='move_id']:contains('INV/2019/00003')",
        },
        {
            content: "Select the mounted invoice line and check the strikethrough value",
            extra_trigger: "div[name='line_ids']:has(.text-decoration-line-through:contains('$ 2,000.00'))",
            trigger: "div[name='line_ids'] tr.o_data_row:last() td[field='name']:contains('INV/2019/00003')",
        },
        {
            content: "Fully Paid button",
            extra_trigger: "a.active[name='manual_operations_tab']",
            trigger: "button[name='action_apply_line_suggestion']:contains('fully paid')",
        },
        {
            content: "Check the remainder",
            trigger: "div[name='line_ids'] tr.o_data_row:contains('Suspense') td[field='debit']:contains('$ 1,000.00')",
            run: () => {},
        },
        {
            content: "Partial Payment",
            trigger: "button[name='action_apply_line_suggestion']:contains('partial payment')",
        },
        {
            content: "View Invoice 0003",
            extra_trigger: "button[name='action_apply_line_suggestion']:contains('fully paid')",
            trigger: "button[name='action_redirect_to_move']"
        },
        {
            content: "Breadcrumb back to Bank Reconciliation from INV/2019/00003",
            trigger: ".breadcrumb-item:contains('Bank Reconciliation')",
            extra_trigger: ".o_breadcrumb .active:contains('INV/2019/00003')",
        },
        {
            content: "Select the mounted invoice line INV/2019/00003",
            trigger: "div[name='line_ids'] tr.o_data_row:last() td[field='name']:contains('INV/2019/00003')",
        },
        // Match Existing entries tab is activated when line is removed
        {
            content: "Remove the invoice",
            extra_trigger: "a.active[name='manual_operations_tab']",
            trigger: ".o_list_record_remove .fa-trash-o",
        },
        {
            content: "amls_tab is activated",
            trigger: "a.active[name='amls_tab']",
            run: () => {},
        },
        {
            content: "Activate Manual Operations to add manual entries",
            trigger: "a[name='manual_operations_tab']",
        },
        {
            content: "add manual entry 1",
            trigger: "div[name='balance'] input",
            run: "text -600.0"
        },
        {
            content: "mount the remaining opening balance line",
            trigger: "div[name='line_ids'] tr.o_data_row:contains('Suspense') td[field='credit']:contains('$ 400.00')",
        },
        {
            content: "Remove the manual entry",
            extra_trigger: "div[name='balance'] input:text('-400.00'):focus",
            trigger: ".o_list_record_remove .fa-trash-o",
        },
        {
            content: "amls_tab is activated and auto balancing line is 1000",
            extra_trigger: "div[name='line_ids'] tr.o_data_row:contains('Suspense') td[field='credit']:contains('$ 1,000.00')",
            trigger: "a.active[name='amls_tab']",
            run: () => {},
        },
        {
            content: "Mount another invoice",
            trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table td[name='move_id']:contains('INV/2019/00001')",
        },
        // After validating, line1 should disappear & line2 should be selected (due to filters)
        {
            content: "Validate line1",
            extra_trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table tr.o_rec_widget_list_selected_item td[name='move_id']:contains('INV/2019/00001')",
            trigger: "button:contains('Validate')",
        },
        {
            content: "The 'line2' is the first kanban record and is selected",
            extra_trigger: "div[name='line_ids'] td[field='name']:contains('line2')",
            trigger: ".o_bank_rec_st_line:first():contains('line2')",
            run: () => {},
        },
        // Test Reset, "Matched" badge and double-click
        {
            content: "Remove the kanban filter for 'Not Matched'",
            trigger: ".o_kanban_view .o_searchview_facet:nth-child(2) .o_facet_remove",
        },
        {
            content: "The 'line1' is the first kanban record with line2 selected",
            extra_trigger: "div[name='line_ids'] td[field='name']:contains('line2')",
            trigger: ".o_bank_rec_st_line:first():contains('line1')",
            run: () => {},
        },
        {
            content: "Mount invoice 2 for line 2",
            trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table td[name='move_id']:contains('INV/2019/00002')",
        },
        {
            content: "Validate line2 with double click",
            extra_trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table tr.o_rec_widget_list_selected_item td[name='move_id']:contains('INV/2019/00002')",
            trigger: "button:contains('Validate')",
            run: "dblclick",
        },
        {
            content: "Click Pager again after line2 is matched",
            extra_trigger: ".o_bank_rec_st_line:contains('line2') .badge.text-bg-success",
            trigger: ".o_pager_value:first()",
        },
        {
            content: "Change pager to display lines 1-3",
            trigger: "input.o_pager_value",
            run: "text 1-3",
        },
        {
            content: "manually select line2 again by clicking it's matched icon",
            extra_trigger: ".o_bank_rec_selected_st_line:contains('line3')",
            trigger: ".badge.text-bg-success:last()",
        },
        {
            content: "Reset line2",
            extra_trigger: "div[name='line_ids']:not(:has(.fa-trash-o)) td[field='name']:contains('line2')",
            trigger: "button:contains('Reset')",
        },
        {
            content: "amls_tab is activated while still on line2 which doesn't contain a badge",
            extra_trigger: ".o_bank_rec_selected_st_line:contains('line2'):not(:has(div.badge))",
            trigger: "div[name='line_ids']:has(.fa-trash-o)+.o_notebook a.active[name='amls_tab']",
            run: () => {},
        },
        // Test view_switcher
        {
            content: "Switch to list view",
            extra_trigger: ".o_switch_view.o_kanban.active",
            trigger: ".o_switch_view.o_list",
        },
        {
            content: "Select the first Match Button (line2)",
            extra_trigger: ".btn-secondary:contains('View')",
            trigger: ".btn-secondary:contains('Match')",
        },
        {
            content: "Last St Line is line2",
            extra_trigger: ".o_bank_rec_st_line:last():contains('line2')",
            trigger: ".o_bank_rec_selected_st_line:contains('line2')",
        },
        {
            content: "Button To Check will reconcile since partner is saved on line2",
            trigger: ".btn-secondary:contains('To Check')",
        },
        {
            content: "both badges are visible, trash icon is not, discuss tab is active",
            extra_trigger: ".o_bank_rec_selected_st_line:contains('line2'):has(div.badge[title='Matched'] i):has(span.badge:contains('To check'))",
            trigger: "div[name='line_ids']:not(:has(.fa-trash-o))+.o_notebook a.active[name='discuss_tab']",
            run: () => {},
        },
        {
            content: "Switch to list view",
            extra_trigger: ".o_switch_view.o_kanban.active",
            trigger: ".o_switch_view.o_list",
        },
        {
            content: "Remove the line filter",
            extra_trigger: ".o_switch_view.o_list.active",
            trigger: ".o_searchview_facet:contains('0002') .o_facet_remove",
        },
        {
            content: "Select the first Match Button (line3)",
            extra_trigger: ".o_data_row:contains('line2'):has(.btn-secondary:contains('View'))",
            trigger: ".btn-secondary:contains('Match')",
        },
        {
            content: "Open search bar menu",
            extra_trigger: ".o_bank_rec_stats_buttons",
            trigger: ".o_searchview_dropdown_toggler:nth(0)",
        },
        // Test Reco Model
        {
            content: "Choose a filter",
            extra_trigger: ".o_cp_searchview .o-dropdown--menu.o_search_bar_menu",
            trigger: ".o_filter_menu:first() i",
        },
        {
            content: "Not Matched Filter",
            extra_trigger: ".o-dropdown--menu",
            trigger: ".dropdown-item:contains('Not Matched')",
        },
        {
            content: "reco model dropdown",
            extra_trigger: ".o_switch_view.o_kanban.active",
            trigger: ".bank_rec_reco_model_dropdown i",
        },
        {
            content: "create model",
            extra_trigger: ".o-dropdown--menu",
            trigger: ".dropdown-item:contains('Create model')",
        },
        {
            content: "model name",
            trigger: "input#name_0",
            run: "text Bank Fees",
        },
        {
            content: "add an account",
            trigger: "a:contains('Add a line')",
        },
        {
            content: "search for bank fees account",
            trigger: "[name='account_id'] input",
            run: "text Bank Fees"
        },
        {
            content: "select the bank fees account",
            extra_trigger: ".o-autocomplete--dropdown-menu",
            trigger: ".o-autocomplete--dropdown-item:contains('Bank Fees')",
        },
        {
            content: "Breadcrumb back to Bank Reconciliation from the model",
            extra_trigger: ".o_breadcrumb .active > span:contains('New')",
            trigger: ".breadcrumb-item:contains('Bank Reconciliation')",
        },
        {
            content: "Choose Bank Fees Model",
            trigger: ".recon_model_button:contains('Bank Fees')",
        },
        {
            content: "Validate line3",
            trigger: "button:contains('Validate').btn-primary",
            run: "dblclick",
        },
        {
            content: "Remove the kanbans 'not matched' filter to reset all lines - use the rainbow man button",
            extra_trigger: ".o_reward_rainbow_man",
            trigger: "p.btn-primary:contains('All Transactions')",
        },
        {
            content: "Wait for search model change and line3 to appear",
            extra_trigger: ".o_kanban_view .o_searchview:first() .o_searchview_facet:last():contains('Bank')",
            trigger: ".o_bank_rec_st_line:last():contains('line3')",
            run: () => {},
        },
        {
            content: "'line2' should be selected, reset it",
            extra_trigger: ".o_bank_rec_selected_st_line:contains('line2')",
            trigger: "button:contains('Reset')"
        },
        {
            content: "select matched 'line3'",
            extra_trigger: ".o_bank_rec_st_line:contains('line2'):not(:has(div.badge))",
            trigger: ".o_bank_rec_st_line:contains('line3')",
        },
        {
            content: "'line3' should be selected, reset it",
            extra_trigger: ".o_bank_rec_selected_st_line:contains('line3')",
            trigger: "button:contains('Reset')"
        },
        {
            content: "select matched 'line1'",
            extra_trigger: ".o_bank_rec_st_line:contains('line3'):not(:has(div.badge))",
            trigger: ".o_bank_rec_st_line:contains('line1')",
        },
        {
            content: "'line1' should be selected, reset it",
            extra_trigger: ".o_bank_rec_selected_st_line:contains('line1')",
            trigger: "button:contains('Reset')"
        },
        {
            content: "Open search bar menu",
            extra_trigger: ".o_bank_rec_stats_buttons",
            trigger: ".o_searchview_dropdown_toggler:nth(0)",
        },
        {
            content: "Filter Menu",
            extra_trigger: "button:contains('Validate')",
            trigger: ".o_filter_menu:first() i",
        },
        {
            content: "Activate the Not Matched filter",
            extra_trigger: ".o-dropdown--menu",
            trigger: ".dropdown-item:contains('Not Matched')",
        },
        {
            content: "Close the Filter Menu",
            extra_trigger: ".o_searchview_facet:contains('Not Matched')",
            trigger: ".o_searchview_dropdown_toggler:nth(0)",
        },
        {
            content: "select 'line2'",
            extra_trigger: ".o_searchview_facet:contains('Not Matched')",
            trigger: ".o_bank_rec_st_line:contains('line2')",
        },
        {
            content: "Validate 'line2' again",
            extra_trigger: ".o_bank_rec_selected_st_line:contains('line2')",
            trigger: "button:contains('Validate')"
        },
        {
            content: "'line3' should be selected now",
            extra_trigger: ".o_bank_rec_selected_st_line:contains('line3')",
            trigger: ".o_bank_rec_selected_st_line:contains('line3')",
            run: () => {},
        },
        // Test the Balance when changing journal and liquidity line
        stepUtils.toggleHomeMenu(),
        ...stepUtils.goToAppSteps(
            'account_accountant.menu_accounting',
            "Reset back to accounting module"
        ),
        {
            content: "Open the bank reconciliation widget for Bank2",
            extra_trigger: ".o_breadcrumb",
            trigger: "button.btn-primary[name='action_open_reconcile']:last()",
        },
        {
            content: "Remove the kanbans 'not matched' filter",
            trigger: ".o_kanban_view .o_searchview_facet:nth-child(2) .o_facet_remove",
        },
        {
            content: "Remove the kanban 'journal' filter",
            trigger: ".o_kanban_view .o_searchview_facet:nth-child(1) .o_facet_remove",
        },
        {
            content: "select 'line1' from another journal",
            trigger: ".o_bank_rec_st_line:contains('line1')",
        },
        {
            content: "balance is 3000",
            extra_trigger: ".o_bank_rec_selected_st_line:contains('line1')",
            trigger: ".btn-link:contains('$ 3,000.00')",
        },
        {
            content: "Breadcrumb back to Bank Reconciliation from the report",
            extra_trigger: "span:contains('General Ledger')",
            trigger: ".breadcrumb-item a:contains('Bank Reconciliation')",
            allowInvisible: true,
        },
        {
            content: "select 'line4' from this journal",
            trigger: ".o_bank_rec_st_line:contains('line4')",
        },
        {
            content: "balance is $222.22",
            extra_trigger: ".o_bank_rec_selected_st_line:contains('line4')",
            trigger: ".btn-link:contains('$ 222.22')",
            run: () => {},
        },
        {
            content: "Select the liquidity line",
            trigger: "tr.o_bank_rec_liquidity_line td[field='debit']",
        },
        {
            content: "Modify the liquidity line amount",
            extra_trigger: "div[name='balance'] input:focus",
            trigger: "div[name='balance'] input",
            run: "text -333.33",
        },
        {
            content: "balance displays $-333.33",
            extra_trigger: ".btn-link:contains('$ -333.33')",
            trigger: ".btn-link:contains('$ -333.33')",
            run: () => {},
        },
        {
            content: "Modify the label",
            trigger: "div[name='name'] input",
            run: "text Spontaneous Combustion",
        },
        {
            content: "statement line displays combustion and $-333.33",
            extra_trigger: ".o_bank_rec_selected_st_line:contains('Combustion'):contains('$ -333.33')",
            trigger: ".o_bank_rec_selected_st_line:contains('Combustion'):contains('$ -333.33')",
            run: () => {},
        },
        // End
        stepUtils.toggleHomeMenu(),
        ...stepUtils.goToAppSteps(
            'account_accountant.menu_accounting',
            "Reset back to accounting module"
        ),
        {
            content: "check that we're back on the dashboard",
            trigger: 'a:contains("Customer Invoices")',
            run() {},
        }
    ]
});

return __exports;
});
;

/**********************************************************************************
*  Filepath: /account_accountant/static/tests/tours/test_tour_bank_rec_widget.js  *
*  Lines: 188                                                                     *
**********************************************************************************/
odoo.define('@account_accountant/../tests/tours/test_tour_bank_rec_widget', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");


registry.category("web_tour.tours").add('account_accountant_bank_rec_widget',
    {
        test: true,
        url: '/web',
        steps: () => [
        stepUtils.showAppsMenuItem(),
        ...stepUtils.goToAppSteps('account_accountant.menu_accounting', "Open the accounting module"),

        // Open the widget. The first line should be selected by default.
        {
            content: "Open the bank reconciliation widget",
            extra_trigger: ".o_breadcrumb",
            trigger: "button.btn-primary[name='action_open_reconcile']",
        },
        {
            content: "The 'line1' should be selected by default",
            extra_trigger: "div[name='line_ids']",
            trigger: "div[name='line_ids'] td[field='name']:contains('line1')",
            run: function() {},
        },

        // Test 1: Check the loading of lazy notebook tabs.
        // Check 'amls_tab' (active by default).
        {
            content: "The 'amls_tab' should be active and the inner list view loaded",
            extra_trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table",
            trigger: "a.active[name='amls_tab']",
            run: function() {},
        },
        // Check 'discuss_tab'.
        {
            content: "Click on the 'discuss_tab'",
            extra_trigger: "a.active[name='amls_tab']",
            trigger: "a[name='discuss_tab']",
        },
        {
            content: "The 'discuss_tab' should be active and the chatter loaded",
            extra_trigger: "a.active[name='discuss_tab']",
            trigger: "div.bank_rec_widget_form_discuss_anchor div.o-mail-Chatter",
            run: function() {},
        },
        // Check 'manual_operations_tab'.
        {
            content: "Click on the 'auto_balance' to make the 'manual_operations_tab' visible",
            extra_trigger: "tr.o_bank_rec_auto_balance_line",
            trigger: "tr.o_bank_rec_auto_balance_line td[field='name']",
        },
        {
            content: "The 'manual_operations_tab' should be active",
            trigger: "a.active[name='manual_operations_tab']",
            run: function() {},
        },
        {
            content: "The 'name' field should be focus automatically",
            trigger: "div.o_notebook div[name='name'] input:focus",
            run: function() {},
        },
        {
            content: "Click on the 'credit' field to change the focus from 'name' to 'balance'",
            extra_trigger: "tr.o_bank_rec_auto_balance_line",
            trigger: "tr.o_bank_rec_auto_balance_line td[field='credit']",
        },
        {
            content: "Wait to avoid non-deterministic errors on the next step",
            trigger: "tr.o_bank_rec_auto_balance_line td[field='credit']",
            run: function() {},
        },
        {
            content: "The 'balance' field should be focus now",
            trigger: "div.o_notebook div[name='balance'] input:focus",
            run: function() {},
        },

        // Test 2: Test validation + auto select the next line.
        {
            content: "Click on the 'amls_tab'",
            extra_trigger: "a.active[name='manual_operations_tab']",
            trigger: "a[name='amls_tab']",
        },
        {
            content: "Mount INV/2019/00002",
            extra_trigger: "a.active[name='amls_tab']",
            trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table td[name='move_id']:contains('INV/2019/00002')",
        },
        {
            content: "Check INV/2019/00002 is well marked as selected",
            extra_trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table tr.o_rec_widget_list_selected_item td[name='move_id']:contains('INV/2019/00002')",
            trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table tr.o_rec_widget_list_selected_item td[name='move_id']:contains('INV/2019/00002')",
            run: function() {},
        },
        {
            content: "Remove INV/2019/00002",
            extra_trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table tr.o_rec_widget_list_selected_item td[name='move_id']:contains('INV/2019/00002')",
            trigger: "tr td.o_list_record_remove button",
        },
        {
            content: "Mount INV/2019/00001",
            extra_trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table tr:not(.o_rec_widget_list_selected_item) td[name='move_id']:contains('INV/2019/00002')",
            trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table td[name='move_id']:contains('INV/2019/00001')",
        },
        {
            content: "Validate",
            extra_trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table tr.o_rec_widget_list_selected_item td[name='move_id']:contains('INV/2019/00001')",
            trigger: "button:contains('Validate')",
        },
        {
            content: "The 'line2' is the next not already reconciled line",
            extra_trigger: "div[name='line_ids'] td[field='name']:contains('line2')",
            trigger: "div[name='line_ids'] td[field='name']:contains('line2')",
            run: function() {},
        },

        // Test 3: Test manual operations tab.
        {
            content: "Click on 'credit'",
            trigger: "div[name='line_ids'] td[field='credit']:last",
        },
        {
            content: "The 'manual_operations_tab' should be active now and the auto_balance line mounted in edit",
            trigger: "a.active[name='manual_operations_tab']",
            run: function() {},
        },
        {
            content: "The last line should be selected",
            trigger: "div[name='line_ids'] tr.o_bank_rec_selected_line",
            run: function() {},
        },
        {
            content: "Search for 'partner_a'",
            trigger: "div[name='partner_id'] input",
            run: "text partner_a",
        },
        {
            content: "Select 'partner_a'",
            extra_trigger: ".ui-autocomplete .o_m2o_dropdown_option a:contains('Create')",
            trigger: ".ui-autocomplete:visible li:contains('partner_a')",
        },
        {
            content: "Select the payable account",
            extra_trigger: "tr:not(.o_bank_rec_auto_balance_line) td[field='partner_id']:contains('partner_a')",
            trigger: "button:contains('Payable')",
        },
        {
            content: "Enter a tax",
            extra_trigger: "tr:not(.o_bank_rec_auto_balance_line) td[field='account_id']:contains('Payable')",
            trigger: "div[name='tax_ids'] input",
            run: "text 15",
        },
        {
            content: "Select 'Tax 15% (Sales)'",
            extra_trigger: ".ui-autocomplete",
            trigger: ".ui-autocomplete:visible li:contains('Sales')",
        },
        {
            content: "Validate",
            extra_trigger: "div[name='line_ids'] td[field='tax_ids']",
            trigger: "button:contains('Validate')",
        },
        {
            content: "The 'line3' is the next not already reconciled line",
            extra_trigger: "div[name='line_ids'] td[field='name']:contains('line3')",
            trigger: "div[name='line_ids'] td[field='name']:contains('line3')",
            run: function() {},
        },
        stepUtils.toggleHomeMenu(),
        ...stepUtils.goToAppSteps(
            'account_accountant.menu_accounting',
            "Reset back to accounting module"
        ),
        {
            content: "check that we're back on the dashboard",
            trigger: 'a:contains("Customer Invoices")',
            run() {}
        }
    ]
});

return __exports;
});
;

/************************************************************************
*  Filepath: /point_of_sale/static/tests/tours/BarcodeScanning.tour.js  *
*  Lines: 105                                                           *
************************************************************************/
odoo.define('@point_of_sale/../tests/tours/BarcodeScanning.tour', ['@point_of_sale/../tests/tours/helpers/ProductScreenTourMethods', '@point_of_sale/../tests/tours/helpers/utils', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { ProductScreen } = require("@point_of_sale/../tests/tours/helpers/ProductScreenTourMethods");
const { getSteps, startSteps } = require("@point_of_sale/../tests/tours/helpers/utils");
const { registry } = require("@web/core/registry");

registry
    .category("web_tour.tours")
    .add("BarcodeScanningTour", {
        test: true,
        url: "/pos/ui",
        steps: () => {
            startSteps();

            // The following step is to make sure that the Chrome widget initialization ends
            // If we try to use the barcode parser before its initiation, we will have
            // some inconsistent JS errors:
            // TypeError: Cannot read properties of undefined (reading 'parse_barcode')
            ProductScreen.do.confirmOpeningPopup();

            // Add a product with its barcode
            ProductScreen.do.scan_barcode("0123456789");
            ProductScreen.check.selectedOrderlineHas('Monitor Stand');
            ProductScreen.do.scan_barcode("0123456789");
            ProductScreen.check.selectedOrderlineHas('Monitor Stand', 2);

            // Test "Prices product" EAN-13 `23.....{NNNDD}` barcode pattern
            ProductScreen.do.scan_ean13_barcode("2305000000004");
            ProductScreen.check.selectedOrderlineHas('Magnetic Board', 1, "0.00");
            ProductScreen.do.scan_ean13_barcode("2305000123451");
            ProductScreen.check.selectedOrderlineHas('Magnetic Board', 1, "123.45");

            // Test "Weighted product" EAN-13 `21.....{NNDDD}` barcode pattern
            ProductScreen.do.scan_ean13_barcode("2100005000000");
            ProductScreen.check.selectedOrderlineHas('Wall Shelf Unit', 0, "0.00");
            ProductScreen.do.scan_ean13_barcode("2100005080002");
            ProductScreen.check.selectedOrderlineHas('Wall Shelf Unit', 8);

            return getSteps();
        }
    });

registry
    .category("web_tour.tours")
    .add("BarcodeScanningProductPackagingTour", {
        test: true,
        url: "/pos/ui",
        steps: () => {
            startSteps();

            ProductScreen.do.confirmOpeningPopup();

            // Add the product with its barcode
            ProductScreen.do.scan_barcode('12345601');
            ProductScreen.check.selectedOrderlineHas('Packaging Product', 1);
            ProductScreen.do.scan_barcode('12345601');
            ProductScreen.check.selectedOrderlineHas('Packaging Product', 2);

            // Add the product packaging with its barcode
            ProductScreen.do.scan_barcode('12345610');
            ProductScreen.check.selectedOrderlineHas('Packaging Product', 12);
            ProductScreen.do.scan_barcode('12345610');
            ProductScreen.check.selectedOrderlineHas('Packaging Product', 22);

            return getSteps();
        }
    });

registry
    .category("web_tour.tours")
    .add("GS1BarcodeScanningTour", {
        test: true,
        url: "/pos/ui",
        steps: () => {
            startSteps();

            ProductScreen.do.confirmOpeningPopup();

            // Add the Product 1 with GS1 barcode
            ProductScreen.do.scan_barcode("0108431673020125100000001");
            ProductScreen.check.selectedOrderlineHas('Product 1');
            ProductScreen.do.scan_barcode("0108431673020125100000001");
            ProductScreen.check.selectedOrderlineHas('Product 1', 2);

            // Add the Product 2 with normal barcode
            ProductScreen.do.scan_barcode("08431673020126");
            ProductScreen.check.selectedOrderlineHas('Product 2');
            ProductScreen.do.scan_barcode("08431673020126");
            ProductScreen.check.selectedOrderlineHas('Product 2', 2);

            // Add the Product 3 with normal barcode
            ProductScreen.do.scan_barcode("3760171283370");
            ProductScreen.check.selectedOrderlineHas('Product 3');
            ProductScreen.do.scan_barcode("3760171283370");
            ProductScreen.check.selectedOrderlineHas('Product 3', 2);

            return getSteps();
        }
    });

return __exports;
});
;

/***************************************************************
*  Filepath: /point_of_sale/static/tests/tours/Chrome.tour.js  *
*  Lines: 127                                                  *
***************************************************************/
odoo.define('@point_of_sale/../tests/tours/Chrome.tour', ['@point_of_sale/../tests/tours/helpers/ProductScreenTourMethods', '@point_of_sale/../tests/tours/helpers/ReceiptScreenTourMethods', '@point_of_sale/../tests/tours/helpers/PaymentScreenTourMethods', '@point_of_sale/../tests/tours/helpers/TicketScreenTourMethods', '@point_of_sale/../tests/tours/helpers/ChromeTourMethods', '@point_of_sale/../tests/tours/helpers/utils', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { ProductScreen } = require("@point_of_sale/../tests/tours/helpers/ProductScreenTourMethods");
const { ReceiptScreen } = require("@point_of_sale/../tests/tours/helpers/ReceiptScreenTourMethods");
const { PaymentScreen } = require("@point_of_sale/../tests/tours/helpers/PaymentScreenTourMethods");
const { TicketScreen } = require("@point_of_sale/../tests/tours/helpers/TicketScreenTourMethods");
const { Chrome } = require("@point_of_sale/../tests/tours/helpers/ChromeTourMethods");
const { getSteps, startSteps } = require("@point_of_sale/../tests/tours/helpers/utils");
const { registry } = require("@web/core/registry");

registry
    .category("web_tour.tours")
    .add("ChromeTour", { 
        test: true, 
        url: "/pos/ui", 
        steps: () => {
            startSteps();

            ProductScreen.do.confirmOpeningPopup();
            Chrome.do.clickMenuButton();
            Chrome.check.isCashMoveButtonShown();
            Chrome.do.clickMenuButton();

            // Order 1 is at Product Screen
            ProductScreen.do.clickHomeCategory();
            ProductScreen.exec.addOrderline("Desk Pad", "1", "2", "2.0");
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.check.checkStatus("-0001", "Ongoing");
            
            // Order 2 is at Payment Screen
            TicketScreen.do.clickNewTicket();
            ProductScreen.exec.addOrderline("Monitor Stand", "3", "4", "12.0");
            ProductScreen.do.clickPayButton();
            PaymentScreen.check.isShown();
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.check.checkStatus("-0002", "Payment");
            
            // Order 3 is at Receipt Screen
            TicketScreen.do.clickNewTicket();
            ProductScreen.exec.addOrderline("Whiteboard Pen", "5", "6", "30.0");
            ProductScreen.do.clickPayButton();
            PaymentScreen.do.clickPaymentMethod("Bank");
            PaymentScreen.check.remainingIs("0.0");
            PaymentScreen.check.validateButtonIsHighlighted(true);
            PaymentScreen.do.clickValidate();
            ReceiptScreen.check.isShown();
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.check.checkStatus("-0003", "Receipt");
            
            // Select order 1, should be at Product Screen
            TicketScreen.do.selectOrder("-0001");
            ProductScreen.check.productIsDisplayed("Desk Pad");
            ProductScreen.check.selectedOrderlineHas("Desk Pad", "1.0", "2.0");
            
            // Select order 2, should be at Payment Screen
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.do.selectOrder("-0002");
            PaymentScreen.check.emptyPaymentlines("12.0");
            PaymentScreen.check.validateButtonIsHighlighted(false);
            
            // Select order 3, should be at Receipt Screen
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.do.selectOrder("-0003");
            ReceiptScreen.check.totalAmountContains("30.0");
            
            // Pay order 1, with change
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.do.selectOrder("-0001");
            ProductScreen.check.isShown();
            ProductScreen.do.clickPayButton();
            PaymentScreen.do.clickPaymentMethod("Cash");
            PaymentScreen.do.enterPaymentLineAmount("Cash", "20");
            PaymentScreen.check.remainingIs("0.0");
            PaymentScreen.check.validateButtonIsHighlighted(true);
            PaymentScreen.do.clickValidate();
            ReceiptScreen.check.totalAmountContains("2.0");
            
            // Order 1 now should have Receipt status
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.check.checkStatus("-0001", "Receipt");
            
            // Select order 3, should still be at Receipt Screen
            // and the total amount doesn't change.
            TicketScreen.do.selectOrder("-0003");
            ReceiptScreen.check.totalAmountContains("30.0");
            
            // click next screen on order 3
            // then delete the new empty order
            ReceiptScreen.do.clickNextOrder();
            ProductScreen.check.orderIsEmpty();
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.do.deleteOrder("-0004");
            TicketScreen.do.deleteOrder("-0001");
            
            // After deleting order 1 above, order 2 became
            // the 2nd-row order and it has payment status
            TicketScreen.check.nthRowContains(2, "Payment");
            TicketScreen.do.deleteOrder("-0002");
            Chrome.do.confirmPopup();
            TicketScreen.do.clickNewTicket();
            
            // Invoice an order
            ProductScreen.exec.addOrderline("Whiteboard Pen", "5", "6");
            ProductScreen.do.clickPartnerButton();
            ProductScreen.do.clickCustomer("Nicole Ford");
            ProductScreen.do.clickPayButton();
            PaymentScreen.do.clickPaymentMethod("Bank");
            PaymentScreen.do.clickInvoiceButton();
            PaymentScreen.do.clickValidate();
            ReceiptScreen.check.isShown();
            return getSteps(); 
        } 
    });

return __exports;
});
;

/****************************************************************************************
*  Filepath: /point_of_sale/static/tests/tours/ChromeWithoutCashMovePermission.tour.js  *
*  Lines: 26                                                                            *
****************************************************************************************/
odoo.define('@point_of_sale/../tests/tours/ChromeWithoutCashMovePermission.tour', ['@point_of_sale/../tests/tours/helpers/ChromeTourMethods', '@point_of_sale/../tests/tours/helpers/ProductScreenTourMethods', '@point_of_sale/../tests/tours/helpers/utils', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { Chrome } = require("@point_of_sale/../tests/tours/helpers/ChromeTourMethods");
const { ProductScreen } = require("@point_of_sale/../tests/tours/helpers/ProductScreenTourMethods");
const { getSteps, startSteps } = require("@point_of_sale/../tests/tours/helpers/utils");
const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add("chrome_without_cash_move_permission", {
    test: true,
    url: "/pos/ui",
    steps: () => {
        startSteps();

        ProductScreen.do.confirmOpeningPopup();
        Chrome.do.clickMenuButton();
        Chrome.check.isCashMoveButtonHidden();

        return getSteps();
    },
});

return __exports;
});
;

/******************************************************************************
*  Filepath: /point_of_sale/static/tests/tours/FixedPriceNegativeQty.tour.js  *
*  Lines: 39                                                                  *
******************************************************************************/
odoo.define('@point_of_sale/../tests/tours/FixedPriceNegativeQty.tour', ['@point_of_sale/../tests/tours/helpers/ProductScreenTourMethods', '@point_of_sale/../tests/tours/helpers/PaymentScreenTourMethods', '@point_of_sale/../tests/tours/helpers/ReceiptScreenTourMethods', '@point_of_sale/../tests/tours/helpers/utils', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { ProductScreen } = require("@point_of_sale/../tests/tours/helpers/ProductScreenTourMethods");
const { PaymentScreen } = require("@point_of_sale/../tests/tours/helpers/PaymentScreenTourMethods");
const { ReceiptScreen } = require("@point_of_sale/../tests/tours/helpers/ReceiptScreenTourMethods");
const { getSteps, startSteps } = require("@point_of_sale/../tests/tours/helpers/utils");
const { registry } = require("@web/core/registry");


registry
.category("web_tour.tours")
.add("FixedTaxNegativeQty", { 
    test: true, 
    url: "/pos/ui", 
    steps: () => {
        startSteps();
        
        ProductScreen.do.clickHomeCategory();
        
        ProductScreen.do.clickDisplayedProduct("Zero Amount Product");
        ProductScreen.check.selectedOrderlineHas("Zero Amount Product", "1.0", "1.0");
        ProductScreen.do.pressNumpad("+/- 1");
        ProductScreen.check.selectedOrderlineHas("Zero Amount Product", "-1.0", "-1.0");
        
        ProductScreen.do.clickPayButton();
        PaymentScreen.do.clickPaymentMethod("Bank");
        PaymentScreen.check.remainingIs("0.00");
        PaymentScreen.do.clickValidate();
        
        ReceiptScreen.check.receiptIsThere();
        return getSteps(); 
    } 
});

return __exports;
});
;

/**********************************************************************
*  Filepath: /point_of_sale/static/tests/tours/PaymentScreen.tour.js  *
*  Lines: 318                                                         *
**********************************************************************/
odoo.define('@point_of_sale/../tests/tours/PaymentScreen.tour', ['@point_of_sale/../tests/tours/helpers/ChromeTourMethods', '@point_of_sale/../tests/tours/helpers/ProductScreenTourMethods', '@point_of_sale/../tests/tours/helpers/PaymentScreenTourMethods', '@point_of_sale/../tests/tours/helpers/TicketScreenTourMethods', '@point_of_sale/../tests/tours/helpers/ReceiptScreenTourMethods', '@point_of_sale/../tests/tours/helpers/utils', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { Chrome } = require("@point_of_sale/../tests/tours/helpers/ChromeTourMethods");
const { ProductScreen } = require("@point_of_sale/../tests/tours/helpers/ProductScreenTourMethods");
const { PaymentScreen } = require("@point_of_sale/../tests/tours/helpers/PaymentScreenTourMethods");
const { TicketScreen } = require("@point_of_sale/../tests/tours/helpers/TicketScreenTourMethods");
const { ReceiptScreen } = require("@point_of_sale/../tests/tours/helpers/ReceiptScreenTourMethods");
const { getSteps, startSteps } = require("@point_of_sale/../tests/tours/helpers/utils");
const { registry } = require("@web/core/registry");

registry
    .category("web_tour.tours")
    .add("PaymentScreenTour", { 
        test: true, 
        url: "/pos/ui", 
        steps: () => {
            startSteps();
            
            ProductScreen.exec.addOrderline("Letter Tray", "10");
            ProductScreen.check.selectedOrderlineHas("Letter Tray", "10.0");
            ProductScreen.do.clickPayButton();
            PaymentScreen.check.emptyPaymentlines("52.8");
            
            PaymentScreen.do.clickPaymentMethod("Cash");
            PaymentScreen.do.enterPaymentLineAmount("Cash", "11");
            PaymentScreen.check.selectedPaymentlineHas("Cash", "11.00");
            PaymentScreen.check.remainingIs("41.8");
            PaymentScreen.check.changeIs("0.0");
            PaymentScreen.check.validateButtonIsHighlighted(false);
            // remove the selected paymentline with multiple backspace presses
            PaymentScreen.do.pressNumpad("Backspace Backspace");
            PaymentScreen.do.fillPaymentLineAmountMobile("Cash", "0");
            PaymentScreen.check.selectedPaymentlineHas("Cash", "0.00");
            PaymentScreen.do.clickPaymentlineDelButton("Cash", "0", true);
            PaymentScreen.check.emptyPaymentlines("52.8");
            
            // Pay with bank, the selected line should have full amount
            PaymentScreen.do.clickPaymentMethod("Bank");
            PaymentScreen.check.remainingIs("0.0");
            PaymentScreen.check.changeIs("0.0");
            PaymentScreen.check.validateButtonIsHighlighted(true);
            // remove the line using the delete button
            PaymentScreen.do.clickPaymentlineDelButton("Bank", "52.8");
            
            // Use +10 and +50 to increment the amount of the paymentline
            PaymentScreen.do.clickPaymentMethod("Cash");
            PaymentScreen.do.pressNumpad("+10");
            PaymentScreen.do.fillPaymentLineAmountMobile("Cash", "10");
            PaymentScreen.check.remainingIs("42.8");
            PaymentScreen.check.changeIs("0.0");
            PaymentScreen.check.validateButtonIsHighlighted(false);
            PaymentScreen.do.pressNumpad("+50");
            PaymentScreen.do.fillPaymentLineAmountMobile("Cash", "60");
            PaymentScreen.check.remainingIs("0.0");
            PaymentScreen.check.changeIs("7.2");
            PaymentScreen.check.validateButtonIsHighlighted(true);
            PaymentScreen.do.clickPaymentlineDelButton("Cash", "60.0");
            
            // Multiple paymentlines
            PaymentScreen.do.clickPaymentMethod("Cash");
            PaymentScreen.do.pressNumpad("1");
            PaymentScreen.do.fillPaymentLineAmountMobile("Cash", "1");
            PaymentScreen.check.remainingIs("51.8");
            PaymentScreen.check.changeIs("0.0");
            PaymentScreen.check.validateButtonIsHighlighted(false);
            PaymentScreen.do.clickPaymentMethod("Bank");
            PaymentScreen.do.fillPaymentLineAmountMobile("Bank", "5");
            PaymentScreen.do.pressNumpad("5");
            PaymentScreen.check.remainingIs("46.8");
            PaymentScreen.check.changeIs("0.0");
            PaymentScreen.check.validateButtonIsHighlighted(false);
            PaymentScreen.do.clickPaymentMethod("Bank");
            PaymentScreen.check.remainingIs("0.0");
            PaymentScreen.check.changeIs("0.0");
            PaymentScreen.check.validateButtonIsHighlighted(true);

            return getSteps(); 
        } 
    });

    
registry
    .category("web_tour.tours")
    .add("PaymentScreenTour2", { 
        test: true, 
        url: "/pos/ui", 
        steps: () => {
            startSteps();
            
            ProductScreen.do.clickHomeCategory();
            ProductScreen.exec.addOrderline("Letter Tray", "1", "10");
            ProductScreen.do.clickPayButton();
            
            PaymentScreen.do.clickPaymentMethod("Bank");
            PaymentScreen.do.enterPaymentLineAmount("Bank", "1000");
            
            PaymentScreen.check.remainingIs("0.0");
            PaymentScreen.check.changeIs("0.0");
            return getSteps();
        } 
    });

registry
    .category("web_tour.tours")
    .add("PaymentScreenRoundingUp", { 
        test: true, 
        url: "/pos/ui", 
        steps: () => {
            startSteps();
            
            ProductScreen.do.clickHomeCategory();
            ProductScreen.exec.addOrderline("Product Test", "1");
            ProductScreen.do.clickPayButton();
            
            PaymentScreen.check.totalIs("2.00");
            PaymentScreen.do.clickPaymentMethod("Cash");
            
            PaymentScreen.check.remainingIs("0.0");
            PaymentScreen.check.changeIs("0.0");
            
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.do.clickNewTicket();
            
            ProductScreen.exec.addOrderline("Product Test", "-1");
            ProductScreen.do.clickPayButton();
            
            PaymentScreen.check.totalIs("-2.00");
            PaymentScreen.do.clickPaymentMethod("Cash");
            
            PaymentScreen.check.remainingIs("0.0");
            PaymentScreen.check.changeIs("0.0");
            return getSteps();
        } 
    });
    
registry
    .category("web_tour.tours")
    .add("PaymentScreenRoundingDown", { 
        test: true, 
        url: "/pos/ui", 
        steps: () => {
            startSteps();
            
            ProductScreen.do.clickHomeCategory();
            ProductScreen.exec.addOrderline("Product Test", "1");
            ProductScreen.do.clickPayButton();
            
            PaymentScreen.check.totalIs("1.95");
            PaymentScreen.do.clickPaymentMethod("Cash");
            
            PaymentScreen.check.remainingIs("0.0");
            PaymentScreen.check.changeIs("0.0");
            
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.do.clickNewTicket();
            
            ProductScreen.exec.addOrderline("Product Test", "-1");
            ProductScreen.do.clickPayButton();
            
            PaymentScreen.check.totalIs("-1.95");
            PaymentScreen.do.clickPaymentMethod("Cash");
            
            PaymentScreen.check.remainingIs("0.0");
            PaymentScreen.check.changeIs("0.0");

            return getSteps(); 
        }
    });

    
registry
    .category("web_tour.tours")
    .add("PaymentScreenRoundingHalfUp", { 
        test: true, 
        url: "/pos/ui", 
        steps: () => {
            startSteps();
            
            ProductScreen.do.confirmOpeningPopup();
            ProductScreen.do.clickHomeCategory();
            ProductScreen.exec.addOrderline("Product Test 1.2", "1");
            ProductScreen.do.clickPayButton();
            
            PaymentScreen.check.totalIs("1.00");
            PaymentScreen.do.clickPaymentMethod("Cash");
            
            PaymentScreen.check.remainingIs("0.0");
            PaymentScreen.check.changeIs("0.0");
            
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.do.clickNewTicket();
            
            ProductScreen.exec.addOrderline("Product Test 1.25", "1");
            ProductScreen.do.clickPayButton();
            
            PaymentScreen.check.totalIs("1.5");
            PaymentScreen.do.clickPaymentMethod("Cash");
            
            PaymentScreen.check.remainingIs("0.0");
            PaymentScreen.check.changeIs("0.0");
            
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.do.clickNewTicket();
            
            ProductScreen.exec.addOrderline("Product Test 1.4", "1");
            ProductScreen.do.clickPayButton();
            
            PaymentScreen.check.totalIs("1.5");
            PaymentScreen.do.clickPaymentMethod("Cash");
            
            PaymentScreen.check.remainingIs("0.0");
            PaymentScreen.check.changeIs("0.0");
            
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.do.clickNewTicket();
            
            ProductScreen.exec.addOrderline("Product Test 1.2", "1");
            ProductScreen.do.clickPayButton();
            
            PaymentScreen.check.totalIs("1.00");
            PaymentScreen.do.clickPaymentMethod("Cash");
            PaymentScreen.do.pressNumpad("2");
            PaymentScreen.do.fillPaymentLineAmountMobile("Cash", "2");
            
            PaymentScreen.check.remainingIs("0.0");
            PaymentScreen.check.changeIs("1.0");
            return getSteps(); 
        }
    });

    
registry
    .category("web_tour.tours")
    .add("PaymentScreenRoundingHalfUpCashAndBank", {
        test: true,
        url: "/pos/ui",
        steps: () => {
            startSteps();
            
            ProductScreen.do.confirmOpeningPopup();
            ProductScreen.do.clickHomeCategory();
            ProductScreen.exec.addOrderline("Product Test 40", "1");
            ProductScreen.do.clickPartnerButton();
            ProductScreen.do.clickCustomer("Nicole Ford");
            ProductScreen.do.clickPayButton();
            
            PaymentScreen.check.totalIs("40.00");
            PaymentScreen.do.clickPaymentMethod("Bank");
            PaymentScreen.do.pressNumpad("3 8");
            PaymentScreen.do.fillPaymentLineAmountMobile("Bank", "38");
            PaymentScreen.check.remainingIs("2.0");
            PaymentScreen.do.clickPaymentMethod("Cash");
            
            PaymentScreen.check.remainingIs("0.0");
            PaymentScreen.check.changeIs("0.0");
            
            PaymentScreen.do.clickInvoiceButton();
            PaymentScreen.do.clickValidate();
            ReceiptScreen.check.receiptIsThere();
            ReceiptScreen.do.clickNextOrder();
            
            ProductScreen.do.clickHomeCategory();
            ProductScreen.exec.addOrderline("Product Test 41", "1");
            ProductScreen.do.clickPartnerButton();
            ProductScreen.do.clickCustomer("Nicole Ford");
            ProductScreen.do.clickPayButton();
            
            PaymentScreen.check.totalIs("41.00");
            PaymentScreen.do.clickPaymentMethod("Bank");
            PaymentScreen.do.pressNumpad("3 8");
            PaymentScreen.do.fillPaymentLineAmountMobile("Bank", "38");
            PaymentScreen.check.remainingIs("3.0");
            PaymentScreen.do.clickPaymentMethod("Cash");
            
            PaymentScreen.check.remainingIs("0.0");
            PaymentScreen.check.changeIs("0.0");
            
            PaymentScreen.do.clickInvoiceButton();
            PaymentScreen.do.clickValidate();
            ReceiptScreen.check.receiptIsThere();
            return getSteps();
        }
    });
    
registry
    .category("web_tour.tours")
    .add("PaymentScreenTotalDueWithOverPayment", { 
        test: true, 
        url: "/pos/ui", 
        steps: () => {
            
            startSteps();
            
            ProductScreen.do.confirmOpeningPopup();
            ProductScreen.do.clickHomeCategory();
            ProductScreen.exec.addOrderline("Product Test", "1");
            ProductScreen.do.clickPayButton();
            
            PaymentScreen.check.totalIs("1.95");
            PaymentScreen.do.clickPaymentMethod("Cash");
            PaymentScreen.do.enterPaymentLineAmount("Cash", "5");
            PaymentScreen.check.remainingIs("0.0");
            PaymentScreen.check.changeIs("3.05");
            PaymentScreen.check.totalDueIs("1.95");
            return getSteps() 
        }
    });

return __exports;
});
;

/****************************************************************************
*  Filepath: /point_of_sale/static/tests/tours/ProductConfigurator.tour.js  *
*  Lines: 90                                                                *
****************************************************************************/
odoo.define('@point_of_sale/../tests/tours/ProductConfigurator.tour', ['@point_of_sale/../tests/tours/helpers/ProductScreenTourMethods', '@point_of_sale/../tests/tours/helpers/ProductConfiguratorTourMethods', '@point_of_sale/../tests/tours/helpers/utils', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { ProductScreen } = require("@point_of_sale/../tests/tours/helpers/ProductScreenTourMethods");
const { ProductConfigurator } = require("@point_of_sale/../tests/tours/helpers/ProductConfiguratorTourMethods");
const { getSteps, startSteps } = require("@point_of_sale/../tests/tours/helpers/utils");
const { registry } = require("@web/core/registry");

registry
    .category("web_tour.tours")
    .add("ProductConfiguratorTour", {
        test: true, 
        url: "/pos/ui",
        steps: () => {
            // signal to start generating steps
            // when finished, steps can be taken from getSteps
            startSteps();
            
            ProductScreen.do.confirmOpeningPopup();
            // Go by default to home category
            ProductScreen.do.clickHomeCategory();
            
            // Click on Configurable Chair product
            ProductScreen.do.clickDisplayedProduct("Configurable Chair");
            ProductConfigurator.check.isShown();
            
            // Cancel configuration, not product should be in order
            ProductConfigurator.do.cancelAttributes();
            ProductScreen.check.orderIsEmpty();
            
            // Click on Configurable Chair product
            ProductScreen.do.clickDisplayedProduct("Configurable Chair");
            ProductConfigurator.check.isShown();
            
            // Pick Color
            ProductConfigurator.do.pickColor("Red");
            
            // Pick Radio
            ProductConfigurator.do.pickSelect("Metal");
            
            // Pick Select
            ProductConfigurator.do.pickRadio("Other");
            
            // Fill in custom attribute
            ProductConfigurator.do.fillCustomAttribute("Custom Fabric");
            
            // Confirm configuration
            ProductConfigurator.do.confirmAttributes();
            
            // Check that the product has been added to the order with correct attributes and price
            ProductScreen.check.selectedOrderlineHas(
                "Configurable Chair (Red, Metal, Other: Custom Fabric)",
                "1.0",
                "11.0"
            );
            
            // Orderlines with the same attributes should be merged
            ProductScreen.do.clickHomeCategory();
            ProductScreen.do.clickDisplayedProduct("Configurable Chair");
            ProductConfigurator.do.pickColor("Red");
            ProductConfigurator.do.pickSelect("Metal");
            ProductConfigurator.do.pickRadio("Other");
            ProductConfigurator.do.fillCustomAttribute("Custom Fabric");
            ProductConfigurator.do.confirmAttributes();
            ProductScreen.check.selectedOrderlineHas(
                "Configurable Chair (Red, Metal, Other: Custom Fabric)",
                "2.0",
                "22.0"
            );
            
            // Orderlines with different attributes shouldn't be merged
            ProductScreen.do.clickHomeCategory();
            ProductScreen.do.clickDisplayedProduct("Configurable Chair");
            ProductConfigurator.do.pickColor("Blue");
            ProductConfigurator.do.pickSelect("Metal");
            ProductConfigurator.do.pickRadio("Leather");
            ProductConfigurator.do.confirmAttributes();
            ProductScreen.check.selectedOrderlineHas(
                "Configurable Chair (Blue, Metal, Leather)",
                "1.0",
                "10.0"
            );
            return getSteps(); 
        }
    });

return __exports;
});
;

/**********************************************************************
*  Filepath: /point_of_sale/static/tests/tours/ProductScreen.tour.js  *
*  Lines: 200                                                         *
**********************************************************************/
odoo.define('@point_of_sale/../tests/tours/ProductScreen.tour', ['@point_of_sale/../tests/tours/helpers/PaymentScreenTourMethods', '@point_of_sale/../tests/tours/helpers/ProductScreenTourMethods', '@point_of_sale/../tests/tours/helpers/ReceiptScreenTourMethods', '@point_of_sale/../tests/tours/helpers/TextAreaPopupTourMethods', '@point_of_sale/../tests/tours/helpers/utils', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { PaymentScreen } = require("@point_of_sale/../tests/tours/helpers/PaymentScreenTourMethods");
const { ProductScreen } = require("@point_of_sale/../tests/tours/helpers/ProductScreenTourMethods");
const { ReceiptScreen } = require("@point_of_sale/../tests/tours/helpers/ReceiptScreenTourMethods");
const { TextAreaPopup } = require("@point_of_sale/../tests/tours/helpers/TextAreaPopupTourMethods");
const { getSteps, startSteps } = require("@point_of_sale/../tests/tours/helpers/utils");
const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add("ProductScreenTour", { 
    test: true, 
    url: "/pos/ui", 
    steps: () => {
        // signal to start generating steps
        // when finished, steps can be taken from getSteps
        startSteps();
        
        // Go by default to home category
        ProductScreen.do.clickHomeCategory();
        
        // Clicking product multiple times should increment quantity
        ProductScreen.do.clickDisplayedProduct("Desk Organizer");
        ProductScreen.check.selectedOrderlineHas("Desk Organizer", "1.0", "5.10");
        ProductScreen.do.clickDisplayedProduct("Desk Organizer");
        ProductScreen.check.selectedOrderlineHas("Desk Organizer", "2.0", "10.20");
        
        // Clicking product should add new orderline and select the orderline
        // If orderline exists, increment the quantity
        ProductScreen.do.clickDisplayedProduct("Letter Tray");
        ProductScreen.check.selectedOrderlineHas("Letter Tray", "1.0", "5.28");
        ProductScreen.do.clickDisplayedProduct("Desk Organizer");
        ProductScreen.check.selectedOrderlineHas("Desk Organizer", "3.0", "15.30");
        
        // Check effects of clicking numpad buttons
        ProductScreen.do.clickOrderline("Letter Tray", "1");
        ProductScreen.check.selectedOrderlineHas("Letter Tray", "1.0");
        ProductScreen.do.pressNumpad("Backspace");
        ProductScreen.check.selectedOrderlineHas("Letter Tray", "0.0", "0.0");
        ProductScreen.do.pressNumpad("Backspace");
        ProductScreen.check.selectedOrderlineHas("Desk Organizer", "3", "15.30");
        ProductScreen.do.pressNumpad("Backspace");
        ProductScreen.check.selectedOrderlineHas("Desk Organizer", "0.0", "0.0");
        ProductScreen.do.pressNumpad("1");
        ProductScreen.check.selectedOrderlineHas("Desk Organizer", "1.0", "5.1");
        ProductScreen.do.pressNumpad("2");
        ProductScreen.check.selectedOrderlineHas("Desk Organizer", "12.0", "61.2");
        ProductScreen.do.pressNumpad("3");
        ProductScreen.check.selectedOrderlineHas("Desk Organizer", "123.0", "627.3");
        ProductScreen.do.pressNumpad(". 5");
        ProductScreen.check.selectedOrderlineHas("Desk Organizer", "123.5", "629.85");
        ProductScreen.do.pressNumpad("Price");
        ProductScreen.check.modeIsActive("Price");
        ProductScreen.do.pressNumpad("1");
        ProductScreen.check.selectedOrderlineHas("Desk Organizer", "123.5", "123.5");
        ProductScreen.do.pressNumpad("1 .");
        ProductScreen.check.selectedOrderlineHas("Desk Organizer", "123.5", "1,358.5");
        ProductScreen.do.pressNumpad("Disc");
        ProductScreen.check.modeIsActive("Disc");
        ProductScreen.do.pressNumpad("5 .");
        ProductScreen.check.selectedOrderlineHas("Desk Organizer", "123.5", "1,290.58");
        ProductScreen.do.pressNumpad("Qty");
        ProductScreen.do.pressNumpad("Backspace");
        ProductScreen.do.pressNumpad("Backspace");
        ProductScreen.check.orderIsEmpty();
        
        // Check different subcategories
        ProductScreen.do.clickSubcategory("Desks");
        ProductScreen.check.productIsDisplayed("Desk Pad");
        ProductScreen.do.clickHomeCategory();
        ProductScreen.do.clickSubcategory("Miscellaneous");
        ProductScreen.check.productIsDisplayed("Whiteboard Pen");
        ProductScreen.do.clickHomeCategory();
        ProductScreen.do.clickSubcategory("Chairs");
        ProductScreen.check.productIsDisplayed("Letter Tray");
        ProductScreen.do.clickHomeCategory();
        
        // Add two orderlines and update quantity
        ProductScreen.do.clickDisplayedProduct("Whiteboard Pen");
        ProductScreen.do.clickDisplayedProduct("Wall Shelf Unit");
        ProductScreen.do.clickOrderline("Whiteboard Pen", "1.0");
        ProductScreen.check.selectedOrderlineHas("Whiteboard Pen", "1.0");
        ProductScreen.do.pressNumpad("2");
        ProductScreen.check.selectedOrderlineHas("Whiteboard Pen", "2.0");
        ProductScreen.do.clickOrderline("Wall Shelf Unit", "1.0");
        ProductScreen.check.selectedOrderlineHas("Wall Shelf Unit", "1.0");
        ProductScreen.do.pressNumpad("2");
        ProductScreen.check.selectedOrderlineHas("Wall Shelf Unit", "2.0");
        ProductScreen.do.pressNumpad("Backspace");
        ProductScreen.check.selectedOrderlineHas("Wall Shelf Unit", "0.0");
        ProductScreen.do.pressNumpad("Backspace");
        ProductScreen.check.selectedOrderlineHas("Whiteboard Pen", "2.0");
        ProductScreen.do.pressNumpad("Backspace");
        ProductScreen.check.selectedOrderlineHas("Whiteboard Pen", "0.0");
        ProductScreen.do.pressNumpad("Backspace");
        ProductScreen.check.orderIsEmpty();
        
        // Add multiple orderlines then delete each of them until empty
        ProductScreen.do.clickDisplayedProduct("Whiteboard Pen");
        ProductScreen.do.clickDisplayedProduct("Wall Shelf Unit");
        ProductScreen.do.clickDisplayedProduct("Small Shelf");
        ProductScreen.do.clickDisplayedProduct("Magnetic Board");
        ProductScreen.do.clickDisplayedProduct("Monitor Stand");
        ProductScreen.do.clickOrderline("Whiteboard Pen", "1.0");
        ProductScreen.check.selectedOrderlineHas("Whiteboard Pen", "1.0");
        ProductScreen.do.pressNumpad("Backspace");
        ProductScreen.check.selectedOrderlineHas("Whiteboard Pen", "0.0");
        ProductScreen.do.pressNumpad("Backspace");
        ProductScreen.check.selectedOrderlineHas("Monitor Stand", "1.0");
        ProductScreen.do.clickOrderline("Wall Shelf Unit", "1.0");
        ProductScreen.check.selectedOrderlineHas("Wall Shelf Unit", "1.0");
        ProductScreen.do.pressNumpad("Backspace");
        ProductScreen.check.selectedOrderlineHas("Wall Shelf Unit", "0.0");
        ProductScreen.do.pressNumpad("Backspace");
        ProductScreen.check.selectedOrderlineHas("Monitor Stand", "1.0");
        ProductScreen.do.clickOrderline("Small Shelf", "1.0");
        ProductScreen.check.selectedOrderlineHas("Small Shelf", "1.0");
        ProductScreen.do.pressNumpad("Backspace");
        ProductScreen.check.selectedOrderlineHas("Small Shelf", "0.0");
        ProductScreen.do.pressNumpad("Backspace");
        ProductScreen.check.selectedOrderlineHas("Monitor Stand", "1.0");
        ProductScreen.do.clickOrderline("Magnetic Board", "1.0");
        ProductScreen.check.selectedOrderlineHas("Magnetic Board", "1.0");
        ProductScreen.do.pressNumpad("Backspace");
        ProductScreen.check.selectedOrderlineHas("Magnetic Board", "0.0");
        ProductScreen.do.pressNumpad("Backspace");
        ProductScreen.check.selectedOrderlineHas("Monitor Stand", "1.0");
        ProductScreen.do.pressNumpad("Backspace");
        ProductScreen.check.selectedOrderlineHas("Monitor Stand", "0.0");
        ProductScreen.do.pressNumpad("Backspace");
        ProductScreen.check.orderIsEmpty();
        
        // Test OrderlineCustomerNoteButton
        ProductScreen.do.clickDisplayedProduct("Desk Organizer");
        ProductScreen.check.selectedOrderlineHas("Desk Organizer", "1.0");
        ProductScreen.do.clickOrderlineCustomerNoteButton();
        TextAreaPopup.check.isShown();
        TextAreaPopup.do.inputText("Test customer note");
        TextAreaPopup.do.clickConfirm();
        ProductScreen.check.orderlineHasCustomerNote("Desk Organizer", "1", "Test customer note");
        return getSteps();
    }
});

registry.category("web_tour.tours").add("FiscalPositionNoTax", { 
    test: true, 
    url: "/pos/ui", 
    steps: () => {
        startSteps();
        
        ProductScreen.do.clickHomeCategory();
        ProductScreen.do.clickDisplayedProduct('Test Product');
        ProductScreen.check.totalAmountIs('100.00');
        ProductScreen.do.changeFiscalPosition('No Tax');
        ProductScreen.check.noDiscountApplied("100.00");
        ProductScreen.check.totalAmountIs('86.96');
        ProductScreen.do.clickPayButton();
        PaymentScreen.do.clickPaymentMethod('Bank');
        PaymentScreen.check.remainingIs('0.00');
        PaymentScreen.do.clickValidate();
        ReceiptScreen.check.isShown();
        ReceiptScreen.check.noOrderlineContainsDiscount();
        return getSteps()
    } 
});

registry.category("web_tour.tours").add("CashClosingDetails", { 
    test: true, 
    url: "/pos/ui", 
    steps: () => {
        startSteps();
        
        ProductScreen.do.enterOpeningAmount('90');
        ProductScreen.do.confirmOpeningPopup();
        ProductScreen.check.checkSecondCashClosingDetailsLineAmount('10.00', '-');
        return getSteps()
    }
});

registry.category("web_tour.tours").add("ShowTaxExcludedTour", { 
    test: true, 
    url: "/pos/ui", 
    steps: () => {
        startSteps();
        
        ProductScreen.do.confirmOpeningPopup();

        ProductScreen.do.clickHomeCategory();

        ProductScreen.do.clickDisplayedProduct('Test Product');
        ProductScreen.check.selectedOrderlineHas('Test Product', '1.0', '100.0');
        ProductScreen.check.totalAmountIs('110.0');
        return getSteps()
    }
});

return __exports;
});
;

/**********************************************************************
*  Filepath: /point_of_sale/static/tests/tours/ReceiptScreen.tour.js  *
*  Lines: 133                                                         *
**********************************************************************/
odoo.define('@point_of_sale/../tests/tours/ReceiptScreen.tour', ['@point_of_sale/../tests/tours/helpers/ProductScreenTourMethods', '@point_of_sale/../tests/tours/helpers/ReceiptScreenTourMethods', '@point_of_sale/../tests/tours/helpers/PaymentScreenTourMethods', '@point_of_sale/../tests/tours/helpers/ChromeTourMethods', '@point_of_sale/../tests/tours/helpers/NumberPopupTourMethods', '@point_of_sale/../tests/tours/helpers/utils', '@web/core/registry', '@web/core/utils/strings'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { ProductScreen } = require("@point_of_sale/../tests/tours/helpers/ProductScreenTourMethods");
const { ReceiptScreen } = require("@point_of_sale/../tests/tours/helpers/ReceiptScreenTourMethods");
const { PaymentScreen } = require("@point_of_sale/../tests/tours/helpers/PaymentScreenTourMethods");
const { Chrome } = require("@point_of_sale/../tests/tours/helpers/ChromeTourMethods");
const { NumberPopup } = require("@point_of_sale/../tests/tours/helpers/NumberPopupTourMethods");
const { getSteps, startSteps } = require("@point_of_sale/../tests/tours/helpers/utils");
const { registry } = require("@web/core/registry");
const { nbsp } = require("@web/core/utils/strings");

registry
    .category("web_tour.tours")
    .add("ReceiptScreenTour", { 
        test: true, 
        url: "/pos/ui", 
        steps: () => {
            startSteps();
            
            // press close button in receipt screen
            ProductScreen.exec.addOrderline("Letter Tray", "10", "5");
            ProductScreen.check.selectedOrderlineHas("Letter Tray", "10");
            ProductScreen.do.clickPayButton();
            PaymentScreen.do.clickPaymentMethod("Bank");
            PaymentScreen.check.validateButtonIsHighlighted(true);
            PaymentScreen.do.clickValidate();
            ReceiptScreen.check.receiptIsThere();
            // letter tray has 10% tax (search SRC)
            ReceiptScreen.check.totalAmountContains("55.0");
            ReceiptScreen.do.clickNextOrder();
            
            // send email in receipt screen
            ProductScreen.do.clickHomeCategory();
            ProductScreen.exec.addOrderline("Desk Pad", "6", "5", "30.0");
            ProductScreen.exec.addOrderline("Whiteboard Pen", "6", "6", "36.0");
            ProductScreen.exec.addOrderline("Monitor Stand", "6", "1", "6.0");
            ProductScreen.do.clickPayButton();
            PaymentScreen.do.clickPaymentMethod("Cash");
            PaymentScreen.do.enterPaymentLineAmount("Cash", "70");
            PaymentScreen.check.remainingIs("2.0");
            PaymentScreen.do.pressNumpad("0");
            PaymentScreen.do.fillPaymentLineAmountMobile("Cash", "700");
            PaymentScreen.check.remainingIs("0.00");
            PaymentScreen.check.changeIs("628.0");
            PaymentScreen.do.clickValidate();
            ReceiptScreen.check.receiptIsThere();
            ReceiptScreen.check.totalAmountContains("72.0");
            ReceiptScreen.do.setEmail("test@receiptscreen.com");
            ReceiptScreen.do.clickSend();
            ReceiptScreen.check.emailIsSuccessful();
            ReceiptScreen.do.clickNextOrder();
            
            // order with tip
            // check if tip amount is displayed
            ProductScreen.exec.addOrderline("Desk Pad", "6", "5");
            ProductScreen.do.clickPayButton();
            PaymentScreen.do.clickTipButton();
            NumberPopup.do.enterValue("1");
            NumberPopup.check.inputShownIs("1");
            NumberPopup.do.clickConfirm();
            PaymentScreen.check.emptyPaymentlines("31.0");
            PaymentScreen.do.clickPaymentMethod("Cash");
            PaymentScreen.do.clickValidate();
            ReceiptScreen.check.receiptIsThere();
            ReceiptScreen.check.totalAmountContains(`$${nbsp}30.00 + $${nbsp}1.00 tip`);
            ReceiptScreen.do.clickNextOrder();
            
            // Test customer note in receipt
            ProductScreen.exec.addOrderline("Desk Pad", "1", "5");
            ProductScreen.exec.addCustomerNote("Test customer note");
            ProductScreen.do.clickPayButton();
            PaymentScreen.do.clickPaymentMethod("Bank");
            PaymentScreen.do.clickValidate();
            ReceiptScreen.check.customerNoteIsThere("Test customer note");
            return getSteps(); 
        } 
});


registry
    .category("web_tour.tours")
    .add("ReceiptScreenDiscountWithPricelistTour", {
        test: true,
        url: "/pos/ui",
        steps: () => {
            startSteps();
            
            ProductScreen.do.clickHomeCategory();
            ProductScreen.exec.addOrderline("Test Product", "1");
            ProductScreen.do.selectPriceList("special_pricelist");
            ProductScreen.check.discountOriginalPriceIs("7.0");
            ProductScreen.do.clickPayButton();
            PaymentScreen.do.clickPaymentMethod("Cash");
            PaymentScreen.do.clickValidate();
            ReceiptScreen.check.discountAmountIs("0.7");
            return getSteps();
        },
    });

registry
    .category("web_tour.tours")
    .add("OrderPaidInCash", { 
        test: true, 
        url: "/pos/ui", 
        steps: () => {
            startSteps();
            
            ProductScreen.do.confirmOpeningPopup();
            ProductScreen.exec.addOrderline("Desk Pad", "5", "5");
            ProductScreen.check.selectedOrderlineHas("Desk Pad", "5");
            ProductScreen.do.clickPayButton();
            PaymentScreen.do.clickPaymentMethod("Cash");
            PaymentScreen.check.validateButtonIsHighlighted(true);
            PaymentScreen.do.clickValidate();
            ReceiptScreen.check.receiptIsThere();
            ReceiptScreen.do.clickNextOrder();
            ProductScreen.check.isShown();
            // Close the session
            Chrome.do.clickMenuButton();
            ProductScreen.do.clickCloseButton();
            ProductScreen.do.closeWithCashAmount("25");
            ProductScreen.check.cashDifferenceIs("0.00");
            ProductScreen.do.clickCloseSession();
            ProductScreen.check.lastClosingCashIs("25.00");
            return getSteps();
        } 
    });

return __exports;
});
;

/*********************************************************************
*  Filepath: /point_of_sale/static/tests/tours/TicketScreen.tour.js  *
*  Lines: 181                                                        *
*********************************************************************/
odoo.define('@point_of_sale/../tests/tours/TicketScreen.tour', ['@point_of_sale/../tests/tours/helpers/ProductScreenTourMethods', '@point_of_sale/../tests/tours/helpers/ReceiptScreenTourMethods', '@point_of_sale/../tests/tours/helpers/PaymentScreenTourMethods', '@point_of_sale/../tests/tours/helpers/PartnerListScreenTourMethods', '@point_of_sale/../tests/tours/helpers/TicketScreenTourMethods', '@point_of_sale/../tests/tours/helpers/ErrorPopupTourMethods', '@point_of_sale/../tests/tours/helpers/ChromeTourMethods', '@point_of_sale/../tests/tours/helpers/utils', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { ProductScreen } = require("@point_of_sale/../tests/tours/helpers/ProductScreenTourMethods");
const { ReceiptScreen } = require("@point_of_sale/../tests/tours/helpers/ReceiptScreenTourMethods");
const { PaymentScreen } = require("@point_of_sale/../tests/tours/helpers/PaymentScreenTourMethods");
const { PartnerListScreen } = require("@point_of_sale/../tests/tours/helpers/PartnerListScreenTourMethods");
const { TicketScreen } = require("@point_of_sale/../tests/tours/helpers/TicketScreenTourMethods");
const { ErrorPopup } = require("@point_of_sale/../tests/tours/helpers/ErrorPopupTourMethods");
const { Chrome } = require("@point_of_sale/../tests/tours/helpers/ChromeTourMethods");
const { getSteps, startSteps } = require("@point_of_sale/../tests/tours/helpers/utils");
const { registry } = require("@web/core/registry");

registry
    .category("web_tour.tours")
    .add("TicketScreenTour", { 
        test: true, 
        url: "/pos/ui", 
        steps: () => {
            startSteps();
            ProductScreen.do.confirmOpeningPopup();
            ProductScreen.do.clickHomeCategory();
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.do.clickNewTicket();
            ProductScreen.exec.addOrderline("Desk Pad", "1", "3");
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.do.deleteOrder("-0002");
            Chrome.do.confirmPopup();
            TicketScreen.do.clickDiscard();
            ProductScreen.check.orderIsEmpty();
            ProductScreen.exec.addOrderline("Desk Pad", "1", "2");
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.do.deleteOrder("-0001");
            Chrome.do.confirmPopup();
            TicketScreen.do.clickDiscard();
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.check.nthRowContains(2, "-0003");
            TicketScreen.do.clickDiscard();
            ProductScreen.exec.addOrderline("Desk Pad", "1", "2");
            ProductScreen.do.clickPartnerButton();
            ProductScreen.do.clickCustomer("Nicole Ford");
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.check.nthRowContains(2, "Nicole Ford");
            TicketScreen.do.clickNewTicket();
            ProductScreen.exec.addOrderline("Desk Pad", "1", "3");
            ProductScreen.do.clickPartnerButton();
            ProductScreen.do.clickCustomer("Brandon Freeman");
            ProductScreen.do.clickPayButton();
            PaymentScreen.check.isShown();
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.check.nthRowContains(3, "Brandon Freeman");
            TicketScreen.do.clickNewTicket();
            ProductScreen.exec.addOrderline("Desk Pad", "2", "4");
            ProductScreen.do.clickPayButton();
            PaymentScreen.do.clickPaymentMethod("Bank");
            PaymentScreen.do.clickValidate();
            ReceiptScreen.check.isShown();
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.check.nthRowContains(4, "Receipt");
            TicketScreen.do.selectFilter("Receipt");
            TicketScreen.check.nthRowContains(2, "Receipt");
            TicketScreen.do.selectFilter("Payment");
            TicketScreen.check.nthRowContains(2, "Payment");
            TicketScreen.do.selectFilter("Ongoing");
            TicketScreen.check.nthRowContains(2, "Ongoing");
            TicketScreen.do.selectFilter("All active orders");
            TicketScreen.check.nthRowContains(4, "Receipt");
            TicketScreen.do.search("Customer", "Nicole");
            TicketScreen.check.nthRowContains(2, "Nicole");
            TicketScreen.do.search("Customer", "Brandon");
            TicketScreen.check.nthRowContains(2, "Brandon");
            TicketScreen.do.search("Receipt Number", "-0005");
            TicketScreen.check.nthRowContains(2, "Receipt");
            // Close the TicketScreen to see the current order which is in ReceiptScreen.
            // This is just to remove the search string in the search bar.
            TicketScreen.do.clickDiscard();
            ReceiptScreen.check.isShown();
            // Open again the TicketScreen to check the Paid filter.
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.do.selectFilter("Paid");
            TicketScreen.check.nthRowContains(2, "-0005");
            // Pay the order that was in PaymentScreen.
            TicketScreen.do.selectFilter("Payment");
            TicketScreen.do.selectOrder("-0004");
            PaymentScreen.do.clickPaymentMethod("Cash");
            PaymentScreen.do.clickValidate();
            ReceiptScreen.check.isShown();
            ReceiptScreen.do.clickNextOrder();
            ProductScreen.check.isShown();
            // Check that the Paid filter will show the 2 synced orders.
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.do.selectFilter("Paid");
            TicketScreen.check.nthRowContains(2, "Brandon Freeman");
            TicketScreen.check.nthRowContains(3, "-0005");
            // Invoice order
            TicketScreen.do.selectOrder("-0005");
            TicketScreen.check.orderWidgetIsNotEmpty();
            TicketScreen.do.clickControlButton("Invoice");
            Chrome.do.confirmPopup();
            PartnerListScreen.check.isShown();
            PartnerListScreen.do.clickPartner("Colleen Diaz");
            TicketScreen.check.partnerIs("Colleen Diaz");
            // Reprint receipt
            TicketScreen.do.clickControlButton("Print Receipt");
            ReceiptScreen.check.isShown();
            ReceiptScreen.do.clickBack();
            // When going back, the ticket screen should be in its previous state.
            TicketScreen.check.filterIs("Paid");
            
            // Test refund //
            TicketScreen.do.clickDiscard();
            ProductScreen.check.isShown();
            ProductScreen.check.orderIsEmpty();
            ProductScreen.do.clickRefund();
            // Filter should be automatically 'Paid'.
            TicketScreen.check.filterIs("Paid");
            TicketScreen.do.selectOrder("-0005");
            TicketScreen.check.partnerIs("Colleen Diaz");
            TicketScreen.do.clickOrderline("Desk Pad");
            TicketScreen.do.pressNumpad("3");
            // Error should show because 2 is more than the number
            // that can be refunded.
            ErrorPopup.do.clickConfirm();
            TicketScreen.do.clickDiscard();
            ProductScreen.do.goBackToMainScreen();
            ProductScreen.check.isShown();
            ProductScreen.check.orderIsEmpty();
            ProductScreen.do.clickRefund();
            TicketScreen.do.selectOrder("-0005");
            TicketScreen.do.clickOrderline("Desk Pad");
            TicketScreen.do.pressNumpad("1");
            TicketScreen.check.toRefundTextContains("To Refund: 1.00");
            TicketScreen.do.confirmRefund();
            ProductScreen.do.goBackToMainScreen();
            ProductScreen.check.isShown();
            ProductScreen.check.selectedOrderlineHas("Desk Pad", "-1.00");
            // Try changing the refund line to positive number.
            // Error popup should show.
            ProductScreen.do.pressNumpad("2");
            ErrorPopup.do.clickConfirm();
            // Change the refund line quantity to -3 -- not allowed
            // so error popup.
            ProductScreen.do.pressNumpad("+/- 3");
            ErrorPopup.do.clickConfirm();
            // Change the refund line quantity to -2 -- allowed.
            ProductScreen.do.pressNumpad("+/- 2");
            ProductScreen.check.selectedOrderlineHas("Desk Pad", "-2.00");
            // Check if the amount being refunded changed to 2.
            ProductScreen.do.clickRefund();
            TicketScreen.do.selectOrder("-0005");
            TicketScreen.check.toRefundTextContains("Refunding 2.00");
            TicketScreen.do.clickDiscard();
            ProductScreen.do.goBackToMainScreen();
            // Pay the refund order.
            ProductScreen.do.clickPayButton();
            PaymentScreen.do.clickPaymentMethod("Bank");
            PaymentScreen.do.clickValidate();
            ReceiptScreen.check.isShown();
            ReceiptScreen.do.clickNextOrder();
            // Check refunded quantity.
            ProductScreen.do.clickRefund();
            TicketScreen.do.selectOrder("-0005");
            TicketScreen.check.refundedNoteContains("2.00 Refunded");

            return getSteps(); 
        } 
    });

return __exports;
});
;

/*******************************************************************
*  Filepath: /point_of_sale/static/tests/tours/acceptance_tour.js  *
*  Lines: 362                                                      *
*******************************************************************/
odoo.define('@point_of_sale/../tests/tours/acceptance_tour', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");

function add_product_to_order(product_name) {
    return [
        {
            content: "buy " + product_name,
            trigger: '.product-list .product-name:contains("' + product_name + '")',
        },
        {
            content: "click review button",
            trigger: ".btn-switchpane:contains('Review')",
            mobile: true,
        },
        {
            content: "the " + product_name + " have been added to the order",
            trigger: '.order .product-name:contains("' + product_name + '")',
            run: function () {},
        },
        {
            content: "go back to the products",
            trigger: ".floor-button",
            mobile: true,
        },
    ];
}

function set_fiscal_position_on_order(fp_name) {
    return [
        {
            content: "click review button",
            trigger: ".btn-switchpane:contains('Review')",
            mobile: true,
        },
        {
            content: "click more button",
            trigger: ".mobile-more-button",
            mobile: true,
        },
        {
            content: "set fiscal position",
            trigger: ".control-button.o_fiscal_position_button",
        },
        {
            content: "choose fiscal position " + fp_name + " to add to the order",
            trigger: '.popups .popup .selection .selection-item:contains("' + fp_name + '")',
        },
        {
            content: "click more button",
            trigger: ".mobile-more-button",
            mobile: true,
        },
        {
            content: "the fiscal position " + fp_name + " has been set to the order",
            trigger: '.control-button.o_fiscal_position_button:contains("' + fp_name + '")',
            run: function () {},
        },
        {
            content: "go back to the products",
            trigger: ".floor-button",
            mobile: true,
        },
    ];
}

function press_payment_numpad(val) {
    return [
        {
            content: `press ${val} on payment screen numpad`,
            trigger: `.payment-numpad .input-button:contains("${val}"):visible`,
            mobile: false,
        },
    ];
}

function fillPaymentLineAmountMobile(lineName, keys) {
    return [
        {
            content: "click payment line",
            trigger: `.paymentlines .paymentline .payment-infos:contains("${lineName}")`,
            mobile: true,
        },
        {
            content: `'${keys}' inputed in the number popup`,
            trigger: ".popup .payment-input-number",
            run: `text ${keys}`,
            mobile: true,
        },
        {
            content: "click confirm button",
            trigger: ".popup .footer .confirm",
            mobile: true,
        }
    ];
}

function fillPaymentValue(lineName, val) {
    return [
        ...press_payment_numpad(val),
        ...fillPaymentLineAmountMobile(lineName, val),
    ]
}

function press_product_numpad(val) {
    return [
        {
            content: "click review button",
            trigger: ".btn-switchpane:contains('Review')",
            mobile: true,
        },
        {
            content: `press ${val} on product screen numpad`,
            trigger: `.numpad .input-button:contains("${val}"):visible`,
        },
        {
            content: "go back to the products",
            trigger: ".floor-button",
            mobile: true,
        },
    ];
}

function selected_payment_has(name, val) {
    return [
        {
            content: `selected payment is ${name} and has ${val}`,
            trigger: `.paymentlines .paymentline.selected .payment-name:contains("${name}")`,
            extra_trigger: `.paymentlines .paymentline.selected .payment-name:contains("${name}") ~ .payment-amount:contains("${val}")`,
            run: function () {},
        },
    ];
}

function selected_orderline_has({ product, price = null, quantity = null }) {
    const result = [
        {
            content: "click review button",
            trigger: ".btn-switchpane:contains('Review')",
            mobile: true,
        },
    ];
    if (price !== null) {
        result.push({
            content: `Selected line has product '${product}' and price '${price}'`,
            trigger: `.order-container .orderlines .orderline.selected .product-name:contains("${product}") ~ span.price:contains("${price}")`,
            run: function () {},
        });
    }
    if (quantity !== null) {
        result.push({
            content: `Selected line has product '${product}' and quantity '${quantity}'`,
            trigger: `.order-container .orderlines .orderline.selected .product-name:contains('${product}') ~ .info-list .info em:contains('${quantity}')`,
            run: function () {},
        });
    }
    result.push({
        content: "go back to the products",
        trigger: ".floor-button",
        mobile: true,
    });
    return result;
}

function verify_order_total(total_str) {
    return [
        {
            content: "click review button",
            trigger: ".btn-switchpane:contains('Review')",
            mobile: true,
        },
        {
            content: "order total contains " + total_str,
            trigger: '.order .total .value:contains("' + total_str + '")',
            run: function () {}, // it's a check
        },
        {
            content: "go back to the products",
            trigger: ".floor-button",
            mobile: true,
        },
    ];
}

function goto_payment_screen_and_select_payment_method() {
    return [
        {
            content: "go to payment screen",
            trigger: ".button.pay-order-button",
            mobile: false,
        },
        {
            content: "go to payment screen",
            trigger: ".btn-switchpane:contains('Pay')",
            mobile: true,
        },
        {
            content: "pay with cash",
            trigger: '.paymentmethod:contains("Cash")',
        },
    ];
}

function finish_order() {
    return [
        {
            content: "validate the order",
            trigger: ".payment-screen .button.next.highlight:visible",
            mobile: false,
        },
        {
            content: "validate the order",
            trigger: ".payment-screen .btn-switchpane:contains('Validate')",
            mobile: true,
        },
        {
            content: "verify that the order has been successfully sent to the backend",
            trigger: ".js_connected:visible",
            run: function () {},
        },
        {
            content: "click Next Order",
            trigger: ".receipt-screen .button.next.highlight:visible",
            mobile: false,
        },
        {
            content: "Click Next Order",
            trigger: ".receipt-screen .btn-switchpane.validation-button.highlight[name='done']",
            mobile: true,
        },
        {
            content: "check if we left the receipt screen",
            trigger: ".pos-content .screen:not(:has(.receipt-screen))",
            run: function () {},
        },
    ];
}

var steps = [
    {
        content: "waiting for loading to finish",
        trigger: "body:not(:has(.loader))",
        run: function () {},
    },
    {
        // Leave category displayed by default
        content: "click category switch",
        trigger: ".breadcrumb-home",
    },
];

steps = steps.concat(add_product_to_order("Desk Organizer"));
steps = steps.concat(verify_order_total("5.10"));

steps = steps.concat(add_product_to_order("Desk Organizer"));
steps = steps.concat(verify_order_total("10.20"));
steps = steps.concat(goto_payment_screen_and_select_payment_method());

/*  add payment line of only 5.20
        status:
            order-total := 10.20
            total-payment := 11.70
        expect:
            remaining := 0.00
            change := 1.50
    */
steps = steps.concat(fillPaymentValue("Cash", "5"));
steps = steps.concat(selected_payment_has("Cash", "5.0"));
steps = steps.concat([
    {
        content: "verify remaining",
        trigger: '.payment-status-remaining .amount:contains("5.20")',
        run: function () {},
    },
    {
        content: "verify change",
        trigger: '.payment-status-change .amount:contains("0.00")',
        run: function () {},
    },
]);

/*  make additional payment line of 6.50
        status:
            order-total := 10.20
            total-payment := 11.70
        expect:
            remaining := 0.00
            change := 1.50
    */
steps = steps.concat([
    {
        content: "pay with cash",
        trigger: '.paymentmethod:contains("Bank")',
    },
]);
steps = steps.concat(selected_payment_has("Bank", "5.2"));
steps = steps.concat(fillPaymentValue("Bank", "6"));
steps = steps.concat(selected_payment_has("Bank", "6.0"));
steps = steps.concat([
    {
        content: "verify remaining",
        trigger: '.payment-status-remaining .amount:contains("0.00")',
        run: function () {},
    },
    {
        content: "verify change",
        trigger: '.payment-status-change .amount:contains("0.80")',
        run: function () {},
    },
]);

steps = steps.concat(finish_order());

// test opw-672118 orderline subtotal rounding
steps = steps.concat(add_product_to_order("Desk Organizer"));
steps = steps.concat(selected_orderline_has({ product: "Desk Organizer", quantity: "1.0" }));
steps = steps.concat(press_product_numpad("."));
steps = steps.concat(
    selected_orderline_has({ product: "Desk Organizer", quantity: "0.0", price: "0.0" })
);
steps = steps.concat(press_product_numpad("9"));
steps = steps.concat(
    selected_orderline_has({ product: "Desk Organizer", quantity: "0.9", price: "4.59" })
);
steps = steps.concat(press_product_numpad("9"));
steps = steps.concat(
    selected_orderline_has({ product: "Desk Organizer", quantity: "0.99", price: "5.05" })
);
steps = steps.concat(goto_payment_screen_and_select_payment_method());
steps = steps.concat(selected_payment_has("Cash", "5.05"));
steps = steps.concat(finish_order());

// Test fiscal position one2many map (align with backend)
steps = steps.concat(add_product_to_order("Letter Tray"));
steps = steps.concat(selected_orderline_has({ product: "Letter Tray", quantity: "1.0" }));
steps = steps.concat(verify_order_total("5.28"));
steps = steps.concat(set_fiscal_position_on_order("FP-POS-2M"));
steps = steps.concat(verify_order_total("5.52"));

steps = steps.concat([
    {
        content: "open the navbar menu",
        trigger: ".menu-button",
    },
    {
        content: "open closing the Point of Sale frontend popup",
        trigger: ".close-button",
    },
    {
        content: "close the Point of Sale frontend",
        trigger: ".close-pos-popup .button:contains('Discard')",
        run: function () {}, //it's a check,
    },
]);

registry.category("web_tour.tours").add("pos_basic_order", { test: true, url: "/pos/ui", steps: () => steps });

return __exports;
});
;

/*****************************************************************************
*  Filepath: /point_of_sale/static/tests/tours/helpers/ChromeTourMethods.js  *
*  Lines: 82                                                                 *
*****************************************************************************/
odoo.define('@point_of_sale/../tests/tours/helpers/ChromeTourMethods', ['@point_of_sale/../tests/tours/helpers/utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { createTourMethods } = require("@point_of_sale/../tests/tours/helpers/utils");

class Do {
    confirmPopup() {
        return [
            {
                content: "confirm popup",
                trigger: ".popups .modal-dialog .button.confirm",
            },
        ];
    }
    clickTicketButton() {
        return [
            {
                trigger: ".pos-topheader .ticket-button",
            },
            {
                trigger: ".subwindow .ticket-screen",
                run: () => {},
            },
        ];
    }
    clickMenuButton() {
        return [
            {
                content: "Click on the menu button",
                trigger: ".menu-button",
            },
        ];
    }
    closeSession() {
        return [
            ...this.clickMenuButton(),
            {
                content: "click on the close session menu button",
                trigger: ".close-button",
            },
            {
                content: "click on the close session popup button",
                trigger: ".close-pos-popup .footer .button.highlight",
            },
            {
                content: "check that the session is closed without error",
                trigger: ".o_web_client",
                isCheck: true,
            },
        ];
    }
}

class Check {
    isCashMoveButtonHidden() {
        return [
            {
                extraTrigger: ".pos-topheader",
                trigger: ".pos-topheader:not(:contains(Cash In/Out))",
                run: () => {},
            },
        ];
    }

    isCashMoveButtonShown() {
        return [
            {
                trigger: ".pos-topheader:contains(Cash In/Out)",
                run: () => {},
            },
        ];
    }
}

// FIXME: this is a horrible hack to export an object as named exports.
// eslint-disable-next-line no-undef
Object.assign(__exports, createTourMethods("Chrome", Do, Check));

return __exports;
});
;

/*********************************************************************************
*  Filepath: /point_of_sale/static/tests/tours/helpers/ErrorPopupTourMethods.js  *
*  Lines: 36                                                                     *
*********************************************************************************/
odoo.define('@point_of_sale/../tests/tours/helpers/ErrorPopupTourMethods', ['@point_of_sale/../tests/tours/helpers/utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { createTourMethods } = require("@point_of_sale/../tests/tours/helpers/utils");

class Do {
    clickConfirm() {
        return [
            {
                content: "click confirm button",
                trigger: ".popup-error .footer .cancel",
            },
        ];
    }
}

class Check {
    isShown() {
        return [
            {
                content: "error popup is shown",
                trigger: ".modal-dialog .popup-error",
                run: () => {},
            },
        ];
    }
}

// FIXME: this is a horrible hack to export an object as named exports.
// eslint-disable-next-line no-undef
Object.assign(__exports, createTourMethods("ErrorPopup", Do, Check));

return __exports;
});
;

/**********************************************************************************
*  Filepath: /point_of_sale/static/tests/tours/helpers/NumberPopupTourMethods.js  *
*  Lines: 104                                                                     *
**********************************************************************************/
odoo.define('@point_of_sale/../tests/tours/helpers/NumberPopupTourMethods', ['@point_of_sale/../tests/tours/helpers/utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { createTourMethods } = require("@point_of_sale/../tests/tours/helpers/utils");

class Do {
    /**
     * Note: Maximum of 2 characters because NumberBuffer only allows 2 consecutive
     * fast inputs. Fast inputs is the case in tours.
     *
     * @param {String} keys space-separated input keys
     */
    pressNumpad(keys) {
        const numberChars = "0 1 2 3 4 5 6 7 8 9 C".split(" ");
        const modeButtons = "+1 +10 +2 +20 +5 +50".split(" ");
        const decimalSeparators = ", .".split(" ");
        function generateStep(key) {
            let trigger;
            if (numberChars.includes(key)) {
                trigger = `.popup-numpad .number-char:contains("${key}")`;
            } else if (modeButtons.includes(key)) {
                trigger = `.popup-numpad .mode-button:contains("${key}")`;
            } else if (key === "Backspace") {
                trigger = `.popup-numpad .numpad-backspace`;
            } else if (decimalSeparators.includes(key)) {
                trigger = `.popup-numpad .number-char.dot`;
            }
            return {
                content: `'${key}' pressed in numpad`,
                trigger,
                mobile: false,
            };
        }
        return keys.split(" ").map(generateStep);
    }
    enterValue(keys) {
        const numpadKeys = keys.split('').join(' ');
        return [
            ...this.pressNumpad(numpadKeys),
            ...this.fillPopupValue(keys)
        ];
    }
    fillPopupValue(keys) {
        return [
            {
                content: `'${keys}' inputed in the number popup`,
                trigger: ".popup .value",
                run: `text ${keys}`,
                mobile: true,
            },
        ];
    }
    clickConfirm() {
        return [
            {
                content: "click confirm button",
                trigger: ".popup-number .footer .confirm",
                mobile: false,
            },
            {
                content: "click confirm button",
                trigger: ".popup .footer .confirm",
                mobile: true,
            }
        ];
    }
}

class Check {
    isShown() {
        return [
            {
                content: "number popup is shown",
                trigger: ".modal-dialog .popup .value",
                run: () => {},
            },
        ];
    }
    inputShownIs(val) {
        return [
            {
                content: "number input element check",
                trigger: ".modal-dialog .popup-number",
                run: () => {},
                mobile: false,
            },
            {
                content: `input shown is '${val}'`,
                trigger: `.modal-dialog .popup .value:contains("${val}")`,
                run: () => {},
                mobile: false,
            },
        ];
    }
}

// FIXME: this is a horrible hack to export an object as named exports.
// eslint-disable-next-line no-undef
Object.assign(__exports, createTourMethods("NumberPopup", Do, Check));

return __exports;
});
;

/****************************************************************************************
*  Filepath: /point_of_sale/static/tests/tours/helpers/PartnerListScreenTourMethods.js  *
*  Lines: 38                                                                            *
****************************************************************************************/
odoo.define('@point_of_sale/../tests/tours/helpers/PartnerListScreenTourMethods', ['@point_of_sale/../tests/tours/helpers/utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { createTourMethods } = require("@point_of_sale/../tests/tours/helpers/utils");

class Do {
    clickPartner(name) {
        return [
            {
                content: `click partner '${name}' from partner list screen`,
                trigger: `.partnerlist-screen .partner-list-contents .partner-line td:contains("${name}")`,
            },
        ];
    }
}

class Check {
    isShown() {
        return [
            {
                content: "partner list screen is shown",
                trigger: ".pos-content .partnerlist-screen",
                run: () => {},
            },
        ];
    }
}

class Execute {}

// FIXME: this is a horrible hack to export an object as named exports.
// eslint-disable-next-line no-undef
Object.assign(__exports, createTourMethods("PartnerListScreen", Do, Check, Execute));

return __exports;
});
;

/************************************************************************************
*  Filepath: /point_of_sale/static/tests/tours/helpers/PaymentScreenTourMethods.js  *
*  Lines: 298                                                                       *
************************************************************************************/
odoo.define('@point_of_sale/../tests/tours/helpers/PaymentScreenTourMethods', ['@point_of_sale/../tests/tours/helpers/utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { createTourMethods } = require("@point_of_sale/../tests/tours/helpers/utils");

class Do {
    clickPaymentMethod(name) {
        return [
            {
                content: `click '${name}' payment method`,
                trigger: `.paymentmethods .button.paymentmethod:contains("${name}")`,
            },
        ];
    }

    /**
     * Delete the paymentline having the given payment method name and amount.
     * @param {String} name payment method
     * @param {String} amount
     */
    clickPaymentlineDelButton(name, amount, mobile = false) {
        return [
            {
                content: `delete ${name} paymentline with ${amount} amount`,
                trigger: `.paymentlines .paymentline .payment-infos:contains("${name}"):has(.payment-amount:contains("${amount}")) ~ .delete-button`,
            },
        ];
    }

    /**
     * Click the paymentline having the given payment method name and amount.
     * @param {String} name payment method
     * @param {String} amount
     */
    clickPaymentline(name, amount) {
        return [
            {
                content: `click ${name} paymentline with ${amount} amount`,
                trigger: `.paymentlines .paymentline .payment-infos:contains("${name}"):has(.payment-amount:contains("${amount}"))`,
            },
        ];
    }

    clickEmailButton() {
        return [
            {
                content: `click email button`,
                trigger: `.payment-buttons .js_email`,
            },
        ];
    }

    clickInvoiceButton() {
        return [{ content: "click invoice button", trigger: ".payment-buttons .js_invoice" }];
    }

    clickValidate() {
        return [
            {
                content: "validate payment",
                trigger: `.payment-screen .button.next.highlight`,
                mobile: false,
            },
            {
                content: "validate payment",
                trigger: `.payment-screen .btn-switchpane:contains('Validate')`,
                mobile: true,
            },
        ];
    }

    /**
     * Press the numpad in sequence based on the given space-separated keys.
     * Note: Maximum of 2 characters because NumberBuffer only allows 2 consecutive
     * fast inputs. Fast inputs is the case in tours. This method is only for the
     * desktop environment. The mobile environment doesn't work exactly the same way
     * so we have to call fillPaymentLineAmountMobile to have the same behaviour.
     *
     * e.g. :
     *  PaymentScreen.do.enterPaymentLineAmount("Cash", "70");
     *  PaymentScreen.check.remainingIs("2.0");
     *  PaymentScreen.do.pressNumpad("0"); <- desktop: add a 0
     *  PaymentScreen.do.fillPaymentLineAmountMobile("Cash", "700"); <- mobile: rewrite the amount
     *  PaymentScreen.check.remainingIs("0.00");
     *  PaymentScreen.check.changeIs("628.0");
     *
     * @param {String} keys space-separated numpad keys
     */
    pressNumpad(keys) {
        const numberChars = ". +/- 0 1 2 3 4 5 6 7 8 9".split(" ");
        const modeButtons = "+10 +20 +50".split(" ");
        function generateStep(key) {
            let trigger;
            if (numberChars.includes(key)) {
                trigger = `.payment-numpad .number-char:contains("${key}")`;
            } else if (modeButtons.includes(key)) {
                trigger = `.payment-numpad .mode-button:contains("${key}")`;
            } else if (key === "Backspace") {
                trigger = `.payment-numpad .number-char img[alt="Backspace"]`;
            }
            return {
                content: `'${key}' pressed in payment numpad`,
                trigger,
                mobile: false,
            };
        }
        return keys.split(" ").map(generateStep);
    }

    clickBack() {
        return [
            {
                content: "click back button",
                trigger: ".payment-screen .button.back",
            },
        ];
    }

    clickTipButton() {
        return [
            {
                trigger: ".payment-screen .button.js_tip",
            },
        ];
    }

    enterPaymentLineAmount(lineName, keys) {
        const numpadKeys = keys.split("").join(" ");
        return [
            ...this.pressNumpad(numpadKeys),
            ...this.fillPaymentLineAmountMobile(lineName, keys),
        ];
    }

    fillPaymentLineAmountMobile(lineName, keys) {
        return [
            {
                content: "click payment line",
                trigger: `.paymentlines .paymentline .payment-infos:contains("${lineName}")`,
                mobile: true,
            },
            {
                content: `'${keys}' inputed in the number popup`,
                trigger: ".popup .payment-input-number",
                run: `text ${keys}`,
                mobile: true,
            },
            {
                content: "click confirm button",
                trigger: ".popup .footer .confirm",
                mobile: true,
            },
        ];
    }
}

class Check {
    isShown() {
        return [
            {
                content: "payment screen is shown",
                trigger: ".pos .payment-screen",
                run: () => {},
            },
        ];
    }
    /**
     * Check if change is the provided amount.
     * @param {String} amount
     */
    changeIs(amount) {
        return [
            {
                content: `change is ${amount}`,
                trigger: `.payment-status-change .amount:contains("${amount}")`,
                run: () => {},
            },
        ];
    }

    /**
     * Check if the remaining is the provided amount.
     * @param {String} amount
     */
    remainingIs(amount) {
        return [
            {
                content: `remaining amount is ${amount}`,
                trigger: `.payment-status-remaining .amount:contains("${amount}")`,
                run: () => {},
            },
        ];
    }

    /**
     * Check if validate button is highlighted.
     * @param {Boolean} isHighlighted
     */
    validateButtonIsHighlighted(isHighlighted = true) {
        return [
            {
                content: `validate button is ${isHighlighted ? "highlighted" : "not highligted"}`,
                trigger: isHighlighted
                    ? `.payment-screen .button.next.highlight`
                    : `.payment-screen .button.next:not(:has(.highlight))`,
                run: () => {},
                mobile: false,
            },
            {
                content: `validate button is ${isHighlighted ? "highlighted" : "not highligted"}`,
                trigger: isHighlighted
                    ? `.payment-screen .btn-switchpane:not(.secondary):contains('Validate')`
                    : `.payment-screen .btn-switchpane.secondary:contains('Validate')`,
                run: () => {},
                mobile: true,
            },
        ];
    }

    /**
     * Check if the paymentlines are empty. Also provide the amount to pay.
     * @param {String} amountToPay
     */
    emptyPaymentlines(amountToPay) {
        return [
            {
                content: `there are no paymentlines`,
                trigger: `.paymentlines-empty`,
                run: () => {},
            },
            {
                content: `amount to pay is '${amountToPay}'`,
                trigger: `.paymentlines-empty .total:contains("${amountToPay}")`,
                run: () => {},
            },
        ];
    }

    /**
     * Check if the selected paymentline has the given payment method and amount.
     * @param {String} paymentMethodName
     * @param {String} amount
     */
    selectedPaymentlineHas(paymentMethodName, amount) {
        return [
            {
                content: `line paid via '${paymentMethodName}' is selected`,
                trigger: `.paymentlines .paymentline.selected .payment-name:contains("${paymentMethodName}")`,
                run: () => {},
            },
            {
                content: `amount tendered in the line is '${amount}'`,
                trigger: `.paymentlines .paymentline.selected .payment-amount:contains("${amount}")`,
                run: () => {},
            },
        ];
    }
    totalIs(amount) {
        return [
            {
                content: `total is ${amount}`,
                trigger: `.total:contains("${amount}")`,
                run: () => {},
            },
        ];
    }
    totalDueIs(amount) {
        return [
            {
                content: `total due is ${amount}`,
                trigger: `.payment-status-total-due:contains("${amount}")`,
                run: () => {},
            },
        ];
    }
}

class Execute {
    pay(method, amount) {
        const steps = [];
        steps.push(...this._do.clickPaymentMethod(method));
        for (const char of amount.split("")) {
            steps.push(...this._do.pressNumpad(char));
        }
        steps.push(...this._check.validateButtonIsHighlighted());
        steps.push(...this._do.clickValidate());
        return steps;
    }
}

// FIXME: this is a horrible hack to export an object as named exports.
// eslint-disable-next-line no-undef
Object.assign(__exports, createTourMethods("PaymentScreen", Do, Check, Execute));

return __exports;
});
;

/******************************************************************************************
*  Filepath: /point_of_sale/static/tests/tours/helpers/ProductConfiguratorTourMethods.js  *
*  Lines: 83                                                                              *
******************************************************************************************/
odoo.define('@point_of_sale/../tests/tours/helpers/ProductConfiguratorTourMethods', ['@point_of_sale/../tests/tours/helpers/utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { createTourMethods } = require("@point_of_sale/../tests/tours/helpers/utils");

class Do {
    pickRadio(name) {
        return [
            {
                content: `picking radio attribute with name ${name}`,
                trigger: `.product-configurator-popup .attribute-name-cell label[name='${name}']`,
            },
        ];
    }

    pickSelect(name) {
        return [
            {
                content: `picking select attribute with name ${name}`,
                trigger: `.product-configurator-popup .configurator_select:has(option:contains('${name}'))`,
                run: `text ${name}`,
            },
        ];
    }

    pickColor(name) {
        return [
            {
                content: `picking color attribute with name ${name}`,
                trigger: `.product-configurator-popup .configurator_color[data-color='${name}']`,
            },
        ];
    }

    fillCustomAttribute(value) {
        return [
            {
                content: `filling custom attribute with value ${value}`,
                trigger: `.product-configurator-popup .custom_value`,
                run: `text ${value}`,
            },
        ];
    }

    confirmAttributes() {
        return [
            {
                content: `confirming product configuration`,
                trigger: `.product-configurator-popup .button.confirm`,
            },
        ];
    }

    cancelAttributes() {
        return [
            {
                content: `canceling product configuration`,
                trigger: `.product-configurator-popup .button.cancel`,
            },
        ];
    }
}

class Check {
    isShown() {
        return [
            {
                content: "product configurator is shown",
                trigger: ".product-configurator-popup:not(:has(.oe_hidden))",
                run: () => {},
            },
        ];
    }
}

// FIXME: this is a horrible hack to export an object as named exports.
// eslint-disable-next-line no-undef
Object.assign(__exports, createTourMethods("ProductConfigurator", Do, Check));

return __exports;
});
;

/************************************************************************************
*  Filepath: /point_of_sale/static/tests/tours/helpers/ProductScreenTourMethods.js  *
*  Lines: 590                                                                       *
************************************************************************************/
odoo.define('@point_of_sale/../tests/tours/helpers/ProductScreenTourMethods', ['@point_of_sale/../tests/tours/helpers/utils', '@point_of_sale/../tests/tours/helpers/TextAreaPopupTourMethods'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { createTourMethods } = require("@point_of_sale/../tests/tours/helpers/utils");
const { TextAreaPopup } = require("@point_of_sale/../tests/tours/helpers/TextAreaPopupTourMethods");

class Do {
    clickDisplayedProduct(name) {
        return [
            {
                content: `click product '${name}'`,
                trigger: `.product-list .product-name:contains("${name}")`,
            },
        ];
    }

    clickOrderline(name, quantity) {
        return [
            {
                content: "click review button",
                trigger: ".btn-switchpane:contains('Review')",
                mobile: true,
            },
            {
                content: `selecting orderline with product '${name}' and quantity '${quantity}'`,
                trigger: `.order .orderline:not(:has(.selected)) .product-name:contains("${name}") ~ .info-list em:contains("${quantity}")`,
            },
            {
                content: `orderline with product '${name}' and quantity '${quantity}' has been selected`,
                trigger: `.order .orderline.selected .product-name:contains("${name}") ~ .info-list em:contains("${quantity}")`,
                run: () => {},
            },
            {
                content: "go back to the products",
                trigger: ".pos-rightheader .floor-button",
                mobile: true,
            },
        ];
    }

    clickSubcategory(name) {
        return [
            {
                content: `selecting '${name}' subcategory`,
                trigger: `.products-widget > .products-widget-control .category-simple-button:contains("${name}")`,
            },
            {
                content: `'${name}' subcategory selected`,
                trigger: `.breadcrumbs .breadcrumb-button:contains("${name}")`,
                run: () => {},
            },
        ];
    }

    clickHomeCategory() {
        return [
            {
                content: `click Home subcategory`,
                trigger: `.breadcrumbs .breadcrumb-home`,
            },
        ];
    }

    /**
     * Press the numpad in sequence based on the given space-separated keys.
     * NOTE: Maximum of 2 characters because NumberBuffer only allows 2 consecutive
     * fast inputs. Fast inputs is the case in tours.
     *
     * @param {String} keys space-separated numpad keys
     */
    pressNumpad(keys) {
        const numberChars = ". 0 1 2 3 4 5 6 7 8 9".split(" ");
        const modeButtons = "Qty Price Disc".split(" ");
        function generateStep(key) {
            let trigger;
            if (numberChars.includes(key)) {
                trigger = `.numpad .number-char:contains("${key}")`;
            } else if (modeButtons.includes(key)) {
                trigger = `.numpad .mode-button:contains("${key}")`;
            } else if (key === "Backspace") {
                trigger = `.numpad .numpad-backspace`;
            } else if (key === "+/-") {
                trigger = `.numpad .numpad-minus`;
            }
            return {
                content: `'${key}' pressed in product screen numpad`,
                trigger,
            };
        }
        return [
            {
                content: "click review button",
                trigger: ".btn-switchpane:contains('Review')",
                mobile: true,
            },
            ...keys.split(" ").map(generateStep),
            {
                content: "go back to the products",
                trigger: ".pos-rightheader .floor-button",
                mobile: true,
            },
        ];
    }

    clickPayButton(shouldCheck = true) {
        const steps = [
            {
                content: "click pay button",
                trigger: ".product-screen .pay-order-button",
                mobile: false,
            },
            {
                content: "click pay button",
                trigger: ".btn-switchpane:contains('Pay')",
                mobile: true,
            },
        ];
        if (shouldCheck) {
            steps.push({
                content: "now in payment screen",
                trigger: ".pos-content .payment-screen",
                run: () => {},
            });
        }
        return steps;
    }

    clickPartnerButton() {
        return [
            {
                content: "click review button",
                trigger: ".btn-switchpane:contains('Review')",
                mobile: true,
            },
            {
                content: "click customer button",
                trigger: ".product-screen .set-partner",
            },
            {
                content: "partner screen is shown",
                trigger: ".pos-content .partnerlist-screen",
                run: () => {},
            },
        ];
    }

    clickCustomer(name) {
        return [
            {
                content: `select customer '${name}'`,
                trigger: `.partnerlist-screen .partner-line td:contains("${name}")`,
            },
            {
                content: "go back to the products",
                trigger: ".pos-rightheader .floor-button",
                mobile: true,
            },
        ];
    }

    clickOrderlineCustomerNoteButton() {
        return [
            {
                content: "click review button",
                trigger: ".btn-switchpane:contains('Review')",
                mobile: true,
            },
            {
                content: "click more button",
                trigger: ".mobile-more-button",
                mobile: true,
            },
            {
                content: "click customer note button",
                trigger: '.control-buttons .control-button span:contains("Customer Note")',
            },
        ];
    }
    clickRefund() {
        return [
            {
                content: "click review button",
                trigger: ".btn-switchpane:contains('Review')",
                mobile: true,
            },
            {
                content: "click more button",
                trigger: ".mobile-more-button",
                mobile: true,
            },
            {
                trigger: '.control-button:contains("Refund")',
            },
        ];
    }
    confirmOpeningPopup() {
        return [{ trigger: '.opening-cash-control .button:contains("Open session")' }];
    }
    selectPriceList(name) {
        return [
            {
                content: "click review button",
                trigger: ".btn-switchpane:contains('Review')",
                mobile: true,
            },
            {
                content: "click more button",
                trigger: ".mobile-more-button",
                mobile: true,
            },
            { trigger: ".o_pricelist_button" },
            {
                content: `select price list '${name}'`,
                trigger: `.selection-item:contains("${name}")`,
            },
            {
                content: "go back to the products",
                trigger: ".pos-rightheader .floor-button",
                mobile: true,
            },
        ];
    }
    enterOpeningAmount(amount) {
        return [
            {
                content: "enter opening amount",
                trigger: ".cash-input-sub-section > .pos-input",
                run: "text " + amount,
            },
        ];
    }
    changeFiscalPosition(name) {
        return [
            {
                content: "click review button",
                trigger: ".btn-switchpane:contains('Review')",
                mobile: true,
            },
            {
                content: "click more button",
                trigger: ".mobile-more-button",
                mobile: true,
            },
            {
                content: "click fiscal position button",
                trigger: ".o_fiscal_position_button",
            },
            {
                content: "fiscal position screen is shown",
                trigger: `.selection-item:contains("${name}")`,
            },
            {
                content: "go back to the products",
                trigger: ".pos-rightheader .floor-button",
                mobile: true,
            },
        ];
    }
    clickCloseButton() {
        return [
            {
                trigger: ".close-button",
            },
        ];
    }
    closeWithCashAmount(val) {
        return [
            {
                trigger: ".pos-input",
                run: `text ${val}`,
            },
        ];
    }
    clickCloseSession() {
        return [
            {
                trigger: "footer .button:contains('Close Session')",
            },
        ];
    }
    scan_barcode(barcode) {
        return [
            {
                content: `PoS model scan barcode '${barcode}'`,
                trigger: '.pos', // The element here does not really matter as long as it is present
                run: () => { window.posmodel.env.services.barcode_reader.scan(barcode); },
            },
        ];
    }
    scan_ean13_barcode(barcode) {
        return [
            {
                content: `PoS model scan EAN13 barcode '${barcode}'`,
                trigger: '.pos', // The element here does not really matter as long as it is present
                run: () => {
                    const barcode_reader = window.posmodel.env.services.barcode_reader;
                    barcode_reader.scan(
                        barcode_reader.parser.sanitize_ean(barcode)
                    );
                },
            },
        ];
    }
    goBackToMainScreen() {
        return [
            {
                content: "go back to the products",
                trigger: ".pos-rightheader .floor-button",
                mobile: true,
            },
        ]
    }
}

class Check {
    isShown() {
        return [
            {
                content: "product screen is shown",
                trigger: ".product-screen",
                run: () => {},
            },
        ];
    }
    selectedOrderlineHas(name, quantity, price) {
        const res = [
            {
                content: "click review button",
                trigger: ".btn-switchpane:contains('Review')",
                mobile: true,
            },
            {
                // check first if the order widget is there and has orderlines
                content: "order widget has orderlines",
                trigger: ".order .orderlines",
                run: () => {},
            },
            {
                content: `'${name}' is selected`,
                trigger: `.order .orderline.selected .product-name:contains("${name}")`,
                run: function () {}, // it's a check
            },
        ];
        if (quantity) {
            res.push({
                content: `selected line has ${quantity} quantity`,
                trigger: `.order .orderline.selected .product-name:contains("${name}") ~ .info-list em:contains("${quantity}")`,
                run: function () {}, // it's a check
            });
        }
        if (price) {
            res.push({
                content: `selected line has total price of ${price}`,
                trigger: `.order .orderline.selected .product-name:contains("${name}") ~ .price:contains("${price}")`,
                run: function () {}, // it's a check
            });
        }
        res.push({
            content: "go back to the products",
            trigger: ".pos-rightheader .floor-button",
            mobile: true,
        });
        return res;
    }
    orderIsEmpty() {
        return [
            {
                content: "click review button",
                trigger: ".btn-switchpane:contains('Review')",
                mobile: true,
            },
            {
                content: `order is empty`,
                trigger: `.order .order-empty`,
                run: () => {},
            },
            {
                content: "go back to the products",
                trigger: ".pos-rightheader .floor-button",
                mobile: true,
            },
        ];
    }

    productIsDisplayed(name) {
        return [
            {
                content: `'${name}' should be displayed`,
                trigger: `.product-list .product-name:contains("${name}")`,
                run: () => {},
            },
        ];
    }
    totalAmountIs(amount) {
        return [
            {
                content: "click review button",
                trigger: ".btn-switchpane:contains('Review')",
                mobile: true,
            },
            {
                content: `order total amount is '${amount}'`,
                trigger: `.order-container .order .summary .value:contains("${amount}")`,
                run: () => {},
            },
            {
                content: "go back to the products",
                trigger: ".pos-rightheader .floor-button",
                mobile: true,
            },
        ];
    }
    modeIsActive(mode) {
        return [
            {
                content: "click review button",
                trigger: ".btn-switchpane:contains('Review')",
                mobile: true,
            },
            {
                content: `'${mode}' is active`,
                trigger: `.numpad button.selected-mode:contains('${mode}')`,
                run: function () {},
            },
            {
                content: "go back to the products",
                trigger: ".pos-rightheader .floor-button",
                mobile: true,
            },
        ];
    }
    orderlineHasCustomerNote(name, quantity, note) {
        return [
            {
                content: `line has ${quantity} quantity`,
                trigger: `.order .orderline .product-name:contains("${name}") ~ .info-list em:contains("${quantity}")`,
                run: function () {}, // it's a check
            },
            {
                content: `line has '${note}' as customer note`,
                trigger: `.order .orderline .info-list .orderline-note:contains("${note}")`,
                run: function () {}, // it's a check
            },
        ];
    }
    checkSecondCashClosingDetailsLineAmount(amount, sign) {
        return [
            {
                content: "Open menu",
                trigger: ".menu-button",
            },
            {
                content: "Click close session button",
                trigger: ".close-button",
            },
            {
                content: "Check closing details",
                trigger: `.cash-overview tr:nth-child(2) td:contains("${amount}")`,
                run: () => {}, // it's a check
            },
            {
                content: "Check closing details",
                trigger: `.cash-overview tr:nth-child(2) .cash-sign:contains("${sign}")`,
                run: () => {}, // it's a check
            },
        ];
    }
    noDiscountApplied(originalPrice) {
        return [
            {
                content: "click review button",
                trigger: ".btn-switchpane:contains('Review')",
                mobile: true,
            },
            {
                content: "no discount is applied",
                trigger: `.info:not(:contains(${originalPrice}))`,
            },
            {
                content: "go back to the products",
                trigger: ".pos-rightheader .floor-button",
                mobile: true,
            },
        ];
    }
    discountOriginalPriceIs(original_price) {
        return [
            {
                content: "click review button",
                trigger: ".btn-switchpane:contains('Review')",
                mobile: true,
            },
            {
                content: `discount original price is shown`,
                trigger: `s:contains('${original_price}')`,
                run: function () {},
            },
            {
                content: "go back to the products",
                trigger: ".pos-rightheader .floor-button",
                mobile: true,
            },
        ];
    }
    cashDifferenceIs(val) {
        return [
            {
                trigger: `.payment-methods-overview tr td:nth-child(4):contains(${val})`,
                isCheck: true,
            },
        ];
    }
    // Temporarily put it here. It should be in the utility methods for the backend views.
    lastClosingCashIs(val) {
        return [
            {
                trigger: `[name=last_session_closing_cash]:contains(${val})`,
                isCheck: true,
            },
        ];
    }
}

class Execute {
    /**
     * Create an orderline for the given `productName` and `quantity`.
     * - If `unitPrice` is provided, price of the product of the created line
     *   is changed to that value.
     * - If `expectedTotal` is provided, the created orderline (which is the currently
     *   selected orderline) is checked if it contains the correct quantity and total
     *   price.
     *
     * @param {string} productName
     * @param {string} quantity
     * @param {string} unitPrice
     * @param {string} expectedTotal
     */
    addOrderline(productName, quantity, unitPrice = undefined, expectedTotal = undefined) {
        const res = this._do.clickDisplayedProduct(productName);
        res.push(...this._check.selectedOrderlineHas(productName, "1.00"));
        if (unitPrice) {
            res.push(...this._do.pressNumpad("Price"));
            res.push(...this._check.modeIsActive("Price"));
            res.push(...this._do.pressNumpad(unitPrice.toString().split("").join(" ")));
            res.push(...this._do.pressNumpad("Qty"));
            res.push(...this._check.modeIsActive("Qty"));
        }
        for (const char of quantity.toString() == "1" ? "" : quantity.toString()) {
            if (".0123456789".includes(char)) {
                res.push(...this._do.pressNumpad(char));
            } else if ("-".includes(char)) {
                res.push(...this._do.pressNumpad("+/-"));
            }
        }
        if (expectedTotal) {
            res.push(...this._check.selectedOrderlineHas(productName, quantity, expectedTotal));
        } else {
            res.push(...this._check.selectedOrderlineHas(productName, quantity));
        }
        return res;
    }
    addMultiOrderlines(...list) {
        const steps = [];
        for (const [product, qty, price] of list) {
            steps.push(...this.addOrderline(product, qty, price));
        }
        return steps;
    }
    addCustomerNote(note) {
        const res = [];
        res.push(...this._do.clickOrderlineCustomerNoteButton());
        res.push(...TextAreaPopup._do.inputText(note));
        res.push(...TextAreaPopup._do.clickConfirm());
        res.push({
            content: "go back to the products",
            trigger: ".pos-rightheader .floor-button",
            mobile: true,
        });
        return res;
    }
}

// FIXME: this is a horrible hack to export an object as named exports.
// eslint-disable-next-line no-undef
Object.assign(__exports, createTourMethods("ProductScreen", Do, Check, Execute));

return __exports;
});
;

/************************************************************************************
*  Filepath: /point_of_sale/static/tests/tours/helpers/ReceiptScreenTourMethods.js  *
*  Lines: 138                                                                       *
************************************************************************************/
odoo.define('@point_of_sale/../tests/tours/helpers/ReceiptScreenTourMethods', ['@point_of_sale/../tests/tours/helpers/utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { createTourMethods } = require("@point_of_sale/../tests/tours/helpers/utils");

class Do {
    clickNextOrder() {
        return [
            {
                content: "go to next screen",
                trigger: ".receipt-screen .button.next.highlight[name='done']",
                mobile: false,
            },
            {
                content: "go to next screen",
                trigger: ".receipt-screen .btn-switchpane.validation-button.highlight[name='done']",
                mobile: true,
            },
        ];
    }
    clickContinueOrder() {
        return [
            {
                content: "go to next screen",
                trigger: ".receipt-screen .button.next.highlight[name='resume']",
            },
        ];
    }
    setEmail(email) {
        return [
            {
                trigger: ".receipt-screen .input-email input",
                run: `text ${email}`,
            },
        ];
    }
    clickSend(isHighlighted = true) {
        return [
            {
                trigger: `.receipt-screen .input-email .send${isHighlighted ? ".highlight" : ""}`,
            },
        ];
    }
    clickBack() {
        return [
            {
                trigger: ".receipt-screen .button.back",
            },
        ];
    }
}

class Check {
    isShown() {
        return [
            {
                content: "receipt screen is shown",
                trigger: ".pos .receipt-screen",
                run: () => {},
            },
        ];
    }

    receiptIsThere() {
        return [
            {
                content: "there should be the receipt",
                trigger: ".receipt-screen .pos-receipt",
                run: () => {},
            },
        ];
    }

    totalAmountContains(value) {
        return [
            {
                trigger: `.receipt-screen .top-content h1:contains("${value}")`,
                run: () => {},
                mobile: false, // not rendered on mobile
            },
            {
                trigger: `.receipt-screen`,
                run: () => {},
                mobile: true, // On mobile, at least wait for the receipt screen to show
            },
        ];
    }

    emailIsSuccessful() {
        return [
            {
                trigger: `.receipt-screen .notice .successful`,
                run: () => {},
            },
        ];
    }

    customerNoteIsThere(note) {
        return [
            {
                trigger: `.receipt-screen .orderlines .pos-receipt-left-padding:contains("${note}")`,
            },
        ];
    }

    discountAmountIs(value) {
        return [
            {
                trigger: `.pos-receipt>div:contains("Discounts")>span:contains("${value}")`,
                run: () => {},
            },
        ];
    }

    noOrderlineContainsDiscount() {
        return [
            {
                trigger: `.orderlines:not(:contains('->'))`,
                run: () => {},
            },
        ];
    }
}

class Execute {
    nextOrder() {
        return [...this._check.isShown(), ...this._do.clickNextOrder()];
    }
}

// FIXME: this is a horrible hack to export an object as named exports.
// eslint-disable-next-line no-undef
Object.assign(__exports, createTourMethods("ReceiptScreen", Do, Check, Execute));

return __exports;
});
;

/*************************************************************************************
*  Filepath: /point_of_sale/static/tests/tours/helpers/SelectionPopupTourMethods.js  *
*  Lines: 45                                                                         *
*************************************************************************************/
odoo.define('@point_of_sale/../tests/tours/helpers/SelectionPopupTourMethods', ['@point_of_sale/../tests/tours/helpers/utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { createTourMethods } = require("@point_of_sale/../tests/tours/helpers/utils");

class Do {
    clickItem(name) {
        return [
            {
                content: `click selection '${name}'`,
                trigger: `.selection-item:contains("${name}")`,
            },
        ];
    }
}

class Check {
    hasSelectionItem(name) {
        return [
            {
                content: `selection popup has '${name}'`,
                trigger: `.selection-item:contains("${name}")`,
                run: () => {},
            },
        ];
    }
    isShown() {
        return [
            {
                content: "selection popup is shown",
                trigger: ".modal-dialog .popup-selection",
                run: () => {},
            },
        ];
    }
}

// FIXME: this is a horrible hack to export an object as named exports.
// eslint-disable-next-line no-undef
Object.assign(__exports, createTourMethods("SelectionPopup", Do, Check));

return __exports;
});
;

/************************************************************************************
*  Filepath: /point_of_sale/static/tests/tours/helpers/TextAreaPopupTourMethods.js  *
*  Lines: 45                                                                        *
************************************************************************************/
odoo.define('@point_of_sale/../tests/tours/helpers/TextAreaPopupTourMethods', ['@point_of_sale/../tests/tours/helpers/utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { createTourMethods } = require("@point_of_sale/../tests/tours/helpers/utils");

class Do {
    inputText(val) {
        return [
            {
                content: `input text '${val}'`,
                trigger: `.modal-dialog .popup-textarea textarea`,
                run: `text ${val}`,
            },
        ];
    }
    clickConfirm() {
        return [
            {
                content: "confirm text input popup",
                trigger: ".modal-dialog .confirm",
            },
        ];
    }
}

class Check {
    isShown() {
        return [
            {
                content: "text input popup is shown",
                trigger: ".modal-dialog .popup-textarea",
                run: () => {},
            },
        ];
    }
}

// FIXME: this is a horrible hack to export an object as named exports.
// eslint-disable-next-line no-undef
Object.assign(__exports, createTourMethods("TextAreaPopup", Do, Check));

return __exports;
});
;

/*************************************************************************************
*  Filepath: /point_of_sale/static/tests/tours/helpers/TextInputPopupTourMethods.js  *
*  Lines: 45                                                                         *
*************************************************************************************/
odoo.define('@point_of_sale/../tests/tours/helpers/TextInputPopupTourMethods', ['@point_of_sale/../tests/tours/helpers/utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { createTourMethods } = require("@point_of_sale/../tests/tours/helpers/utils");

class Do {
    inputText(val) {
        return [
            {
                content: `input text '${val}'`,
                trigger: `.modal-dialog .popup-textinput input`,
                run: `text ${val}`,
            },
        ];
    }
    clickConfirm() {
        return [
            {
                content: "confirm text input popup",
                trigger: ".modal-dialog .confirm",
            },
        ];
    }
}

class Check {
    isShown() {
        return [
            {
                content: "text input popup is shown",
                trigger: ".modal-dialog .popup-textinput",
                run: () => {},
            },
        ];
    }
}

// FIXME: this is a horrible hack to export an object as named exports.
// eslint-disable-next-line no-undef
Object.assign(__exports, createTourMethods("TextInputPopup", Do, Check));

return __exports;
});
;

/***********************************************************************************
*  Filepath: /point_of_sale/static/tests/tours/helpers/TicketScreenTourMethods.js  *
*  Lines: 245                                                                      *
***********************************************************************************/
odoo.define('@point_of_sale/../tests/tours/helpers/TicketScreenTourMethods', ['@point_of_sale/../tests/tours/helpers/utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { createTourMethods } = require("@point_of_sale/../tests/tours/helpers/utils");

class Do {
    clickNewTicket() {
        return [{ trigger: ".ticket-screen .highlight" }];
    }
    clickDiscard() {
        return [{ trigger: ".ticket-screen button.discard" }];
    }
    selectOrder(orderName) {
        return [
            {
                trigger: `.ticket-screen .order-row > .col:nth-child(2):contains("${orderName}")`,
            },
        ];
    }
    deleteOrder(orderName) {
        return [
            {
                trigger: `.ticket-screen .orders > .order-row > .col:contains("${orderName}") ~ .col[name="delete"]`,
            },
        ];
    }
    selectFilter(name) {
        return [
            {
                content: "open search bar",
                trigger: "button.search",
                mobile: true,
            },
            {
                trigger: `.pos-search-bar .filter`,
            },
            {
                trigger: `.pos-search-bar .filter ul`,
                run: () => {},
            },
            {
                trigger: `.pos-search-bar .filter ul li:contains("${name}")`,
            },
            {
                content: "close search bar",
                trigger: "button.arrow-left",
                mobile: true,
            },
        ];
    }
    search(field, searchWord) {
        return [
            {
                content: "open search bar",
                trigger: "button.search",
                mobile: true,
            },
            {
                trigger: ".pos-search-bar input",
                run: `text ${searchWord}`,
            },
            {
                /**
                 * Manually trigger keyup event to show the search field list
                 * because the previous step do not trigger keyup event.
                 */
                trigger: ".pos-search-bar input",
                run: function () {
                    document
                        .querySelector(".pos-search-bar input")
                        .dispatchEvent(new KeyboardEvent("keyup", { key: "" }));
                },
            },
            {
                trigger: `.pos-search-bar .search ul li:contains("${field}")`,
            },
            {
                content: "close search bar",
                trigger: "button.arrow-left",
                mobile: true,
            },
        ];
    }
    settleTips() {
        return [
            {
                trigger: ".ticket-screen .buttons .settle-tips",
            },
        ];
    }
    clickControlButton(name) {
        return [
            {
                trigger: `.ticket-screen .control-button:contains("${name}")`,
            },
        ];
    }
    clickOrderline(name) {
        return [
            {
                trigger: `.ticket-screen .orderline:not(:has(.selected)) .product-name:contains("${name}")`,
            },
            {
                trigger: `.ticket-screen .orderline.selected .product-name:contains("${name}")`,
                run: () => {},
            },
        ];
    }
    pressNumpad(key) {
        let trigger;
        if (".0123456789".includes(key)) {
            trigger = `.numpad .number-char:contains("${key}")`;
        } else if (key === "Backspace") {
            trigger = `.numpad .numpad-backspace`;
        } else if (key === "+/-") {
            trigger = `.numpad .numpad-minus`;
        }
        return [
            {
                trigger,
            },
        ];
    }
    confirmRefund() {
        return [
            {
                trigger: ".ticket-screen .button.pay-order-button",
            },
        ];
    }
}

class Check {
    checkStatus(orderName, status) {
        return [
            {
                trigger: `.ticket-screen .order-row > .col:nth-child(2):contains("${orderName}") ~ .col:nth-child(6):contains(${status})`,
                run: () => {},
                mobile: false,
            },
            {
                trigger: `.ticket-screen .order-row .col:nth-child(2) div:contains("${orderName}") ~ div:contains(${status})`,
                run: () => {},
                mobile: true,
            },
        ];
    }
    /**
     * Check if the nth row contains the given string.
     * Note that 1st row is the header-row.
     */
    nthRowContains(n, string) {
        return [
            {
                trigger: `.ticket-screen .orders > .order-row:nth-child(${n}):contains("${string}")`,
                run: () => {},
            },
        ];
    }
    contains(string) {
        return [
            {
                trigger: `.ticket-screen .orders:contains("${string}")`,
                run: () => {},
            },
        ];
    }
    noNewTicketButton() {
        return [
            {
                trigger: ".ticket-screen .controls .buttons:nth-child(1):has(.discard)",
                run: () => {},
            },
        ];
    }
    orderWidgetIsNotEmpty() {
        return [
            {
                trigger: ".ticket-screen:not(:has(.order-empty))",
                run: () => {},
            },
        ];
    }
    filterIs(name) {
        return [
            {
                content: "open search bar",
                trigger: "button.search",
                mobile: true,
            },
            {
                trigger: `.ticket-screen .pos-search-bar .filter span:contains("${name}")`,
                run: () => {},
            },
            {
                content: "close search bar",
                trigger: "button.arrow-left",
                mobile: true,
            },
        ];
    }
    partnerIs(name) {
        return [
            {
                trigger: `.ticket-screen .set-partner:contains("${name}")`,
                run: () => {},
            },
        ];
    }
    toRefundTextContains(text) {
        return [
            {
                trigger: `.ticket-screen .to-refund-highlight:contains("${text}")`,
                run: () => {},
            },
        ];
    }
    refundedNoteContains(text) {
        return [
            {
                trigger: `.ticket-screen .refund-note:contains("${text}")`,
                run: () => {},
            },
        ];
    }
    tipContains(amount) {
        return [
            {
                trigger: `.ticket-screen .tip-cell:contains("${amount}")`,
                run: () => {},
            },
        ];
    }
}

class Execute {}

// FIXME: this is a horrible hack to export an object as named exports.
// eslint-disable-next-line no-undef
Object.assign(__exports, createTourMethods("TicketScreen", Do, Check, Execute));

return __exports;
});
;

/*****************************************************************
*  Filepath: /point_of_sale/static/tests/tours/helpers/utils.js  *
*  Lines: 151                                                    *
*****************************************************************/
odoo.define('@point_of_sale/../tests/tours/helpers/utils', [], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

/**
 * USAGE
 * -----
 *
 * ```
 * import const { startSteps, getSteps, createTourMethods } from "@point_of_sale/utils";
 * import const { Other } from "@point_of_sale/../tests/OtherMethods";
 *
 * // 1. Define classes Do, Check and Execute having methods that
 * //    each return array of tour steps.
 * class Do {
 *   click() {
 *      return [{ content: 'click button', trigger: '.button' }];
 *   }
 * }
 * class Check {
 *   isHighligted() {
 *      return [{ content: 'button is highlighted', trigger: '.button.highlight', run: () => {} }];
 *   }
 * }
 * // Notice that Execute has access to methods defined in Do and Check classes
 * // Also, we can compose steps from other module.
 * class Execute {
 *   complexSteps() {
 *      return [...this._do.click(), ...this._check.isHighlighted(), ...Other._exec.complicatedSteps()];
 *   }
 * }
 *
 * // 2. Instantiate these class definitions using `createTourMethods`.
 * //    The returned object gives access to the defined methods above
 * //    thru the do, check and exec properties.
 * //    - do gives access to the methods defined in Do class
 * //    - check gives access to the methods defined in Check class
 * //    - exec gives access to the methods defined in Execute class
 * const Screen = createTourMethods('Screen', Do, Check, Execute);
 *
 * // 3. Call `startSteps` to start empty steps.
 * startSteps();
 *
 * // 4. Call the tour methods to populate the steps created by `startSteps`.
 * Screen.do.click();               // return of this method call is added to steps created by startSteps
 * Screen.check.isHighlighted()     // same as above
 * Screen.exec.complexSteps()     // same as above
 *
 * // 5. Call `getSteps` which returns the generated tour steps.
 * const steps = getSteps();
 * ```
 */
let steps = [];

__exports.startSteps = startSteps; function startSteps() {
    // always start by waiting for loading to finish
    steps = [
        {
            content: "wait for loading to finish",
            trigger: "body:not(:has(.loader))",
            run: function () {},
        },
    ];
}

__exports.getSteps = getSteps; function getSteps() {
    return steps;
}

// this is the method decorator
// when the method is called, the generated steps are added
// to steps
const methodProxyHandler = {
    apply(target, thisArg, args) {
        const res = target.call(thisArg, ...args);
        if (odoo.debug) {
            // This step is added before the real steps.
            // Very useful when debugging because we know which
            // method call failed and what were the parameters.
            const constructor = thisArg.constructor.name.split(" ")[1];
            const methodName = target.name.split(" ")[1];
            const argList = args.map((a) => (typeof a === "string" ? `'${a}'` : `${a}`)).join(", ");
            steps.push({
                content: `DOING "${constructor}.${methodName}(${argList})"`,
                trigger: ".pos",
                run: () => {},
            });
        }
        steps.push(...res);
        return res;
    },
};

// we proxy get of the method to decorate the method call
const proxyHandler = {
    get(target, key) {
        const method = target[key];
        if (!method) {
            throw new Error(`Tour method '${key}' is not available.`);
        }
        return new Proxy(method.bind(target), methodProxyHandler);
    },
};

/**
 * Creates an object with `do`, `check` and `exec` properties which are instances of
 * the given `Do`, `Check` and `Execute` classes, respectively. Calling methods
 * automatically adds the returned steps to the steps created by `startSteps`.
 *
 * There are however underscored version (_do, _check, _exec).
 * Calling methods thru the underscored version does not automatically
 * add the returned steps to the current steps array. Useful when composing
 * steps from other methods.
 *
 * @param {String} name
 * @param {Function} Do class containing methods which return array of tour steps
 * @param {Function} Check similar to Do class but the steps are mainly for checking
 * @param {Function} Execute class containing methods which return array of tour steps
 *                   but has access to methods of Do and Check classes via .do and .check,
 *                   respectively. Here, we define methods that return tour steps based
 *                   on the combination of steps from Do and Check.
 */
__exports.createTourMethods = createTourMethods; function createTourMethods(name, Do, Check = class {}, Execute = class {}) {
    Object.defineProperty(Do, "name", { value: `${name}.do` });
    Object.defineProperty(Check, "name", { value: `${name}.check` });
    Object.defineProperty(Execute, "name", {
        value: `${name}.exec`,
    });
    const methods = { do: new Do(), check: new Check(), exec: new Execute() };
    // Allow Execute to have access to methods defined in Do and Check
    // via do and exec, respectively.
    methods.exec._do = methods.do;
    methods.exec._check = methods.check;
    return {
        Do,
        Check,
        Execute,
        [name]: {
            do: new Proxy(methods.do, proxyHandler),
            check: new Proxy(methods.check, proxyHandler),
            exec: new Proxy(methods.exec, proxyHandler),
            _do: methods.do,
            _check: methods.check,
            _exec: methods.exec,
        },
    };
}

return __exports;
});
;

/******************************************************************
*  Filepath: /point_of_sale/static/tests/tours/pricelist_tour.js  *
*  Lines: 337                                                     *
******************************************************************/
odoo.define('@point_of_sale/../tests/tours/pricelist_tour', ['@web/core/registry', '@web/core/utils/numbers', '@web/core/utils/strings'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */
/* global posmodel */

const { registry } = require("@web/core/registry");
const { roundDecimals: round_di } = require("@web/core/utils/numbers");
const { nbsp } = require("@web/core/utils/strings");

function assert(condition, message) {
    if (!condition) {
        throw message || "Assertion failed";
    }
}

function assertProductPrice(product, pricelist_name, quantity, expected_price) {
    return function () {
        var pricelist = posmodel.pricelists.find((pricelist) => pricelist.name === pricelist_name);
        var frontend_price = product.get_price(pricelist, quantity);
        frontend_price = round_di(frontend_price, posmodel.dp["Product Price"]);

        var diff = Math.abs(expected_price - frontend_price);

        assert(
            diff < 0.001,
            JSON.stringify({
                product: product.id,
                product_display_name: product.display_name,
                pricelist_name: pricelist_name,
                quantity: quantity,
            }) +
                " DOESN'T MATCH -> " +
                expected_price +
                " != " +
                frontend_price
        );

        return Promise.resolve();
    };
}

// The global posmodel is only present when the posmodel is instanciated
// So, wait for everythiong to be loaded
var steps = [
    {
        // Leave category displayed by default
        content: "waiting for loading to finish",
        extra_trigger: "body .pos:not(:has(.loader))", // Pos has finished loading
        trigger: "body:not(:has(.o_loading_indicator))", // WebClient has finished Loading
        run: function () {
            var product_wall_shelf = posmodel.db.search_product_in_category(
                0,
                "Wall Shelf Unit"
            )[0];
            var product_small_shelf = posmodel.db.search_product_in_category(0, "Small Shelf")[0];
            var product_magnetic_board = posmodel.db.search_product_in_category(
                0,
                "Magnetic Board"
            )[0];
            var product_monitor_stand = posmodel.db.search_product_in_category(
                0,
                "Monitor Stand"
            )[0];
            var product_desk_pad = posmodel.db.search_product_in_category(0, "Desk Pad")[0];
            var product_letter_tray = posmodel.db.search_product_in_category(0, "Letter Tray")[0];
            var product_whiteboard = posmodel.db.search_product_in_category(0, "Whiteboard")[0];

            assertProductPrice(product_letter_tray, "Public Pricelist", 0, 4.8)()
                .then(assertProductPrice(product_letter_tray, "Public Pricelist", 1, 4.8))
                .then(assertProductPrice(product_letter_tray, "Fixed", 1, 1))
                .then(assertProductPrice(product_wall_shelf, "Fixed", 1, 2))
                .then(assertProductPrice(product_small_shelf, "Fixed", 1, 13.95))
                .then(assertProductPrice(product_wall_shelf, "Percentage", 1, 0))
                .then(assertProductPrice(product_small_shelf, "Percentage", 1, 0.03))
                .then(assertProductPrice(product_magnetic_board, "Percentage", 1, 1.98))
                .then(assertProductPrice(product_wall_shelf, "Formula", 1, 6.86))
                .then(assertProductPrice(product_small_shelf, "Formula", 1, 2.99))
                .then(assertProductPrice(product_magnetic_board, "Formula", 1, 11.98))
                .then(assertProductPrice(product_monitor_stand, "Formula", 1, 8.19))
                .then(assertProductPrice(product_desk_pad, "Formula", 1, 6.98))
                .then(assertProductPrice(product_wall_shelf, "min_quantity ordering", 1, 2))
                .then(assertProductPrice(product_wall_shelf, "min_quantity ordering", 2, 1))
                .then(assertProductPrice(product_letter_tray, "Category vs no category", 1, 2))
                .then(assertProductPrice(product_letter_tray, "Category", 1, 2))
                .then(assertProductPrice(product_wall_shelf, "Product template", 1, 1))
                .then(assertProductPrice(product_wall_shelf, "Dates", 1, 2))
                .then(assertProductPrice(product_small_shelf, "Pricelist base rounding", 1, 13.95))
                .then(assertProductPrice(product_whiteboard, "Public Pricelist", 1, 3.2))
                .then(function () {
                    $(".pos").addClass("done-testing");
                });
        },
    },
    {
        trigger: '.opening-cash-control .button:contains("Open session")',
    },
];

steps = steps.concat([
    {
        content: "wait for unit tests to finish",
        trigger: ".pos.done-testing",
        run: function () {}, // it's a check
    },
    {
        content: "click category switch",
        trigger: ".breadcrumb-home",
        run: "click",
    },
    {
        content: "click review button",
        trigger: ".btn-switchpane:contains('Review')",
        mobile: true,
    },
    {
        content: "click more button",
        trigger: ".mobile-more-button",
        mobile: true,
    },
    {
        content: "click pricelist button",
        trigger: ".control-button.o_pricelist_button",
    },
    {
        content: "verify default pricelist is set",
        trigger: ".selection-item.selected:contains('Public Pricelist')",
        run: function () {}, // it's a check
    },
    {
        content: "select fixed pricelist",
        trigger: ".selection-item:contains('Fixed')",
    },
    {
        content: "open partner list",
        trigger: "button.set-partner",
    },
    {
        content: "select Deco Addict",
        trigger: ".partner-line:contains('Deco Addict')",
    },
    {
        content: "click more button",
        trigger: ".mobile-more-button",
        mobile: true,
    },
    {
        content: "click pricelist button",
        trigger: ".control-button.o_pricelist_button",
    },
    {
        content: "verify pricelist changed",
        trigger: ".selection-item.selected:contains('Public Pricelist')",
        run: function () {}, // it's a check
    },
    {
        content: "cancel pricelist dialog",
        trigger: ".button.cancel:visible",
    },
    {
        content: "open customer list",
        trigger: "button.set-partner",
    },
    {
        content: "select Lumber Inc",
        trigger: ".partner-line:contains('Lumber Inc')",
    },
    {
        content: "click more button",
        trigger: ".mobile-more-button",
        mobile: true,
    },
    {
        content: "click pricelist button",
        trigger: ".control-button.o_pricelist_button",
    },
    {
        content: "verify pricelist remained public pricelist ('Not loaded' is not available)",
        trigger: ".selection-item.selected:contains('Public Pricelist')",
        run: function () {}, // it's a check
    },
    {
        content: "cancel pricelist dialog",
        trigger: ".button.cancel:visible",
    },
    {
        content: "go back to the products",
        trigger: ".floor-button",
        mobile: true,
    },
    {
        content: "order 1 kg shelf",
        trigger: ".product:contains('Wall Shelf')",
    },
    {
        content: "click review button",
        trigger: ".btn-switchpane:contains('Review')",
        mobile: true,
    },
    {
        trigger:
            ".order-container .orderlines .orderline.selected .product-name:contains('Wall Shelf')",
        extra_trigger:
            ".order-container .orderlines .orderline.selected .product-name:contains('Wall Shelf') ~ .info-list .info em:contains('1.0')",
        run: function () {},
    },
    {
        content: "click more button",
        trigger: ".mobile-more-button",
        mobile: true,
    },
    {
        content: "click pricelist button",
        trigger: ".control-button.o_pricelist_button",
    },
    {
        content: "select fixed pricelist",
        trigger: ".selection-item:contains('min_quantity ordering')",
    },
    {
        content: "change qty to 2 kg",
        trigger: ".numpad button.input-button:visible:contains('2')",
    },
    {
        content: "qty of Wall Shelf line should be 2",
        trigger:
            ".order-container .orderlines .orderline.selected .product-name:contains('Wall Shelf')",
        extra_trigger:
            ".order-container .orderlines .orderline.selected .product-name:contains('Wall Shelf') ~ .info-list .info em:contains('2.0')",
        run: function () {},
    },
    {
        content: "verify that unit price of shelf changed to $1",
        trigger: `.total > .value:contains('$${nbsp}2.00')`,
        run: function () {},
    },
    {
        content: "go back to the products",
        trigger: ".floor-button",
        mobile: true,
    },
    {
        content: "order different shelf",
        trigger: ".product:contains('Small Shelf')",
    },
    {
        content: "click review button",
        trigger: ".btn-switchpane:contains('Review')",
        mobile: true,
    },
    {
        content: "Small Shelf line should be selected with quantity 1",
        trigger:
            ".order-container .orderlines .orderline.selected .product-name:contains('Small Shelf')",
        extra_trigger:
            ".order-container .orderlines .orderline.selected .product-name:contains('Small Shelf') ~ .info-list .info em:contains('1.0')",
        run: function () {},
    },
    {
        content: "change to price mode",
        trigger: ".numpad button:contains('Price')",
    },
    {
        content: "make sure price mode is activated",
        trigger: ".numpad button.selected-mode:contains('Price')",
        run: function () {},
    },
    {
        content: "manually override the unit price of these shelf to $5",
        trigger: ".numpad button.input-button:visible:contains('5')",
    },
    {
        content: "Small Shelf line should be selected with unit price of 5",
        trigger:
            ".order-container .orderlines .orderline.selected .product-name:contains('Small Shelf')",
        extra_trigger:
            ".order-container .orderlines .orderline.selected .product-name:contains('Small Shelf') ~ .price:contains('5.0')",
    },
    {
        content: "change back to qty mode",
        trigger: ".numpad button:contains('Qty')",
    },
    {
        content: "make sure qty mode is activated",
        trigger: ".numpad button.selected-mode:contains('Qty')",
        run: function () {},
    },
    {
        content: "click more button",
        trigger: ".mobile-more-button",
        mobile: true,
    },
    {
        content: "click pricelist button",
        trigger: ".control-button.o_pricelist_button",
    },
    {
        content: "select public pricelist",
        trigger: ".selection-item:contains('Public Pricelist')",
    },
    {
        content:
            "verify that the boni shelf have been recomputed and the shelf have not (their price was manually overridden)",
        trigger: `.total > .value:contains('$${nbsp}8.96')`,
    },
    {
        content: "click more button",
        trigger: ".mobile-more-button",
        mobile: true,
    },
    {
        content: "click pricelist button",
        trigger: ".control-button.o_pricelist_button",
    },
    {
        content: "select fixed pricelist",
        trigger: ".selection-item:contains('min_quantity ordering')",
    },
    {
        content: "open the navbar menu",
        trigger: ".menu-button",
    },
    {
        content: "confirm closing the frontend",
        trigger: ".close-button",
        run: function () {}, //it's a check,
    },
]);

registry.category("web_tour.tours").add("pos_pricelist", { 
    test: true, 
    url: "/pos/ui", 
    steps: () => steps,
});

return __exports;
});
;

/*****************************************************************
*  Filepath: /project/static/tests/tours/personal_stage_tour.js  *
*  Lines: 86                                                     *
*****************************************************************/
odoo.define('@project/../tests/tours/personal_stage_tour', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('personal_stage_tour', {
    test: true,
    url: '/web',
    steps: () => [stepUtils.showAppsMenuItem(), {
    trigger: '.o_app[data-menu-xmlid="project.menu_main_pm"]',
}, {
    content: "Open Pig Project",
    trigger: '.o_kanban_record:contains("Pig")',
}, {
    // Default is grouped by stage, user should not be able to create/edit a column
    content: "Check that there is no create column",
    trigger: "body:not(.o_column_quick_create)",
    run: function () {},
}, {
    content: "Check that there is no create column",
    trigger: "body:not(.o_column_edit)",
    run: function () {},
}, {
    content: "Check that there is no create column",
    trigger: "body:not(.o_column_delete)",
    run: function () {},
}, {
    content: "Go to tasks",
    trigger: 'button[data-menu-xmlid="project.menu_project_management"]',
},{
    content: "Go to my tasks", // My tasks is grouped by personal stage by default
    trigger: 'a[data-menu-xmlid="project.menu_project_management_my_tasks"]',
}, {
    content: "Check that we can create a new stage",
    trigger: '.o_column_quick_create .o_quick_create_folded'
}, {
    content: "Create a new personal stage",
    trigger: 'input.form-control',
    run: 'text Never',
}, {
    content: "Confirm create",
    trigger: '.o_kanban_add',
}, {
    content: "Check that column exists",
    trigger: '.o_kanban_header:contains("Never")',
    run: function () {},
}, {
    content: 'Open column edit dropdown',
    trigger: '.o_kanban_header:eq(0)',
    run: function () {
        document.querySelector('.o_kanban_config.dropdown .dropdown-toggle').dispatchEvent(new Event('click'));
    },
}, {
    content: "Try editing inbox",
    trigger: ".dropdown-item.o_column_edit",
}, {
    content: "Change title",
    trigger: 'div.o_field_char[name="name"] input',
    run: 'text  (Todo)',
}, {
    content: "Save changes",
    trigger: '.btn-primary:contains("Save")',
}, {
    content: "Check that column was updated",
    trigger: '.o_kanban_header:contains("Todo")',
}, {
    content: "Create a personal task from the quick create form",
    trigger: '.o-kanban-button-new',
}, {
    content: "Create a new personal task",
    trigger: 'input.o_input',
    run: 'text New Test Task',
}, {
    content: "Confirm create",
    trigger: '.o_kanban_add',
}, {
    content: "Check that task exists",
    trigger: '.o_kanban_record_title:contains("New Test Task")',
    run: function () {},
}]});

return __exports;
});
;

/*************************************************************************
*  Filepath: /project/static/tests/tours/project_burndown_chart_tour.js  *
*  Lines: 82                                                             *
*************************************************************************/
odoo.define('@project/../tests/tours/project_burndown_chart_tour', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('burndown_chart_tour', {
    test: true,
    url: '/web',
    steps: () => [stepUtils.showAppsMenuItem(), {
    trigger: '.o_app[data-menu-xmlid="project.menu_main_pm"]',
}, {
    content: 'Open "Burndown Chart Test" project menu',
    trigger: '.o_kanban_record:contains("Burndown Chart Test") .o_dropdown_kanban .dropdown-toggle',
}, {
    content: `Open "Burndown Chart Test" project's "Burndown Chart" view`,
    trigger: '.o_kanban_record:contains("Burndown Chart Test") .o_kanban_manage_reporting div[role="menuitem"] a:contains("Burndown Chart")',
}, {
    content: 'The sort buttons are not rendered',
    trigger: '.o_graph_renderer:not(:has(.btn-group[role=toolbar][aria-label="Sort graph"]))',
    extra_trigger: '.o_graph_renderer',
}, {
    content: 'Remove the project search "Burndown Chart Test"',
    trigger: '.o_searchview_facet:contains("Burndown Chart Test") .o_facet_remove',
}, {
    content: 'Search Burndown Chart',
    trigger: 'input.o_searchview_input',
    run: `text Burndown`,
}, {
    content: 'Validate search',
    trigger: '.o_searchview_autocomplete .o_menu_item:contains("Project")',
}, {
    content: 'Remove the group by "Date: Month > Stage"',
    trigger: '.o_searchview_facet:contains("Date: Month") .o_facet_remove',
}, {
    content: 'A "The Burndown Chart must be grouped by Date and Stage" notification is shown when trying to remove the group by "Date: Month > Stage"',
    trigger: '.o_notification_manager .o_notification:contains("The Burndown Chart must be grouped by Date and Stage") button.o_notification_close',
}, {
    content: 'Open the search panel menu',
    trigger: '.o_control_panel .o_searchview_dropdown_toggler',
}, {
    content: 'The Stage group menu item is invisible',
    trigger: '.o_group_by_menu:not(:has(.o_menu_item:contains("Stage")))',
}, {
    content: 'Open the Date group by sub menu',
    trigger: '.o_group_by_menu button.o_menu_item:contains("Date")',
}, {
    content: 'Click on the selected Date sub menu',
    trigger: '.o_group_by_menu button.o_menu_item:contains("Date") + * .dropdown-item.selected',
    run: function () {
        this.$anchor[0].dispatchEvent(new Event('click'));
    },
}, {
    content: 'A "The Burndown Chart must be grouped by Date" notification is shown when trying to remove the group by "Date: Month > Stage"',
    trigger: '.o_notification_manager .o_notification:contains("The Burndown Chart must be grouped by Date") button.o_notification_close',
}, {
    content: 'Open the search panel menu',
    trigger: '.o_control_panel .o_searchview_dropdown_toggler',
}, {
    content: 'Open the Date filter sub menu',
    trigger: '.o_filter_menu button.o_menu_item:contains("Date")',
}, {
    content: 'Click on the first Date filter sub menu',
    trigger: '.o_filter_menu .o_menu_item:contains("Date") + * .dropdown-item:first-child',
    run: function () {
        this.$anchor[0].dispatchEvent(new Event('click'));
    },
}, {
    content: 'Close the Date filter menu',
    trigger: '.o_graph_renderer',
}, {
    content: 'Open the search panel menu',
    trigger: '.o_control_panel .o_searchview_dropdown_toggler',
}, {
    content: 'The comparison menu is not rendered',
    trigger: ':not(:has(.o_comparison_menu))',
}]});

return __exports;
});
;

/******************************************************************
*  Filepath: /project/static/tests/tours/project_sharing_tour.js  *
*  Lines: 115                                                     *
******************************************************************/
odoo.define('@project/../tests/tours/project_sharing_tour', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

const projectSharingSteps = [...stepUtils.goToAppSteps("project.menu_main_pm", 'Go to the Project App.'), {
    trigger: '.o_kanban_record:contains("Project Sharing") .o_dropdown_kanban .dropdown-toggle',
    content: 'Open the project dropdown.'
}, {
    trigger: '.o_kanban_record:contains("Project Sharing") .dropdown-menu a:contains("Share")',
    content: 'Start editing the project.',
}, {
    trigger: 'div.o_field_radio[name="access_mode"] div.o_radio_item > input[data-value="edit"]',
    content: 'Select "Edit" as Access mode in the "Share Project" wizard.',
}, {
    trigger: '.o_field_many2many_tags_email[name=partner_ids] input',
    extra_trigger: 'label[for=partner_ids_0]:contains("Invite People")',
    content: 'Select the user portal as collaborator to the "Project Sharing" project.',
    run: 'text Georges',
}, {
    trigger: '.ui-autocomplete a.dropdown-item:contains("Georges")',
    in_modal: false,
}, {
    trigger: 'footer > button[name="action_send_mail"]',
    content: 'Confirm the project sharing with this portal user.',
}, {
    trigger: '.o_web_client',
    content: 'Go to project portal view to select the "Project Sharing" project',
    run: function () {
        window.location.href = window.location.origin + '/my/projects';
    },
}, {
    id: 'project_sharing_feature',
    trigger: 'table > tbody > tr a:has(span:contains(Project Sharing))',
    content: 'Select "Project Sharing" project to go to project sharing feature for this project.',
}, {
    trigger: 'iframe .o_project_sharing',
    content: 'Wait the project sharing feature be loaded',
    run: function () {},
}, {
    trigger: 'iframe button.o-kanban-button-new',
    content: 'Click "Create" button',
    run: 'click',
}, {
    trigger: 'iframe .o_kanban_quick_create .o_field_widget[name="name"] input',
    content: 'Create Task',
    run: 'text Test Create Task',
}, {
    trigger: 'iframe .o_kanban_quick_create .o_kanban_edit',
    content: 'Go to the form view of this new task',
}, {
    trigger: 'iframe div[name="stage_id"] div.o_statusbar_status button[aria-checked="false"]:contains(Done)',
    content: 'Change the stage of the task.',
}, {
    trigger: 'iframe .o_portal_chatter_composer_input .o_portal_chatter_composer_body textarea',
    content: 'Write a message in the chatter of the task',
    run: 'text I create a new task for testing purpose.',
}, {
    trigger: 'iframe .o_portal_chatter_composer_input .o_portal_chatter_composer_body button[name="send_message"]',
    content: 'Send the message',
}, {
    trigger: 'iframe ol.breadcrumb > li.o_back_button > a:contains(Project Sharing)',
    content: 'Go back to the kanban view',
}, {
    trigger: 'iframe .o_searchview_dropdown_toggler',
    content: 'open the search panel menu',
}, {
    trigger: 'iframe .o_filter_menu .dropdown-item:first-child',
    content: 'click on the first item in the filter menu',
}, {
    trigger: 'iframe .o_group_by_menu .dropdown-item:first-child',
    content: 'click on the first item in the group by menu',
}, {
    trigger: 'iframe .o_favorite_menu .o_add_favorite',
    content: 'open accordion "save current search" in favorite menu',
}, {
    trigger: 'iframe .o_favorite_menu .o_accordion_values .o_save_favorite',
    content: 'click to "save" button in favorite menu',
}, {
    trigger: 'iframe .o_filter_menu .dropdown-item:first-child',
    content: 'click on the first item in the filter menu',
}, {
    trigger: 'iframe .o_group_by_menu .dropdown-item:first-child',
    content: 'click on the first item in the group by menu',
}, {
    trigger: 'iframe .o_favorite_menu .o_accordion_values .o_save_favorite',
    content: 'click to "save" button in favorite menu',
}, {
    trigger: 'iframe button.o_switch_view.o_list',
    content: 'Go to the list view',
}];

registry.category("web_tour.tours").add('project_sharing_tour', {
    test: true,
    url: '/web',
    steps: () => {
        return projectSharingSteps;
    } 
});

registry.category("web_tour.tours").add("portal_project_sharing_tour", {
    test: true,
    url: "/my/projects",
    steps: () => {
        // The begining of the project sharing feature
        const projectSharingStepIndex = projectSharingSteps.findIndex(s => s?.id === 'project_sharing_feature');
        return projectSharingSteps.slice(projectSharingStepIndex, projectSharingSteps.length);
    }
});

return __exports;
});
;

/**********************************************************
*  Filepath: /project/static/tests/tours/project_tour.js  *
*  Lines: 87                                              *
**********************************************************/
odoo.define('@project/../tests/tours/project_tour', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('project_test_tour', {
    test: true,
    url: '/web',
    steps: () => [
    stepUtils.showAppsMenuItem(), {
        trigger: '.o_app[data-menu-xmlid="project.menu_main_pm"]',
    }, {
        trigger: '.o-kanban-button-new',
        extra_trigger: '.o_project_kanban',
        width: 200,
    }, {
        trigger: '.o_project_name input',
        run: 'text New Project',
        id: 'project_creation',
    }, {
        trigger: '.o_open_tasks',
        run: function (actions) {
            actions.auto('.modal:visible .btn.btn-primary');
        },
    }, {
        trigger: ".o_kanban_project_tasks .o_column_quick_create .input-group",
        run: function (actions) {
            actions.text("New", this.$anchor.find("input"));
        },
    }, {
        trigger: ".o_kanban_project_tasks .o_column_quick_create .o_kanban_add",
        auto: true,
    }, {
        trigger: ".o_kanban_project_tasks .o_column_quick_create .input-group",
        extra_trigger: '.o_kanban_group',
        run: function (actions) {
            actions.text("Done", this.$anchor.find("input"));
        },
    }, {
        trigger: ".o_kanban_project_tasks .o_column_quick_create .o_kanban_add",
        auto: true,
    }, {
        trigger: '.o-kanban-button-new',
        extra_trigger: '.o_kanban_group:eq(0)'
    }, {
        trigger: '.o_kanban_quick_create div.o_field_char[name=display_name] input',
        extra_trigger: '.o_kanban_project_tasks',
        run: 'text New task'
    }, {
        trigger: '.o_kanban_quick_create .o_kanban_add',
        extra_trigger: '.o_kanban_project_tasks',
        id: "quick_create_tasks",
    }, {
        trigger: '.o_field_text[name="name"] textarea',
        content: 'Set task name',
        run: 'text New task',
    }, {
        trigger: 'div[name="user_ids"].o_field_many2many_tags_avatar input',
        content: 'Assign the task to you',
        run: 'click',
    }, {
        trigger: 'ul.ui-autocomplete a .o_avatar_many2x_autocomplete',
        content: 'Assign the task to you',
    }, {
        trigger: 'a[name="sub_tasks_page"]',
        content: 'Open sub-tasks notebook section',
        run: 'click',
    }, {
        trigger: '.o_field_subtasks_one2many .o_list_renderer a[role="button"]',
        content: 'Add a subtask',
        run: 'click',
    }, {
        trigger: '.o_field_subtasks_one2many div[name="name"] input',
        content: 'Set subtask name',
        run: 'text new subtask'
    }, {
        trigger: 'button[special="save"]',
        extra_trigger: '.o_field_many2many_tags_avatar .o_m2m_avatar',
        content: 'Save task',
    },
]});

return __exports;
});
;

/***********************************************************************
*  Filepath: /project/static/tests/tours/project_update_tour_tests.js  *
*  Lines: 186                                                          *
***********************************************************************/
odoo.define('@project/../tests/tours/project_update_tour_tests', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

function openProjectUpdateAndReturnToTasks(view, viewClass) {
    const legacyViewClass = viewClass.replace("o_", "o_legacy_");
    return [{
            trigger: '.o_project_updates_breadcrumb',
            content: 'Open Project Update from view : ' + view,
            extra_trigger: `.${viewClass}, .${legacyViewClass}`,
        }, {
            trigger: ".o-kanban-button-new",
            content: "Create a new update from project task view : " + view,
            extra_trigger: '.o_project_update_kanban_view',
        }, {
            trigger: "button.o_form_button_cancel",
            content: "Discard project update from project task view : " + view,
        }, {
            trigger: ".o_switch_view.o_list",
            content: "Go to list of project update from view " + view,
        }, {
            trigger: '.o_back_button',
            content: 'Go back to the task view : ' + view,
            // extra_trigger: '.o_list_view', // FIXME: [XBO] uncomment it when the sample data will be displayed after discarding the creation of a project update record.
        },
    ];
}

registry.category("web_tour.tours").add('project_update_tour', {
    test: true,
    url: '/web',
    steps: () => [stepUtils.showAppsMenuItem(), {
    trigger: '.o_app[data-menu-xmlid="project.menu_main_pm"]',
}, {
    trigger: '.o-kanban-button-new',
    extra_trigger: '.o_project_kanban',
    width: 200,
}, {
    trigger: '.o_project_name input',
    run: 'text New Project'
}, {
    trigger: '.o_open_tasks',
    run: function (actions) {
        actions.auto('.modal:visible .btn.btn-primary');
    },
}, {
    trigger: ".o_kanban_project_tasks .o_column_quick_create .input-group",
    run: function (actions) {
        actions.text("New", this.$anchor.find("input"));
    },
}, {
    trigger: ".o_kanban_project_tasks .o_column_quick_create .o_kanban_add",
    auto: true,
}, {
    trigger: ".o_kanban_project_tasks .o_column_quick_create .input-group",
    extra_trigger: '.o_kanban_group',
    run: function (actions) {
        actions.text("Done", this.$anchor.find("input"));
    },
}, {
    trigger: ".o_kanban_project_tasks .o_column_quick_create .o_kanban_add",
    auto: true,
}, {
    trigger: '.o-kanban-button-new',
    extra_trigger: '.o_kanban_group:eq(0)'
}, {
    trigger: '.o_kanban_quick_create div.o_field_char[name=display_name] input',
    extra_trigger: '.o_kanban_project_tasks',
    run: 'text New task'
}, {
    trigger: '.o_kanban_quick_create .o_kanban_add',
    extra_trigger: '.o_kanban_project_tasks'
}, {
    trigger: '.o-kanban-button-new',
    extra_trigger: '.o_kanban_group:eq(0)'
}, {
    trigger: '.o_kanban_quick_create div.o_field_char[name=display_name] input',
    extra_trigger: '.o_kanban_project_tasks',
    run: 'text Second task'
}, {
    trigger: '.o_kanban_quick_create .o_kanban_add',
    extra_trigger: '.o_kanban_project_tasks'
}, {
    trigger: '.o_kanban_group:nth-child(2) .o_kanban_header',
    run: function () {
        document.querySelector('.o_kanban_group:nth-child(2) .o_kanban_config.dropdown .dropdown-toggle').dispatchEvent(new Event('click'));
    }
}, {
    trigger: ".dropdown-item.o_column_edit",
}, {
    trigger: ".o_field_widget[name=fold] input",
}, {
    trigger: ".modal-footer button",
}, {
    trigger: ".o_kanban_record .oe_kanban_content",
    extra_trigger: '.o_kanban_project_tasks',
    run: "drag_and_drop .o_kanban_group:eq(1) ",
}, {
    trigger: ".o_project_updates_breadcrumb",
    content: 'Open Updates'
}, {
    trigger: ".o_add_milestone a",
    content: "Add a first milestone"
}, {
    trigger: "div.o_field_widget[name=name] input",
    run: 'text New milestone'
}, {
    trigger: "input[data-field=deadline]",
    run: 'text 12/12/2099'
}, {
    trigger: ".modal-footer .o_form_button_save"
}, {
    trigger: ".o_add_milestone a",
}, {
    trigger: "div.o_field_widget[name=name] input",
    run: 'text Second milestone'
}, {
    trigger: "input[data-field=deadline]",
    run: 'text 12/12/2022'
}, {
    trigger: ".modal-footer .o_form_button_save"
}, {
    trigger: ".o_rightpanel_milestone:eq(1) .o_milestone_detail",
}, {
    trigger: "input[data-field=deadline]",
    run: 'text 12/12/2100'
}, {
    trigger: ".modal-footer .o_form_button_save"
}, {
    trigger: ".o-kanban-button-new",
    content: "Create a new update"
}, {
    trigger: "div.o_field_widget[name=name] input",
    run: 'text New update'
}, {
    trigger: ".o_form_button_save"
}, {
    trigger: ".o_field_widget[name='description'] h1:contains('Activities')",
    run: function () {},
}, {
    trigger: ".o_field_widget[name='description'] h3:contains('Milestones')",
    run: function () {},
}, {
    trigger: ".o_field_widget[name='description'] div[name='milestone'] ul li:contains('(12/12/2099 => 12/12/2100)')",
    run: function () {},
}, {
    trigger: ".o_field_widget[name='description'] div[name='milestone'] ul li span:contains('(due 12/12/2022)')",
    run: function () {},
}, {
    trigger: ".o_field_widget[name='description'] div[name='milestone'] ul li span:contains('(due 12/12/2100)')",
    run: function () {},
}, {
    trigger: '.o_back_button',
    content: 'Go back to the kanban view the project',
}, {
    trigger: '.o_switch_view.o_list',
    content: 'Open List View of Project Updates',
}, {
    trigger: '.o_back_button',
    content: 'Go back to the kanban view the project',
    extra_trigger: '.o_list_view',
}, {
    trigger: '.o_switch_view.o_graph',
    content: 'Open Graph View of Tasks',
}, ...openProjectUpdateAndReturnToTasks("Graph", "o_graph_view"), {
    trigger: '.o_switch_view.o_list',
    content: 'Open List View of Tasks',
    extra_trigger: '.o_graph_view',
}, ...openProjectUpdateAndReturnToTasks("List", "o_list_view"), {
    trigger: '.o_switch_view.o_pivot',
    content: 'Open Pivot View of Tasks',
}, ...openProjectUpdateAndReturnToTasks("Pivot", "o_pivot_view"), {
    trigger: '.o_switch_view.o_calendar',
    content: 'Open Calendar View of Tasks',
}, ...openProjectUpdateAndReturnToTasks("Calendar", "o_calendar_view"), {
    trigger: '.o_switch_view.o_activity',
    content: 'Open Activity View of Tasks',
}, ...openProjectUpdateAndReturnToTasks("Activity", "o_activity_view"),
]});

return __exports;
});
;

/****************************************************************************************************
*  Filepath: /project/static/tests/views/project_task_calendar/project_task_calendar_view_tests.js  *
*  Lines: 59                                                                                        *
****************************************************************************************************/
odoo.define('@project/../tests/views/project_task_calendar/project_task_calendar_view_tests', ['@web/../tests/webclient/helpers'], function (require) {
'use strict';
let __exports = {};
QUnit.module("project", function() {/** @odoo-module **/

const { createWebClient, doAction } = require("@web/../tests/webclient/helpers");
let serverData;
QUnit.module("Project Task Calendar View", (hooks) => {
    hooks.beforeEach(() => {
        serverData = {
            models: {
                "project.task": {
                    fields: {
                        start: { string: "Date Start", type: "date" },
                        stop: { string: "Date End", type: "date" },
                    },
                    records: [
                        {
                            id: 1,
                            start: "2017-01-25",
                            stop: "2017-01-26",
                        }, {
                            id: 2,
                            start: "2017-01-02",
                            stop: "2017-01-03",
                        },
                    ],
                    methods: {
                        check_access_rights: function () {
                            return Promise.resolve(true);
                        }
                    }
                },
            },
        }
    });
    QUnit.test("breadcrumb contains 'Tasks by deadline'", async function (assert) {
        serverData.views = {
            "project.task,1,calendar": `<calendar date_start="start" date_stop="stop" mode="day" js_class="project_calendar"/>`,
            "project.task,false,search": `<search />`,
        };
        serverData.actions = {
            1: {
                id: 1,
                name: "test",
                res_model: "project.task",
                type: "ir.actions.act_window",
                views: [[1, "calendar"]],
                context: {},
            },
        };
        const webClient = await createWebClient({ serverData });
        await doAction(webClient, 1);
        assert.equal(document.querySelector(".o_last_breadcrumb_item span").textContent, 'test - Tasks by Deadline');
    });
});
});
return __exports;
});
;

/********************************************************************************************
*  Filepath: /project/static/tests/views/project_task_list/project_task_list_view_tests.js  *
*  Lines: 85                                                                                *
********************************************************************************************/
odoo.define('@project/../tests/views/project_task_list/project_task_list_view_tests', ['@web/../tests/helpers/utils', '@web/../tests/views/helpers'], function (require) {
'use strict';
let __exports = {};
QUnit.module("project", function() {/** @odoo-module **/

const { click, getFixture } = require("@web/../tests/helpers/utils");
const { makeView, setupViewRegistries } = require("@web/../tests/views/helpers");

QUnit.module("Project Task List View", (hooks) => {
    QUnit.test("cannot edit stage_id with different projects", async function (assert) {
        const target = getFixture();
        setupViewRegistries();
        await makeView({
            type: "list",
            resModel: "project.task",
            arch: `
                <tree multi_edit="1" js_class="project_task_list">
                    <field name="project_id"/>
                    <field name="stage_id"/>
                </tree>
            `,
            serverData: {
                models: {
                    "project.task": {
                        fields: {
                            project_id: {
                                string: "Project",
                                type: "many2one",
                                relation: "project.project",
                            },
                            stage_id: {
                                string: "Stage",
                                type: "many2one",
                                relation: "project.task.type",
                            }
                        },
                        records: [
                            {
                                id: 1,
                                project_id: 1,
                                stage_id: 1,
                            }, {
                                id: 2,
                                project_id: 2,
                                stage_id: 1,
                            },
                        ],
                    },
                    "project.project": {
                        records: [
                            {
                                id: 1,
                            }, {
                                id: 2,
                            },
                        ],
                    },
                    "project.task.type": {
                        records: [
                            {
                                id: 1,
                            }, {
                                id: 2,
                            },
                        ],
                    },
                },
            }
        });

        const [firstRow, secondRow] = target.querySelectorAll(".o_data_row");
        await click(firstRow.querySelector(".o_data_row .o_list_record_selector input"));
        assert.containsNone(firstRow, ".o_readonly_modifier", "None of the fields should be readonly");
        assert.containsNone(secondRow, ".o_readonly_modifier", "None of the fields should be readonly");

        await click(secondRow.querySelector(".o_data_row .o_list_record_selector input"));
        assert.containsOnce(firstRow, ".o_readonly_modifier");
        assert.hasClass(firstRow.querySelectorAll(".o_data_cell")[1], "o_readonly_modifier", "The stage_id should be readonly");
        assert.containsOnce(secondRow, ".o_readonly_modifier");
        assert.hasClass(secondRow.querySelectorAll(".o_data_cell")[1], "o_readonly_modifier", "The stage_id should be readonly");
    });
});
});
return __exports;
});
;

/************************************************************************
*  Filepath: /website_sale/static/tests/tours/website_free_delivery.js  *
*  Lines: 57                                                            *
************************************************************************/
odoo.define('@website_sale/../tests/tours/website_free_delivery', ['@web/core/registry', 'website_sale.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const tourUtils = require("website_sale.tour_utils");

registry.category("web_tour.tours").add('check_free_delivery', {
        test: true,
        url: '/shop?search=office chair black',
        steps: () => [
        // Part 1: Check free delivery
        {
            content: "select office chair black",
            trigger: '.oe_product_cart a:contains("Office Chair Black TEST")',
        },
        {
            content: "click on add to cart",
            trigger: '#product_details #add_to_cart',
        },
            tourUtils.goToCart(),
        {
            content: "go to checkout",
            extra_trigger: '#cart_products input.js_quantity:propValue(1)',
            trigger: 'a[href*="/shop/checkout"]',
        },
        {
            content: "Check Free Delivery value to be zero",
            extra_trigger: '#delivery_carrier label:containsExact("Delivery Now Free Over 10")',
            trigger: "#delivery_carrier span:contains('0.0')"
        },
        // Part 2: check multiple delivery & price loaded asynchronously
        {
            content: "Ensure price was loaded asynchronously",
            extra_trigger: '#delivery_carrier input[name="delivery_type"]:checked',
            trigger: '#delivery_method .o_delivery_carrier_select:contains("20.0"):contains("The Poste")',
            run: function () {}, // it's a check
        },
        {
            content: "Select `Wire Transfer` payment method",
            trigger: '#payment_method label:contains("Wire Transfer")',
        },
        {
            content: "Click on Pay Now",
            trigger: 'button[name="o_payment_submit_button"]:visible:not(:disabled)',
        },
        {
            content: "Confirmation page should be shown",
            trigger: '#oe_structure_website_sale_confirmation_1',
            allowInvisible: true,
            run: function () {}, // it's a check
        }
    ]});

return __exports;
});
;

/****************************************************************************************
*  Filepath: /website_sale/static/tests/tours/website_sale_add_to_cart_snippet_tour.js  *
*  Lines: 60                                                                            *
****************************************************************************************/
odoo.define('@website_sale/../tests/tours/website_sale_add_to_cart_snippet_tour', ['website_sale.tour_utils', 'website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wsTourUtils = require('website_sale.tour_utils');
const wTourUtils = require('website.tour_utils');

function editAddToCartSnippet() {
    return [
        ...wTourUtils.clickOnEditAndWaitEditMode(),
        wTourUtils.clickOnSnippet({id: 's_add_to_cart'})
    ]
}

wTourUtils.registerWebsitePreviewTour('add_to_cart_snippet_tour', {
        url: '/',
        edition: true,
        test: true,
    },
    [
        wTourUtils.dragNDrop({name: 'Add to Cart Button'}),

        // Basic product with no variants
        wTourUtils.clickOnSnippet({id: 's_add_to_cart'}),
        ...wTourUtils.selectElementInWeSelectWidget('product_template_picker_opt', 'Acoustic Bloc Screens', true),
        ...wTourUtils.clickOnSave(),
        wTourUtils.clickOnElement('add to cart button', 'iframe .s_add_to_cart_btn'),

        // Product with 2 variants with visitor choice (will open modal)
        ...editAddToCartSnippet(),
        ...wTourUtils.selectElementInWeSelectWidget('product_template_picker_opt', 'Conference Chair', true),
        ...wTourUtils.clickOnSave(),
        wTourUtils.clickOnElement('add to cart button', 'iframe .s_add_to_cart_btn'),
        wTourUtils.clickOnElement('continue shopping', 'iframe span:contains(Continue Shopping)'),

        // Product with 2 variants with a variant selected
        ...editAddToCartSnippet(),
        ...wTourUtils.selectElementInWeSelectWidget('product_template_picker_opt', 'Conference Chair', true),
        ...wTourUtils.selectElementInWeSelectWidget('product_variant_picker_opt', 'Conference Chair (Aluminium)'),
        ...wTourUtils.clickOnSave(),
        wTourUtils.clickOnElement('add to cart button', 'iframe .s_add_to_cart_btn'),

        // Basic product with no variants and action=buy now
        ...editAddToCartSnippet(),
        ...wTourUtils.selectElementInWeSelectWidget('product_template_picker_opt', 'Acoustic Bloc Screens', true),
        ...wTourUtils.selectElementInWeSelectWidget('action_picker_opt', 'Buy Now'),
        ...wTourUtils.clickOnSave(),
        wTourUtils.clickOnElement('add to cart button', 'iframe .s_add_to_cart_btn'),
        wTourUtils.assertPathName('/shop/payment', 'iframe a.btn[href="/shop/cart"]'),

        wsTourUtils.goToCart({quantity: 4, backend: true}),
        wsTourUtils.assertCartContains({productName: 'Acoustic Bloc Screens', backend: true}),
        wsTourUtils.assertCartContains({productName: 'Conference Chair (Steel)', backend: true}),
        wsTourUtils.assertCartContains({productName: 'Conference Chair (Aluminium)', backend: true}),
    ],
);

return __exports;
});
;

/*******************************************************************
*  Filepath: /website_sale/static/tests/tours/website_sale_buy.js  *
*  Lines: 102                                                      *
*******************************************************************/
odoo.define('@website_sale/../tests/tours/website_sale_buy', ['@web/core/registry', 'website_sale.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module alias=website_sale.tour **/

const { registry } = require("@web/core/registry");
const tourUtils = require("website_sale.tour_utils");

registry.category("web_tour.tours").add('shop_buy_product', {
    test: true,
    url: '/shop',
    steps: () => [
        {
            content: "search conference chair",
            trigger: 'form input[name="search"]',
            run: "text conference chair",
        },
        {
            content: "search conference chair",
            trigger: 'form:has(input[name="search"]) .oe_search_button',
        },
        {
            content: "select conference chair",
            trigger: '.oe_product_cart:first a:contains("Conference Chair")',
        },
        {
            content: "select Conference Chair Aluminium",
            extra_trigger: '#product_detail',
            trigger: 'label:contains(Aluminium) input',
        },
        {
            content: "select Conference Chair Steel",
            extra_trigger: '#product_detail',
            trigger: 'label:contains(Steel) input',
        },
        {
            id: 'add_cart_step',
            content: "click on add to cart",
            extra_trigger: 'label:contains(Steel) input:propChecked',
            trigger: '#product_detail form[action^="/shop/cart/update"] #add_to_cart',
        },
            tourUtils.goToCart(),
        {
            content: "add suggested",
            extra_trigger: '#wrap:not(:has(#cart_products:contains("Storage Box")))',
            trigger: '.oe_cart:has(tr:contains("Storage Box")) a:contains("Add to Cart")',
        },
        {
            content: "add one more",
            extra_trigger: '#cart_products tr:contains("Storage Box")',
            trigger: '#cart_products tr:contains("Steel") a.js_add_cart_json:eq(1)',
        },
        {
            content: "remove Storage Box",
            extra_trigger: '#cart_products tr:contains("Steel") input.js_quantity:propValue(2)',
            trigger: '#cart_products tr:contains("Storage Box") a.js_add_cart_json:first',
        },
        {
            content: "set one",
            extra_trigger: '#wrap:not(:has(#cart_products tr:contains("Storage Box")))',
            trigger: '#cart_products input.js_quantity',
            run: 'text 1',
        },
        {
            content: "go to checkout",
            extra_trigger: '#cart_products input.js_quantity:propValue(1)',
            trigger: 'a[href*="/shop/checkout"]',
        },
        {
            content: "select payment",
            trigger: '#payment_method label:contains("Wire Transfer")',
        },
        {
            content: "Pay Now",
            //Either there are multiple payment methods, and one is checked, either there is only one, and therefore there are no radio inputs
            extra_trigger: '#payment_method label:contains("Wire Transfer") input:checked,#payment_method:not(:has("input:radio:visible"))',
            trigger: 'button[name="o_payment_submit_button"]:visible:not(:disabled)',
        },
        {
            content: "finish",
            trigger: '.oe_website_sale:contains("Please use the following transfer details")',
            // Leave /shop/confirmation to prevent RPC loop to /shop/payment/get_status.
            // The RPC could be handled in python while the tour is killed (and the session), leading to crashes
            run: function () {
                window.location.href = '/contactus'; // Redirect in JS to avoid the RPC loop (20x1sec)
            },
            timeout: 30000,
        },
        {
            content: "wait page loaded",
            trigger: 'h1:contains("Contact us")',
            run: function () {}, // it's a check
        },
    ]
});

return __exports;
});

odoo.define(`website_sale.tour`, ['@website_sale/../tests/tours/website_sale_buy'], function (require) {
                        return require('@website_sale/../tests/tours/website_sale_buy')[Symbol.for("default")];
                        });
;

/****************************************************************************
*  Filepath: /website_sale/static/tests/tours/website_sale_cart_popover.js  *
*  Lines: 51                                                                *
****************************************************************************/
odoo.define('@website_sale/../tests/tours/website_sale_cart_popover', ['@web/core/registry', 'website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const wTourUtils = require('website.tour_utils');

registry.category("web_tour.tours").add('website_sale_cart_popover_tour', {
        test: true,
        url: '/shop',
        steps: () => [
        {
            content: "Search for the product",
            trigger: 'form input[name="search"]',
            run: 'text website_sale_cart_popover_tour_product'
        },
        wTourUtils.clickOnElement('Search', 'form:has(input[name="search"]) .oe_search_button'),
        wTourUtils.clickOnElement('website_sale_cart_popover_tour_product', 'a:contains(website_sale_cart_popover_tour_product)'),
        wTourUtils.clickOnElement('Add to Cart', '#product_detail form[action^="/shop/cart/update"] #add_to_cart'),
        {
            content: "hover on cart popover",
            trigger: '#top_menu a[href$="/shop/cart"]',
            run: () => {
                $('#top_menu a[href$="/shop/cart"]').mouseenter();
            },
        },
        {
            content: "check that popover is visible",
            trigger: '.mycart-popover:visible',
            run: () => {},
        },
        // Trigger mouseleave to close the popover
        {
            content: "hover on cart popover",
            trigger: '#top_menu a[href$="/shop/cart"]',
            run: () => {
                $('#top_menu a[href$="/shop/cart"]').mouseleave();
            },
        },
        // Check that popover is not visible
        {
            content: "check that popover is not visible",
            trigger: ':not(.mycart-popover:visible)',
            run: () => {},
        },
    ]
});

return __exports;
});
;

/**************************************************************************************************
*  Filepath: /website_sale/static/tests/tours/website_sale_category_page_and_products_snippet.js  *
*  Lines: 65                                                                                      *
**************************************************************************************************/
odoo.define('@website_sale/../tests/tours/website_sale_category_page_and_products_snippet', ['website.tour_utils', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-modules */

const wTourUtils = require('website.tour_utils');
const { registry } = require("@web/core/registry");

const PRODUCT_CATEGORY_ID = 2;

wTourUtils.registerWebsitePreviewTour('category_page_and_products_snippet_edition', {
    test: true,
    url: `/shop/category/${PRODUCT_CATEGORY_ID}`,
    edition: true,
}, [
    Object.assign(wTourUtils.dragNDrop({id: 's_dynamic_snippet_products', name: 'Products'}), {
        content: "Drag and drop the product snippet inside the category area",
        run: 'drag_and_drop iframe #category_header',
    }),
    {
        content: "Click on the product snippet to show its options",
        trigger: 'iframe #category_header .s_dynamic_snippet_products',
    },
    {
        content: "Open category option dropdown",
        trigger: 'we-select[data-attribute-name="productCategoryId"] we-toggler',
    },
    {
        content: "Choose the option to use the current page's category",
        trigger: 'we-button[data-select-data-attribute="current"]',
    },
    ...wTourUtils.clickOnSave(),
]);

registry.category("web_tour.tours").add('category_page_and_products_snippet_use', {
    test: true,
    url: `/shop/category/${PRODUCT_CATEGORY_ID}`,
    steps: () => [
    {
        content: "Check that the snippet displays the right products",
        // Wait for at least one shown product
        trigger: '#category_header .s_dynamic_snippet_products:has(.o_carousel_product_img_link)',
        run: function (actions) {
            // Note: this could be more robust to not rely on demo data and
            // make sure that the newest products are not by chance all of
            // the second category (used for the test) and ... but should be ok.
            const productGridEl = this.$anchor[0].closest('#products_grid');
            const regex = new RegExp(`^/shop/[\\w-/]+-(\\d+)\\?category=${PRODUCT_CATEGORY_ID}$`);
            const allPageProductIDs = [...productGridEl.querySelectorAll('.oe_product_image_link')]
                .map(el => el.getAttribute('href').match(regex)[1]);

            const $shownProductLinks = this.$anchor.find('.o_carousel_product_img_link');
            const regex2 = new RegExp(`^/shop/[\\w-/]+-(\\d+)(?:#attr=\\d*)?$`);
            for (const shownProductLinkEl of $shownProductLinks) {
                const productID = shownProductLinkEl.getAttribute('href').match(regex2)[1];
                if (!allPageProductIDs.includes(productID)) {
                    console.error(`The snippet displays a product (${productID}) which does not belong to the current category (${allPageProductIDs})`);
                }
            }
        },
    },
]});

return __exports;
});
;

/*****************************************************************************
*  Filepath: /website_sale/static/tests/tours/website_sale_complete_flow.js  *
*  Lines: 395                                                                *
*****************************************************************************/
odoo.define('@website_sale/../tests/tours/website_sale_complete_flow', ['@web/core/registry', 'web.rpc', 'website_sale.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/
    
    const { registry } = require("@web/core/registry");
    const rpc = require("web.rpc");
    const tourUtils = require("website_sale.tour_utils");

    registry.category("web_tour.tours").add('website_sale_tour_1', {
        test: true,
        checkDelay: 250,
        url: '/shop?search=Storage Box Test',
        steps: () => [
    // Testing b2c with Tax-Excluded Prices
    {
        content: "Open product page",
        trigger: '.oe_product_cart a:contains("Storage Box Test")',
    },
    {
        content: "Add one more storage box",
        trigger: '.js_add_cart_json:eq(1)',
    },
    {
        content: "Check b2b Tax-Excluded Prices",
        trigger: '.product_price .oe_price .oe_currency_value:containsExact(79.00)',
        run: function () {}, // it's a check
    },
    {
        content: "Click on add to cart",
        trigger: '#add_to_cart',
    },
        tourUtils.goToCart({quantity: 2}),
    {
        content: "Check for 2 products in cart and proceed to checkout",
        extra_trigger: '#cart_products tr:contains("Storage Box Test") input.js_quantity:propValue(2)',
        trigger: 'a[href*="/shop/checkout"]',
    },
    {
        content: "Check Price b2b subtotal",
        trigger: 'tr#order_total_untaxed .oe_currency_value:containsExact(158.00)',
        run: function () {}, // it's a check
    },
    {
        content: "Check Price b2b Sale Tax(15%)",
        trigger: 'tr#order_total_taxes .oe_currency_value:containsExact(23.70)',
        run: function () {}, // it's a check
    },
    {
        content: "Check Price b2b Total amount",
        trigger: 'tr#order_total .oe_currency_value:containsExact(181.70)',
        run: function () {}, // it's a check
    },
    {
        content: "Fulfill billing address form",
        trigger: 'select[name="country_id"]',
        run: function () {
            $('input[name="name"]').val('abc');
            $('input[name="phone"]').val('99999999');
            $('input[name="email"]').val('abc@odoo.com');
            $('input[name="street"]').val('SO1 Billing Street, 33');
            $('input[name="city"]').val('SO1BillingCity');
            $('input[name="zip"]').val('10000');
            $('#country_id option:eq(1)').attr('selected', true);
        },
    },
    {
        content: "Shipping address is not same as billing address",
        trigger: '#shipping_use_same',
    },
    {
        content: "Click on next button",
        trigger: '.oe_cart .btn:contains("Next")',
    },
    {
        content: "Fulfill shipping address form",
        trigger: 'select[name="country_id"]',
        extra_trigger: 'h2:contains("Shipping Address")',
        run: function () {
            $('input[name="name"]').val('def');
            $('input[name="phone"]').val('8888888888');
            $('input[name="street"]').val('17, SO1 Shipping Road');
            $('input[name="city"]').val('SO1ShippingCity');
            $('input[name="zip"]').val('10000');
            $('#country_id option:eq(1)').attr('selected', true);
        },
    },
    {
        content: "Click on next button",
        trigger: '.oe_cart .btn:contains("Next")',
    },
    {
        content: "Check selected billing address is same as typed in previous step",
        trigger: '#shipping_and_billing:contains(SO1 Billing Street, 33):contains(SO1BillingCity):contains(Afghanistan)',
        run: function () {}, // it's a check
    },
    {
        content: "Check selected shipping address is same as typed in previous step",
        trigger: '#shipping_and_billing:contains(17, SO1 Shipping Road):contains(SO1ShippingCity):contains(Afghanistan)',
        run: function () {}, // it's a check
    },
    {
        content: "Click for edit address",
        trigger: 'a:contains("Edit") i',
    },
    {
        content: "Click for edit billing address",
        trigger: '.js_edit_address:first',
    },
    {
        content: "Change billing address form",
        trigger: 'select[name="country_id"]',
        extra_trigger: 'h2:contains("Your Address")',
        run: function () {
            $('input[name="name"]').val('abcd');
            $('input[name="phone"]').val('11111111');
            $('input[name="street"]').val('SO1 Billing Street Edited, 33');
            $('input[name="city"]').val('SO1BillingCityEdited');
        },
    },
    {
        content: "Click on next button",
        trigger: '.oe_cart .btn:contains("Next")',
    },
    {
        content: "Confirm Address",
        trigger: 'a.btn:contains("Confirm")',
    },
    {
        content: "Check selected billing address is same as typed in previous step",
        trigger: '#shipping_and_billing:contains(SO1 Billing Street Edited, 33):contains(SO1BillingCityEdited):contains(Afghanistan)',
        run: function () {}, // it's a check
    },
    {
        content: "Select `Wire Transfer` payment method",
        trigger: '#payment_method label:contains("Wire Transfer")',
    },
    {
        content: "Pay Now",
        // extra_trigger: '#payment_method label:contains("Wire Transfer") input:checked,#payment_method:not(:has("input:radio:visible"))',
        trigger: 'button[name="o_payment_submit_button"]:visible:not(:disabled)',
    },
    {
        content: "Sign up",
        trigger: '.oe_cart a:contains("Sign Up")',
    },
    {
        content: "Submit login",
        trigger: '.oe_signup_form',
        run: function () {
            $('.oe_signup_form input[name="password"]').val("1admin@admin");
            $('.oe_signup_form input[name="confirm_password"]').val("1admin@admin");
            $('.oe_signup_form').submit();
        },
    },
    {
        content: "See Quotations",
        trigger: '.o_portal_docs a:contains("Quotations")',
    },
    // Sign in as admin change config auth_signup -> b2b, sale_show_tax -> total and Logout
    {
        content: "Open Dropdown for logout",
        extra_trigger: ".o_header_standard:not(.o_transitioning)",
        trigger: '#top_menu li.dropdown:visible a:contains("abcd")',
    },
    {
        content: "Logout",
        trigger: '#o_logout:contains("Logout")',
    },
    {
        content: "Sign in as admin",
        trigger: 'header a[href="/web/login"]',
    },
    {
        content: "Submit login",
        trigger: '.oe_login_form',
        run: function () {
            $('.oe_login_form input[name="login"]').val("admin");
            $('.oe_login_form input[name="password"]').val("admin");
            $('.oe_login_form input[name="redirect"]').val("/");
            $('.oe_login_form').submit();
        },
    },
    {
        content: "Configuration Settings for 'Tax Included' and sign up 'On Invitation'",
        extra_trigger: '.o_frontend_to_backend_nav', // Check if the user is connected
        trigger: '#wrapwrap',
        run: function () {
            var def1 = rpc.query({
                model: 'res.config.settings',
                method: 'create',
                args: [{
                    'auth_signup_uninvited': 'b2b',
                    'show_line_subtotals_tax_selection': 'tax_included',
                }],
            });
            var def2 = def1.then(function (resId) {
                return rpc.query({
                    model: 'res.config.settings',
                    method: 'execute',
                    args: [[resId]],
                });
            });
            def2.then(function () {
                window.location.href = '/web/session/logout?redirect=/shop?search=Storage Box Test';
            });
        },
    },
    // Testing b2b with Tax-Included Prices
    {
        content: "Open product page",
        trigger: '.oe_product_cart a:contains("Storage Box Test")',
    },
    {
        content: "Add one more Storage Box Test",
        trigger: '.js_add_cart_json:eq(1)',
    },
    {
        content: "Check b2c Tax-Included Prices",
        trigger: '.product_price .oe_price .oe_currency_value:containsExact(90.85)',
        run: function () {}, // it's a check
    },
    {
        content: "Click on add to cart",
        trigger: '#add_to_cart',
    },
        tourUtils.goToCart({quantity: 2}),
    {
        content: "Check for 2 products in cart and proceed to checkout",
        extra_trigger: '#cart_products tr:contains("Storage Box Test") input.js_quantity:propValue(2)',
        trigger: 'a[href*="/shop/checkout"]',
    },
    {
        content: "Check Price b2c total",
        trigger: 'tr#order_total_untaxed .oe_currency_value:containsExact(158.00)',
        run: function () {}, // it's a check
    },
    {
        content: "Check Price b2c Sale Tax(15%)",
        trigger: 'tr#order_total_taxes .oe_currency_value:containsExact(23.70)',
        run: function () {}, // it's a check
    },
    {
        content: "Check Price b2c Total amount",
        trigger: 'tr#order_total .oe_currency_value:containsExact(181.70)',
        run: function () {}, // it's a check
    },
    {
        content: "Click on Sign in Button",
        trigger: '.oe_cart a:contains(" Sign in")',
    },
    {
        content: "Submit login",
        trigger: '.oe_login_form',
        run: function () {
            $('.oe_login_form input[name="login"]').val("abc@odoo.com");
            $('.oe_login_form input[name="password"]').val("1admin@admin");
            $('.oe_login_form').submit();
        },
    },
    {
        content: "Add new shipping address",
        trigger: '.one_kanban form[action^="/shop/address"] .btn',
    },
    {
        content: "Fulfill shipping address form",
        trigger: 'select[name="country_id"]',
        run: function () {
            $('input[name="name"]').val('ghi');
            $('input[name="phone"]').val('7777777777');
            $('input[name="street"]').val('SO2New Shipping Street, 5');
            $('input[name="city"]').val('SO2NewShipping');
            $('input[name="zip"]').val('1200');
            $('#country_id option:eq(1)').attr('selected', true);
        },
    },
    {
        content: "Click on next button",
        trigger: '.oe_cart .btn:contains("Next")',
    },
    {
        content: "Select `Wire Transfer` payment method",
        trigger: '#payment_method label:contains("Wire Transfer")',
    },
    {
        content: "Pay Now",
        extra_trigger: '#payment_method label:contains("Wire Transfer") input:checked,#payment_method:not(:has("input:radio:visible"))',
        trigger: 'button[name="o_payment_submit_button"]:visible:not(:disabled)',
    },
    {
        content: "Open Dropdown for See quotation",
        extra_trigger: '.oe_cart .oe_website_sale_tx_status',
        trigger: '#top_menu li.dropdown:visible a:contains("abc")',
    },
    {
        content: "My account",
        extra_trigger: '#top_menu li.dropdown .js_usermenu.show',
        trigger: '#top_menu .dropdown-menu a[href="/my/home"]:visible',
    },
    {
        content: "See Quotations",
        trigger: '.o_portal_docs a:contains("Quotations") .badge:containsExact(2)',
    },

    // enable extra step on website checkout and check extra step on checkout process
    {
        content: "Open Dropdown for logout",
        extra_trigger: ".o_header_standard:not(.o_transitioning)",
        trigger: '#top_menu li.dropdown:visible a:contains("abc")',
    },
    {
        content: "Logout",
        trigger: '#o_logout:contains("Logout")',
    },
    {
        content: "Sign in as admin",
        trigger: 'header a[href="/web/login"]',
    },
    {
        content: "Submit login",
        trigger: '.oe_login_form',
        run: function () {
            $('.oe_login_form input[name="login"]').val("admin");
            $('.oe_login_form input[name="password"]').val("admin");
            $('.oe_login_form input[name="redirect"]').val("/shop/cart");
            $('.oe_login_form').submit();
        },
    }]});

    registry.category("web_tour.tours").add('website_sale_tour_2', {
        test: true,
        url: '/shop/cart',
        steps: () => [
    {
        content: "Open Dropdown for logout",
        extra_trigger: '.progress-wizard-step:contains("Extra Info")',
        trigger: '#top_menu li.dropdown:visible a:contains("Mitchell Admin")',
    },
    {
        content: "Logout",
        trigger: '#o_logout:contains("Logout")',
    },
    {
        content: "Sign in as abc",
        trigger: 'header a[href="/web/login"]',
    },
    {
        content: "Submit login",
        trigger: '.oe_login_form',
        run: function () {
            $('.oe_login_form input[name="login"]').val("abc@odoo.com");
            $('.oe_login_form input[name="password"]').val("1admin@admin");
            $('.oe_login_form input[name="redirect"]').val("/shop?search=Storage Box Test");
            $('.oe_login_form').submit();
        },
    },
    {
        content: "Open product page",
        trigger: '.oe_product_cart a:contains("Storage Box Test")',
    },
    {
        content: "Click on add to cart",
        trigger: '#add_to_cart',
    },
        tourUtils.goToCart(),
    {
        content: "Proceed to checkout",
        trigger: 'a[href*="/shop/checkout"]',
    },
    {
        content: "Click on next button",
        trigger: '.oe_cart .btn:contains("Next")',
    },
    {
        content: "Check selected billing address is same as typed in previous step",
        trigger: '#shipping_and_billing:contains(SO1 Billing Street Edited, 33):contains(SO1BillingCityEdited):contains(Afghanistan)',
        run: function () {}, // it's a check
    },
    {
        content: "Check selected shipping address is same as typed in previous step",
        trigger: '#shipping_and_billing:contains(SO2New Shipping Street, 5):contains(SO2NewShipping):contains(Afghanistan)',
        run: function () {}, // it's a check
    },
    {
        content: "Select `Wire Transfer` payment method",
        trigger: '#payment_method label:contains("Wire Transfer")',
    },
    {
        content: "Pay Now",
        extra_trigger: '#payment_method label:contains("Wire Transfer") input:checked,#payment_method:not(:has("input:radio:visible"))',
        trigger: 'button[name="o_payment_submit_button"]:visible',
    }]});

return __exports;
});
;

/*************************************************************************************
*  Filepath: /website_sale/static/tests/tours/website_sale_complete_flow_backend.js  *
*  Lines: 27                                                                         *
*************************************************************************************/
odoo.define('@website_sale/../tests/tours/website_sale_complete_flow_backend', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('website_sale_tour_backend', {
    test: true,
    url: '/shop/cart',
    edition: true,
}, [
        {
            content: "open customize tab",
            trigger: '.o_we_customize_snippet_btn',
        },
        {
            content: "Enable Extra step",
            extra_trigger: '#oe_snippets .o_we_customize_panel',
            trigger: '[data-customize-website-views="website_sale.extra_info_option"] we-checkbox',
        },
        ...wTourUtils.clickOnSave(),
    ],
);

return __exports;
});
;

/************************************************************************************
*  Filepath: /website_sale/static/tests/tours/website_sale_fiscal_position_tour.js  *
*  Lines: 41                                                                        *
************************************************************************************/
odoo.define('@website_sale/../tests/tours/website_sale_fiscal_position_tour', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('website_sale_fiscal_position_portal_tour', {
    test: true,
    url: '/shop?search=Super%20Product',
    steps: () => [
        {
            content: "Check price",
            trigger: ".oe_product:contains('Super product') .product_price:contains('80.00')",
            run: function() {} // Check
        },
]});

registry.category("web_tour.tours").add('website_sale_fiscal_position_public_tour', {
    test: true,
    url: '/shop?search=Super%20Product',
    steps: () => [
        {
            content: "Toggle Pricelist",
            trigger: ".o_pricelist_dropdown > .dropdown-toggle",
            run: 'click',
        },
        {
            content: "Change Pricelist",
            trigger: ".dropdown-item:contains('EUROPE EUR')",
            run: 'click',
        },
        {
            content: "Check price",
            trigger: ".oe_product:contains('Super product') .product_price:contains('92.00')",
            run: function() {} // Check
        },
]});

return __exports;
});
;

/********************************************************************************
*  Filepath: /website_sale/static/tests/tours/website_sale_google_analytics.js  *
*  Lines: 75                                                                    *
********************************************************************************/
odoo.define('@website_sale/../tests/tours/website_sale_google_analytics', ['@web/core/registry', 'website_sale.tracking'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const websiteSaleTracking = require("website_sale.tracking");

let itemId;

websiteSaleTracking.include({
    // Purposely don't call super to avoid call to third party (GA) during tests
    _onViewItem(event, data) {
        $('body').attr('view-event-id', data.item_id);
    },
    _onAddToCart(event, data) {
        $('body').attr('cart-event-id', data.item_id);
    },
});

registry.category("web_tour.tours").add('google_analytics_view_item', {
    test: true,
    url: '/shop?search=Customizable Desk',
    steps: () => [
    {
        content: "select customizable desk",
        trigger: '.oe_product_cart a:contains("Customizable Desk")',
    },
    {
        content: "wait until `_getCombinationInfo()` rpc is done",
        trigger: 'body[view-event-id]',
        timeout: 25000,
        run: () => {
            const $body = $('body');
            itemId = $body.attr('view-event-id');
            $body.removeAttr('view-event-id');
        }
    },
    {
        content: 'select another variant',
        extra_trigger: 'body:not([view-event-id])',
        trigger: 'ul.js_add_cart_variants ul.list-inline li:has(label.active) + li:has(label) input',
    },
    {
        content: 'wait until `_getCombinationInfo()` rpc is done (2)',
        // a new view event should have been generated, for another variant
        trigger: `body[view-event-id][view-event-id!=${itemId}]`,
        timeout: 25000,
        run: () => {}, // it's a check
    },
]});

registry.category("web_tour.tours").add('google_analytics_add_to_cart', {
    test: true,
    url: '/shop?search=Acoustic Bloc Screens',
    steps: () => [
    {
        content: "select Acoustic Bloc Screens",
        trigger: '.oe_product_cart a:contains("Acoustic Bloc Screens")',
    },
    {
        content: "click add to cart button on product page",
        trigger: '#add_to_cart',
    },
    {
        content: 'check add to cart event',
        extra_trigger: 'body[cart-event-id]',
        trigger: 'a:has(.my_cart_quantity:containsExact(1))',
        timeout: 25000,
        run: () => {}, // it's a check
    },
]});

return __exports;
});
;

/************************************************************************************
*  Filepath: /website_sale/static/tests/tours/website_sale_remove_product_image.js  *
*  Lines: 75                                                                        *
************************************************************************************/
odoo.define('@website_sale/../tests/tours/website_sale_remove_product_image', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require("website.tour_utils");

const clickOnImgAndWaitForLoad = [
    {
        content: "Click on the product image",
        trigger: "iframe #o-carousel-product img[alt='Test Remove Image']",
    },
    {
        content: "Check that the snippet editor of the clicked image has been loaded",
        trigger: "we-customizeblock-options:has(we-title:contains('Re-order'))",
        run: () => null,
    },
];
const enterEditModeOfTestProduct = [
    {
        content: "Click on the product anchor",
        trigger: "iframe a:contains('Test Remove Image')",
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
];

const removeImg = [
    {
        content: "Click on Remove",
        trigger: "we-customizeblock-options:has(we-title:contains('Image')) we-button[data-name='media_wsale_remove']",
    },
    // If the snippet editor is not visible, the remove process is considered as
    // finished.
    {
        content: "Check that the snippet editor is not visible",
        trigger: ".o_we_customize_panel:not(:has(we-customizeblock-options:has(we-title:contains('Re-order'))))",
        run: () => null,
    },
];

wTourUtils.registerWebsitePreviewTour("add_and_remove_main_product_image_no_variant", {
    url: "/shop?search=Test Remove Image",
    test: true,
}, [
    ...enterEditModeOfTestProduct,
    {
        content: "Double click on the product image",
        trigger: "iframe #o-carousel-product img[alt='Test Remove Image']",
        run: "dblclick",
    },
    {
        content: "Click on the new image",
        trigger: ".o_select_media_dialog img[title='s_default_image.jpg']",
    },
    {
        content: "Check that the snippet editor of the clicked image has been loaded",
        trigger: "we-customizeblock-options:has(we-title:contains('Re-order'))",
        run: () => null,
    },
    ...removeImg,
]);
wTourUtils.registerWebsitePreviewTour("remove_main_product_image_with_variant", {
    url: "/shop?search=Test Remove Image",
    test: true,
}, [
    ...enterEditModeOfTestProduct,
    ...clickOnImgAndWaitForLoad,
    ...wTourUtils.clickOnSave(),
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    ...clickOnImgAndWaitForLoad,
    ...removeImg,
]);

return __exports;
});
;

/***********************************************************************************
*  Filepath: /website_sale/static/tests/tours/website_sale_reorder_from_portal.js  *
*  Lines: 73                                                                       *
***********************************************************************************/
odoo.define('@website_sale/../tests/tours/website_sale_reorder_from_portal', ['@web/core/registry', 'website_sale.tour_utils', 'website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const wsTourUtils = require('website_sale.tour_utils');
const wTourUtils = require('website.tour_utils');

registry.category("web_tour.tours").add('website_sale_reorder_from_portal', {
        test: true,
        url: '/my/orders',
        steps: () => [
        // Initial reorder, nothing in cart
        {
            content: 'Select first order',
            trigger: '.o_portal_my_doc_table a:first',
        },
        wTourUtils.clickOnElement('Reorder Again', '.o_wsale_reorder_button'),
        wTourUtils.clickOnElement('Confirm', '.o_wsale_reorder_confirm'),
        wsTourUtils.assertCartContains({productName: 'Reorder Product 1'}),
        wsTourUtils.assertCartContains({productName: 'Reorder Product 2'}),
        {
            content: "Check that quantity is 1",
            trigger: ".js_quantity[value='1']",
        },
        // Second reorder, add reorder to cart
        {
            content: "Go back to my orders",
            trigger: "body",
            run: () => {
                window.location = "/my/orders";
            }
        },
        {
            content: 'Select first order',
            trigger: '.o_portal_my_doc_table a:first',
        },
        wTourUtils.clickOnElement('Reorder Again', '.o_wsale_reorder_button'),
        wTourUtils.clickOnElement('Confirm', '.o_wsale_reorder_confirm'),
        wTourUtils.clickOnElement('No', 'button:contains(No)'),
        wsTourUtils.assertCartContains({productName: 'Reorder Product 1'}),
        wsTourUtils.assertCartContains({productName: 'Reorder Product 2'}),
        {
            content: "Check that quantity is 2",
            trigger: ".js_quantity[value='2']",
        },
        // Third reorder, clear cart and reorder
        {
            content: "Go back to my orders",
            trigger: "body",
            run: () => {
                window.location = "/my/orders";
            }
        },
        {
            content: 'Select first order',
            trigger: '.o_portal_my_doc_table a:first',
        },
        wTourUtils.clickOnElement('Reorder Again', '.o_wsale_reorder_button'),
        wTourUtils.clickOnElement('Confirm', '.o_wsale_reorder_confirm'),
        wTourUtils.clickOnElement('Yes', 'button:contains(Yes)'),
        wsTourUtils.assertCartContains({productName: 'Reorder Product 1'}),
        wsTourUtils.assertCartContains({productName: 'Reorder Product 2'}),
        {
            content: "Check that quantity is 1",
            trigger: ".js_quantity[value='1']",
        },
    ]
});

return __exports;
});
;

/************************************************************************************
*  Filepath: /website_sale/static/tests/tours/website_sale_restricted_editor_ui.js  *
*  Lines: 49                                                                        *
************************************************************************************/
odoo.define('@website_sale/../tests/tours/website_sale_restricted_editor_ui', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-modules */

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('website_sale_restricted_editor_ui', {
    test: true,
    url: `/shop`,
}, [
    {
        content: "Open the site menu to check what is inside",
        trigger: '[data-menu-xmlid="website.menu_site"]',
    },
    {
        // Not very robust but still nice to have an extra check as this is the
        // main purpose of this tour
        content: "First check the user is not a designer",
        trigger: '.dropdown-menu:has([data-menu-xmlid="website_sale.menu_product_pages"]):not(:has([data-menu-xmlid="website.menu_website_pages_list"]))',
    },
    {
        content: "Ensure the publish and 'edit-in-backend' buttons are not shown",
        trigger: '.o_menu_systray:not(:has(.o_switch_danger_success)):not(:has(.o_website_edit_in_backend))',
        // Wait for the possibility to edit to appear
        extra_trigger: '.o_menu_systray .o_edit_website_container a',
    },
    {
        content: "Navigate to the first product",
        trigger: 'iframe .oe_product_image_link',
    },
    {
        content: "Click on publish/unpublish",
        trigger: '.o_menu_systray_item .o_switch_danger_success:has(input:checked)',
    },
    {
        content: "Click on edit-in-backend",
        trigger: '.o_menu_systray .o_website_edit_in_backend a',
        extra_trigger: '.o_menu_systray_item:not([data-processing]) .o_switch_danger_success:has(input:not(:checked))',
    },
    {
        content: "Check that you landed on a form view and that the record was unpublished",
        trigger: '.o-form-buttonbox [name="is_published"] .fa-globe.text-danger',
        run: () => {},
    },
]);

return __exports;
});
;

/*******************************************************************************************
*  Filepath: /website_sale/static/tests/tours/website_sale_shop_archived_variant_multi.js  *
*  Lines: 103                                                                              *
*******************************************************************************************/
odoo.define('@website_sale/../tests/tours/website_sale_shop_archived_variant_multi', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

function fail(errorMessage) {
    const tour = registry.get("tourManager");
    tour._consume_tour(tour.running_tour, errorMessage);
}

function assert(current, expected, info) {
    if (current !== expected) {
        fail(info + ': "' + current + '" instead of "' + expected + '".');
    }
}

registry.category("web_tour.tours").add('tour_shop_archived_variant_multi', {
    test: true,
    url: '/shop?search=Test Product 2',
    steps: () => [
    {
        content: "select Test Product",
        trigger: '.oe_product_cart a:containsExact("Test Product 2")',
    },
    {
        content: 'click on the first variant',
        trigger: 'input[data-attribute_name="Size"][data-value_name="Small"]',
    },
    {
        content: "click on the second variant",
        trigger: 'input[data-attribute_name="Color"][data-value_name="Black"]',
    },
    {
        content: "Check that brand b is not available and select it",
        trigger: '.css_not_available input[data-attribute_name="Brand"][data-value_name="Brand B"]',
    },
    {
        content: "check combination is not possible",
        trigger: '.js_main_product.css_not_available .css_not_available_msg:contains("This combination does not exist.")'
    },
    {
        content: "check add to cart not possible",
        trigger: '#add_to_cart.disabled',
        run: function () {},
    },
    {
        content: "change second variant to remove warning",
        trigger: 'input[data-attribute_name="Color"][data-value_name="White"]',
    },
    {
        content: "Check that second variant is disabled",
        trigger: '.css_not_available input[data-attribute_name="Color"][data-value_name="Black"]',
        run: function () {},
    },
]});

registry.category("web_tour.tours").add('test_09_pills_variant', {
    test: true,
    url: '/shop?search=Test Product 2',
    steps: () => [
    {
        content: "select Test Product",
        trigger: '.oe_product_cart a:containsExact("Test Product 2")',
    },
    {
        content: "check there are two radio boxes, both hidden",
        trigger: '.js_main_product',
        run: function() {
            var buttons = $('input.js_variant_change');

            function isVisuallyHidden(elem) {
                const style = window.getComputedStyle(elem);
                return style.display === "none" ||
                    style.visibility === "hidden" ||
                    style.opacity === "0" ||
                    (style.width === "0px" && style.height === "0px")
            }

            assert(buttons.length, 2, "there should be two radio inputs")
            assert(isVisuallyHidden(buttons[0]), true, "first radio input is not hidden")
            assert(isVisuallyHidden(buttons[1]), true, "second radio input is not hidden")
            assert(buttons[0].checked, true, "first radio input should be checked")
        },
    },
    {
        content: "click on the second variant label",
        trigger: 'label:contains("Small")',
    },
    {
        content: 'check second variant is selected',
        trigger: 'li.o_variant_pills.active:contains("Small")',
        run: function () {
            var button = $('input.js_variant_change[data-attribute_name="Size"][data-value_name="Small"]');
            assert(button.length, 1, "there should be one radio input")
            assert(button[0].checked, true, "the radio input should be checked")
        }
    },
]});

return __exports;
});
;

/**********************************************************************************
*  Filepath: /website_sale/static/tests/tours/website_sale_shop_cart_recovery.js  *
*  Lines: 89                                                                      *
**********************************************************************************/
odoo.define('@website_sale/../tests/tours/website_sale_shop_cart_recovery', ['web.local_storage', '@web/core/registry', 'website_sale.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const localStorage = require("web.local_storage");
const { registry } = require("@web/core/registry");
const tourUtils = require("website_sale.tour_utils");

var orderIdKey = 'website_sale.tour_shop_cart_recovery.orderId';
var recoveryLinkKey = 'website_sale.tour_shop_cart_recovery.recoveryLink';

registry.category("web_tour.tours").add('shop_cart_recovery', {
    test: true,
    url: '/shop?search=Acoustic Bloc Screens',
    steps: () => [
    {
        content: "select Acoustic Bloc Screens",
        trigger: '.oe_product_cart a:containsExact("Acoustic Bloc Screens")',
    },
    {
        content: "click add to cart",
        trigger: '#product_details #add_to_cart',
    },
        tourUtils.goToCart(),
    {
        content: "check product is in cart, get cart id, logout, go to login",
        trigger: 'td.td-product_name:contains("Acoustic Bloc Screens")',
        run: function () {
            var orderId = $('.my_cart_quantity').data('order-id');
            localStorage.setItem(orderIdKey, orderId);
            window.location.href = "/web/session/logout?redirect=/web/login";
        },
    },
    {
        content: "login as admin and go to the SO (backend)",
        trigger: '.oe_login_form',
        run: function () {
            var orderId = localStorage.getItem(orderIdKey);
            var url = "/web#action=sale.action_orders&view_type=form&id=" + orderId;
            var $loginForm = $('.oe_login_form');
            $loginForm.find('input[name="login"]').val("admin");
            $loginForm.find('input[name="password"]').val("admin");
            $loginForm.find('input[name="redirect"]').val(url);
            $loginForm.submit();
        },
    },
    {
        content: "click action",
        trigger: '.o_cp_action_menus .dropdown-toggle',
    },
    {
        content: "click Send a Cart Recovery Email",
        trigger: 'span:containsExact("Send a Cart Recovery Email")',
    },
    {
        content: "click Send email",
        trigger: '.btn[name="action_send_mail"]',
    },
    {
        content: "check the mail is sent, grab the recovery link, and logout",
        trigger: '.o-mail-Message-body a:containsExact("Resume order")',
        run: function () {
            var link = $('.o-mail-Message-body a:containsExact("Resume order")').attr('href');
            localStorage.setItem(recoveryLinkKey, link);
            window.location.href = "/web/session/logout?redirect=/";
        }
    },
    {
        content: "go to the recovery link",
        trigger: 'a[href="/web/login"]',
        run: function () {
            window.location.href = localStorage.getItem(recoveryLinkKey);
        },
    },
    {
        content: "check the page is working, click on restore",
        extra_trigger: 'p:contains("This is your current cart")',
        trigger: 'p:contains("restore") a:contains("Click here")',
    },
    {
        content: "check product is in restored cart",
        trigger: 'td.td-product_name:contains("Acoustic Bloc Screens")',
        run: function () {},
    },
]});

return __exports;
});
;

/*************************************************************************************************
*  Filepath: /website_sale/static/tests/tours/website_sale_shop_compare_list_price_pricelist.js  *
*  Lines: 43                                                                                     *
*************************************************************************************************/
odoo.define('@website_sale/../tests/tours/website_sale_shop_compare_list_price_pricelist', ['@web/core/registry', 'website_sale.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const tourUtils = require('website_sale.tour_utils');

registry.category("web_tour.tours").add('compare_list_price_price_list_display', {
        test: true,
        url: '/shop?search=test_product',
        steps: () => [
        tourUtils.assertProductPrice("price_reduce", "1,000", "test_product_default"),
        tourUtils.assertProductPrice("price_reduce", "2,000", "test_product_with_compare_list_price"),
        tourUtils.assertProductPrice("base_price",   "2,500", "test_product_with_compare_list_price"),
        tourUtils.assertProductPrice("price_reduce", "2,000", "test_product_with_pricelist"),
        tourUtils.assertProductPrice("price_reduce", "4,000", "test_product_with_pricelist_and_compare_list_price"),
        tourUtils.assertProductPrice("base_price",   "4,500", "test_product_with_pricelist_and_compare_list_price"),

        ...tourUtils.selectPriceList('pricelist_with_discount'),

        tourUtils.assertProductPrice("price_reduce", "1,000", "test_product_default"),
        tourUtils.assertProductPrice("price_reduce", "2,000", "test_product_with_compare_list_price"),
        tourUtils.assertProductPrice("base_price",   "2,500", "test_product_with_compare_list_price"),
        tourUtils.assertProductPrice("price_reduce", "1,500", "test_product_with_pricelist"),
        tourUtils.assertProductPrice("price_reduce", "3,500", "test_product_with_pricelist_and_compare_list_price"),
        tourUtils.assertProductPrice("base_price",   "4,500", "test_product_with_pricelist_and_compare_list_price"),

        ...tourUtils.selectPriceList('pricelist_without_discount'),

        tourUtils.assertProductPrice("price_reduce", "1,000", "test_product_default"),
        tourUtils.assertProductPrice("price_reduce", "2,000", "test_product_with_compare_list_price"),
        tourUtils.assertProductPrice("base_price",   "2,500", "test_product_with_compare_list_price"),
        tourUtils.assertProductPrice("price_reduce", "1,500", "test_product_with_pricelist"),
        tourUtils.assertProductPrice("base_price",   "2,000", "test_product_with_pricelist"),
        tourUtils.assertProductPrice("price_reduce", "3,500", "test_product_with_pricelist_and_compare_list_price"),
        tourUtils.assertProductPrice("base_price",   "4,500", "test_product_with_pricelist_and_compare_list_price"),

    ]
});

return __exports;
});
;

/*******************************************************************************************
*  Filepath: /website_sale/static/tests/tours/website_sale_shop_custom_attribute_value.js  *
*  Lines: 35                                                                               *
*******************************************************************************************/
odoo.define('@website_sale/../tests/tours/website_sale_shop_custom_attribute_value', ['@web/core/registry', 'website_sale.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/
    
    const { registry } = require("@web/core/registry");
    const tourUtils = require("website_sale.tour_utils");

    registry.category("web_tour.tours").add("shop_custom_attribute_value", {
        url: "/shop?search=Customizable Desk",
        test: true,
        steps: () => [{
        content: "click on Customizable Desk",
        trigger: '.oe_product_cart a:contains("Customizable Desk (TEST)")',
    }, {
        trigger: 'li.js_attribute_value span:contains(Custom TEST)',
        extra_trigger: 'li.js_attribute_value',
        run: 'click',
    }, {
        trigger: 'input.variant_custom_value',
        run: 'text Wood',
    }, {
        id: 'add_cart_step',
        trigger: 'a:contains(ADD TO CART)',
        run: 'click',
    },
        tourUtils.goToCart(),
    {
        trigger: 'span:contains(Custom TEST: Wood)',
        extra_trigger: '#cart_products',
        run: function (){}, // check
    }]});

return __exports;
});
;

/******************************************************************************
*  Filepath: /website_sale/static/tests/tours/website_sale_shop_customize.js  *
*  Lines: 156                                                                 *
******************************************************************************/
odoo.define('@website_sale/../tests/tours/website_sale_shop_customize', ['website_sale.tour_utils', 'website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const tourUtils = require('website_sale.tour_utils');
const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('shop_customize', {
    url: '/shop',
    edition: true,
    test: true,
},
    [
        ...wTourUtils.clickOnSave(),
        {
            content: "select product attribute Steel",
            extra_trigger: "iframe body:not(.editor_enable)",
            trigger: 'iframe form.js_attributes input:not(:checked) + label:contains(Steel - Test)',
        },
        {
            content: "check the selection",
            trigger: 'iframe form.js_attributes input:checked + label:contains(Steel - Test)',
            run: function () {}, // it's a check
        },
        {
            content: "select product",
            extra_trigger: 'iframe body:not(:has(.oe_website_sale .oe_product_cart:eq(3)))',
            trigger: 'iframe .oe_product_cart a:contains("Test Product")',
        },
        {
            content: "check list view of variants is disabled initially",
            extra_trigger: "iframe #product_detail",
            trigger: 'iframe body:not(:has(.js_product_change))',
            run: function () {},
        },
        ...wTourUtils.clickOnEditAndWaitEditMode(),
        {
            content: "open customize tab",
            trigger: '.o_we_customize_snippet_btn',
        },
        {
            content: "open 'Variants' selector",
            extra_trigger: '#oe_snippets .o_we_customize_panel',
            trigger: '[data-name="variants_opt"] we-toggler',
        },
        {
            content: "click on 'Products List' of the 'Variants' selector",
            trigger: 'we-button[data-name="variants_products_list_opt"]',
        },
        ...wTourUtils.clickOnSave(),
        {
            context: "check variant price",
            extra_trigger: "iframe body:not(.editor_enable)",
            trigger: 'iframe .form-check:contains("Aluminium") .badge:contains("+") .oe_currency_value:contains("50.4")',
            run: function () {},
        },
        {
            content: "check price is 750",
            trigger: "iframe .product_price .oe_price .oe_currency_value:containsExact(750.00)",
            run: function () {},
        },
        {
            content: "switch to another variant",
            trigger: "iframe .js_product label:contains('Aluminium')",
        },
        {
            content: "verify that price has changed when changing variant",
            trigger: "iframe .product_price .oe_price .oe_currency_value:containsExact(800.40)",
            run: function () {},
        },
        ...wTourUtils.clickOnEditAndWaitEditMode(),
        {
            content: "open customize tab",
            trigger: '.o_we_customize_snippet_btn',
        },
        {
            content: "open 'Variants' selector",
            extra_trigger: '#oe_snippets .o_we_customize_panel',
            trigger: '[data-name="variants_opt"] we-toggler',
        },
        {
            content: "click on 'Options' of the 'Variants' selector",
            trigger: 'we-button[data-name="variants_options_opt"]',
        },
        ...wTourUtils.clickOnSave(),
        {
            content: "check page loaded after list of variant customization disabled",
            extra_trigger: "iframe body:not(.editor_enable)",
            trigger: "iframe .js_product:not(:has(.js_product_change))",
            run: function () {}, // it's a check
        },
        {
            content: "check price is 750",
            trigger: "iframe .product_price .oe_price .oe_currency_value:containsExact(750.00)",
            run: function () {},
        },
        {
            content: "switch to Aluminium variant",
            trigger: 'iframe .js_product input[data-value_name="Aluminium"]',
        },
        {
            content: "verify that price has changed when changing variant",
            trigger: "iframe .product_price .oe_price .oe_currency_value:containsExact(800.40)",
            run: function () {}, // it's a check
        },
        {
            content: "switch back to Steel variant",
            trigger: "iframe .js_product label:contains('Steel - Test')",
        },
        {
            content: "check price is 750",
            trigger: "iframe .product_price .oe_price .oe_currency_value:containsExact(750.00)",
            run: function () {},
        },
        {
            content: "click on 'Add to Cart' button",
            trigger: "iframe a:contains(ADD TO CART)",
        },
        {
            content: "check quantity",
            trigger: 'iframe .my_cart_quantity:containsExact(1),.o_extra_menu_items .fa-plus',
            run: function () {}, // it's a check
        },
        tourUtils.goToCart({backend: true}),
        {
            content: "click on shop",
            trigger: "iframe a:contains(Continue Shopping)",
            extra_trigger: 'iframe body:not(:has(#products_grid_before .js_attributes))',
        },
        ...wTourUtils.clickOnEditAndWaitEditMode(),
        {
            content: "open customize tab",
            trigger: '.o_we_customize_snippet_btn',
        },
        {
            content: "remove 'Attributes'",
            extra_trigger: '#oe_snippets .o_we_customize_panel',
            trigger: 'we-button[data-name="attributes_opt"]',
        },
        ...wTourUtils.clickOnSave(),
        {
            content: "wait to exit edit mode",
            trigger: '.o_website_preview:not(.editor_has_snippets)',
        },
        {
            content: "finish",
            extra_trigger: 'iframe body:not(:has(#products_grid_before .js_attributes))',
            trigger: 'iframe #wrap:not(:has(li:has(.my_cart_quantity):visible))',
            run: function () {}, // it's a check
        },
    ],
);

return __exports;
});
;

/**********************************************************************************************
*  Filepath: /website_sale/static/tests/tours/website_sale_shop_deleted_archived_variants.js  *
*  Lines: 57                                                                                  *
**********************************************************************************************/
odoo.define('@website_sale/../tests/tours/website_sale_shop_deleted_archived_variants', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

// This tour relies on a data created from the python test.
registry.category("web_tour.tours").add('tour_shop_deleted_archived_variants', {
    test: true,
    url: '/shop?search=Test Product 2',
    steps: () => [
    {
        content: "check price on /shop (template price)",
        trigger: '.oe_product_cart .oe_currency_value:contains("1.00")',
    },
    {
        content: "select Test Product 2",
        trigger: '.oe_product_cart a:containsExact("Test Product 2")',
    },
    {
        content: "check price (3rd variant)",
        trigger: '.oe_currency_value:contains("31.00")'
    },
    {
        content: "click on the second variant",
        trigger: 'input[data-attribute_name="My Attribute"][data-value_name="My Value 2"]',
    },
    {
        content: "check combination is not possible",
        trigger: '.js_main_product.css_not_available .css_not_available_msg:contains("This combination does not exist.")'
    },
    {
        content: "click on the 3rd variant to reset the warning",
        trigger: 'input[data-attribute_name="My Attribute"][data-value_name="My Value 3"]',
    },
    {
        content: "check price (3rd variant)",
        trigger: '.oe_currency_value:contains("31.00")'
    },
    {
        content: "click on the first variant",
        trigger: 'input[data-attribute_name="My Attribute"][data-value_name="My Value 1"]',
    },
    {
        content: "check combination is not possible",
        trigger: '.js_main_product.css_not_available .css_not_available_msg:contains("This combination does not exist.")'
    },
    {
        content: "check add to cart not possible",
        trigger: '#add_to_cart.disabled',
        run: function () {},
    }
]});

return __exports;
});
;

/*************************************************************************************
*  Filepath: /website_sale/static/tests/tours/website_sale_shop_dynamic_variants.js  *
*  Lines: 40                                                                         *
*************************************************************************************/
odoo.define('@website_sale/../tests/tours/website_sale_shop_dynamic_variants', ['@web/core/registry', 'website_sale.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const tourUtils = require("website_sale.tour_utils");

// This tour relies on a data created from the python test.
registry.category("web_tour.tours").add('tour_shop_dynamic_variants', {
    test: true,
    url: '/shop?search=Dynamic Product',
    steps: () => [
    {
        content: "select Dynamic Product",
        trigger: '.oe_product_cart a:containsExact("Dynamic Product")',
    },
    {
        content: "click on the second variant",
        trigger: 'input[data-attribute_name="Dynamic Attribute"][data-value_name="Dynamic Value 2"]',
    },
    {
        content: "wait for variant to be loaded",
        trigger: '.oe_price .oe_currency_value:contains("0.00")',
        run: function () {},
    },
    {
        content: "click add to cart",
        extra_trigger: 'body:has(input[type="hidden"][name="product_id"][value=0])',
        trigger: '#add_to_cart',
    },
        tourUtils.goToCart(),
    {
        content: "check the variant is in the cart",
        trigger: 'td.td-product_name:contains(Dynamic Product (Dynamic Value 2))',
    },
]});

return __exports;
});
;

/********************************************************************************
*  Filepath: /website_sale/static/tests/tours/website_sale_shop_editor_tour.js  *
*  Lines: 26                                                                    *
********************************************************************************/
odoo.define('@website_sale/../tests/tours/website_sale_shop_editor_tour', ['website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require("website.tour_utils");

wTourUtils.registerWebsitePreviewTour("shop_editor", {
    test: true,
    url: "/shop",
    edition: true,
}, [{
    content: "Click on pricelist dropdown",
    trigger: "iframe div.o_pricelist_dropdown a[data-bs-toggle=dropdown]",
}, {
    trigger: "iframe input[name=search]",
    extra_trigger: "iframe div.o_pricelist_dropdown a[data-bs-toggle=dropdown][aria-expanded=true]",
    content: "Click somewhere else in the shop.",
}, {
    trigger: "iframe div.o_pricelist_dropdown a[data-bs-toggle=dropdown]",
    extra_trigger: "iframe div.o_pricelist_dropdown a[data-bs-toggle=dropdown][aria-expanded=false]",
    content: "Click on the pricelist again.",
}]);

return __exports;
});
;

/**********************************************************************************
*  Filepath: /website_sale/static/tests/tours/website_sale_shop_list_view_b2c.js  *
*  Lines: 82                                                                      *
**********************************************************************************/
odoo.define('@website_sale/../tests/tours/website_sale_shop_list_view_b2c', ['website_sale.tour_utils', 'website.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const tourUtils = require('website_sale.tour_utils');
const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('shop_list_view_b2c', {
    test: true,
    url: '/shop?search=Test Product',
},
    [
        {
            content: "check price on /shop",
            trigger: 'iframe .oe_product_cart .oe_currency_value:contains("825.00")',
            run: () => {}, // It's a check.
        },
        {
            content: "select product",
            trigger: 'iframe .oe_product_cart a:contains("Test Product")',
        },
        {
            content: "check products list is disabled initially (when on /product page)",
            trigger: 'iframe body:not(:has(.js_product_change))',
            extra_trigger: 'iframe #product_details',
            run: () => {}, // It's a check.
        },
        ...wTourUtils.clickOnEditAndWaitEditMode(),
        {
            content: "open customize tab",
            trigger: '.o_we_customize_snippet_btn',
        },
        {
            content: "open 'Variants' selector",
            extra_trigger: '#oe_snippets .o_we_customize_panel',
            trigger: '[data-name="variants_opt"] we-toggler',
        },
        {
            content: "click on 'Products List' of the 'Variants' selector",
            trigger: 'we-button[data-name="variants_products_list_opt"]',
        },
        ...wTourUtils.clickOnSave(),
        {
            content: "check page loaded after 'Products List' enabled",
            trigger: 'iframe .js_product_change',
            run: () => {}, // It's a check.
        },
        {
            context: "check variant price",
            trigger: 'iframe .form-check:contains("Aluminium") .badge:contains("+") .oe_currency_value:contains("55.44")',
            run: () => {}, // It's a check.
        },
        {
            content: "check price is 825",
            trigger: 'iframe .product_price .oe_price .oe_currency_value:containsExact(825.00)',
            run: () => {}, // It's a check.
        },
        {
            content: "switch to another variant",
            trigger: 'iframe .js_product label:contains("Aluminium")',
        },
        {
            content: "verify that price has changed when changing variant",
            trigger: 'iframe .product_price .oe_price .oe_currency_value:containsExact(880.44)',
            run: () => {}, // It's a check.
        },
        {
            content: "click on 'Add to Cart' button",
            trigger: 'iframe a:contains(ADD TO CART)',
        },
        tourUtils.goToCart({backend: true}),
        {
            content: "check price on /cart",
            trigger: 'iframe #cart_products .oe_currency_value:containsExact(880.44)',
            run: () => {}, // It's a check.
        },
    ],
);

return __exports;
});
;

/*************************************************************************
*  Filepath: /website_sale/static/tests/tours/website_sale_shop_mail.js  *
*  Lines: 90                                                             *
*************************************************************************/
odoo.define('@website_sale/../tests/tours/website_sale_shop_mail', ['web.rpc', '@web/core/registry', 'website_sale.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const rpc = require("web.rpc");
const { registry } = require("@web/core/registry");
const tourUtils = require("website_sale.tour_utils");

registry.category("web_tour.tours").add('shop_mail', {
    test: true,
    url: '/',
    steps: () => [
    {
        content: "Change the domain of the websites and go to shop",
        trigger: 'body',
        run: function () {
            // We change the domain of the website to test that the email that
            // will be sent uses the correct domain for its links.
            var def1 = rpc.query({
                'model': 'website',
                'method': 'write',
                'args': [[1], {
                    'domain': "my-test-domain.com",
                }],
            });
            // We need to change the domain of all the websites otherwise the
            // website selector will return the website 2 since the domain we
            // set on website 1 doesn't actually match our test server.
            var def2 = rpc.query({
                'model': 'website',
                'method': 'write',
                'args': [[2], {
                    'domain': "https://domain-not-used.fr",
                }],
            });
            Promise.all([def1, def2]).then(function (data) {
                window.location.href = '/shop?search=Acoustic Bloc Screens';
            });
        },
    },
    {
        content: "select Acoustic Bloc Screens",
        trigger: '.oe_product_cart a:containsExact("Acoustic Bloc Screens")',
    },
    {
        content: "click add to cart",
        trigger: '#product_details #add_to_cart',
    },
        tourUtils.goToCart(),
    {
        content: "check product is in cart, get cart id, go to backend",
        trigger: 'td.td-product_name:contains("Acoustic Bloc Screens")',
        run: function () {
            var orderId = $('.my_cart_quantity').data('order-id');
            window.location.href = "/web#action=sale.action_orders&view_type=form&id=" + orderId;
        },
    },
    {
        content: "click confirm",
        trigger: '.btn[name="action_confirm"]',
    },
    {
        content: "click send by email",
        trigger: '.btn[name="action_quotation_send"]',
        extra_trigger: '.o_statusbar_status .o_arrow_button_current:contains("Sales Order")',
    },
    {
        content: "Open recipients dropdown",
        trigger: '.o_field_many2many_tags_email[name=partner_ids] input',
        run: 'click',
    },
    {
        content: "Select azure interior",
        trigger: '.ui-menu-item a:contains(Interior24)',
        in_modal: false,
    },
    {
        content: "click Send email",
        trigger: '.btn[name="action_send_mail"]',
        extra_trigger: '.o_badge_text:contains("Azure")',
    },
    {
        content: "wait mail to be sent, and go see it",
        trigger: '.o-mail-Message-body:contains("Your"):contains("order")',
    },
]});

return __exports;
});
;

/*****************************************************************************************
*  Filepath: /website_sale/static/tests/tours/website_sale_shop_no_variant_attribute.js  *
*  Lines: 42                                                                             *
*****************************************************************************************/
odoo.define('@website_sale/../tests/tours/website_sale_shop_no_variant_attribute', ['@web/core/registry', 'website_sale.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const tourUtils = require("website_sale.tour_utils");

// This tour relies on a data created from the python test.
registry.category("web_tour.tours").add('tour_shop_no_variant_attribute', {
    test: true,
    url: '/shop?search=Test Product 3',
    steps: () => [
    {
        content: "select Test Product 3",
        trigger: '.oe_product_cart a:containsExact("Test Product 3")',
    },
    {
        content: "check price",
        trigger: '.oe_currency_value:contains("1.00")',
        run: function () {},
    },
    {
        content: "add to cart",
        trigger: 'a:contains(ADD TO CART)',
    },
        tourUtils.goToCart(),
    {
        content: "check no_variant value is present",
        trigger: '.td-product_name:contains(No Variant Attribute: No Variant Value)',
        extra_trigger: '#cart_products',
        run: function () {},
    },
    {
        content: "check price is correct",
        trigger: '.td-price:contains(11.0)',
        run: function () {},
    },
]});

return __exports;
});
;

/***********************************************************************************
*  Filepath: /website_sale/static/tests/tours/website_sale_shop_pricelist_tour.js  *
*  Lines: 43                                                                       *
***********************************************************************************/
odoo.define('@website_sale/../tests/tours/website_sale_shop_pricelist_tour', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add(
    "website_sale.website_sale_shop_pricelist_tour",
    {
        test: true,
        url: '/shop',
        steps: () => [
            {
                content: "Check pricelist",
                trigger: ".o_pricelist_dropdown .dropdown-toggle:not(:contains('User Pricelist'))",
                run: function() {} // Check
            },
            {
                content: "Go to login page",
                trigger: ".nav-link:contains('Sign in')"
            },
            {
                content: "Submit login",
                trigger: '.oe_login_form',
                run: function () {
                    $('.oe_login_form input[name="login"]').val("toto");
                    $('.oe_login_form input[name="password"]').val("long_enough_password");
                    $('.oe_login_form input[name="redirect"]').val("/shop");
                    $('.oe_login_form').submit();
                }
            },
            {
                content: "Check pricelist",
                trigger: ".o_pricelist_dropdown .dropdown-toggle:contains('User Pricelist')",
                run: function() {} // Check
            },
        ]
    }
);

return __exports;
});
;

/*************************************************************************
*  Filepath: /website_sale/static/tests/tours/website_sale_shop_zoom.js  *
*  Lines: 57                                                             *
*************************************************************************/
odoo.define('@website_sale/../tests/tours/website_sale_shop_zoom', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

var imageSelector = '#o-carousel-product .carousel-item.active img';
var imageName = "A Colorful Image";
var nameGreen = "Forest Green";

// This tour relies on a data created from the python test.
registry.category("web_tour.tours").add('shop_zoom', {
    test: true,
    url: '/shop?debug=1&search=' + imageName,
    steps: () => [
    {
        content: "select " + imageName,
        trigger: '.oe_product_cart a:containsExact("' + imageName + '")',
    },
    {
        content: "click on the image",
        trigger: imageSelector,
        run: 'clicknoleave',
    },
    {
        content: "check that the image viewer opened",
        trigger: '.o_wsale_image_viewer',
        run: () => {},
    },
    {
        content: "close the image viewer",
        trigger: '.o_wsale_image_viewer_header span.fa-times',
    },
    {
        content: "change variant",
        trigger: 'input[data-attribute_name="Beautiful Color"][data-value_name="' + nameGreen + '"]',
        run: 'click',
    },
    {
        content: "wait for variant to be loaded",
        trigger: '.oe_currency_value:contains("21.00")'
    },
    {
        content: "click on the image",
        trigger: imageSelector,
        run: 'clicknoleave',
    },
    {
        content: "check there is a zoom on that big image",
        trigger: '.o_wsale_image_viewer',
        run: () => {},
    },
]});

return __exports;
});
;

/********************************************************************************
*  Filepath: /website_sale/static/tests/tours/website_sale_snippet_products.js  *
*  Lines: 90                                                                    *
********************************************************************************/
odoo.define('@website_sale/../tests/tours/website_sale_snippet_products', ['website.tour_utils', 'website_sale.tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');
const wSaleTourUtils = require('website_sale.tour_utils');

const optionBlock = 'dynamic_snippet_products';
const productsSnippet = {id: 's_dynamic_snippet_products', name: 'Products'};
const templates = [
    "dynamic_filter_template_product_product_add_to_cart",
    "dynamic_filter_template_product_product_view_detail",
    "dynamic_filter_template_product_product_mini_image",
    "dynamic_filter_template_product_product_mini_price",
    "dynamic_filter_template_product_product_mini_name",
    "dynamic_filter_template_product_product_centered",
    "dynamic_filter_template_product_product_borderless_1",
    "dynamic_filter_template_product_product_borderless_2",
    "dynamic_filter_template_product_product_banner",
    "dynamic_filter_template_product_product_horizontal_card",
    "dynamic_filter_template_product_product_horizontal_card_2",
    "dynamic_filter_template_product_product_card_group",
];

function changeTemplate(templateKey) {
    const templateClass = templateKey.replace(/dynamic_filter_template_/, "s_");
    return [
        wTourUtils.changeOption(optionBlock, 'we-select[data-name="template_opt"] we-toggler', 'template'),
        wTourUtils.changeOption(optionBlock, `we-button[data-select-data-attribute="website_sale.${templateKey}"]`),
        {
            content: 'Check the template is applied',
            trigger: `iframe .s_dynamic_snippet_products.${templateClass} .carousel`,
            run: () => null, // It's a check
        },
    ];
}

let templatesSteps = [];
for (const templateKey of templates) {
    templatesSteps = templatesSteps.concat(changeTemplate(templateKey));
}
wTourUtils.registerWebsitePreviewTour('website_sale.snippet_products', {
    test: true,
    url: '/',
    edition: true,
},
[
    wTourUtils.dragNDrop(productsSnippet),
    wTourUtils.clickOnSnippet(productsSnippet),
    ...templatesSteps,
    ...changeTemplate('dynamic_filter_template_product_product_add_to_cart'),
    ...wTourUtils.clickOnSave(),
    {
        trigger: "iframe .s_dynamic_snippet_products .o_carousel_product_card_body .js_add_cart",
        run: 'click',
    },
    wSaleTourUtils.goToCart({backend: true}),
]);

wTourUtils.registerWebsitePreviewTour('website_sale.products_snippet_recently_viewed', {
    test: true,
    url: '/',
    edition: true,
},
[
    wTourUtils.dragNDrop(productsSnippet),
    wTourUtils.clickOnSnippet(productsSnippet),
    ...changeTemplate('dynamic_filter_template_product_product_add_to_cart'),
    wTourUtils.changeOption(optionBlock, 'we-select[data-name="filter_opt"] we-toggler', 'filter'),
    wTourUtils.changeOption(optionBlock, 'we-select[data-name="filter_opt"] we-button:contains("Recently Viewed")', 'filter'),
    ...wTourUtils.clickOnSave(),
    {
        content: 'make delete icon appear',
        trigger: 'iframe .s_dynamic_snippet_products .o_carousel_product_card',
        run: function () {
            const $iframe = $('.o_iframe').contents();
            const $productCard = $iframe.find('.o_carousel_product_card:has(a img[alt="Storage Box"])');
            console.log($productCard);
            $productCard.find('.js_remove').attr('style', 'display: block;');
        }
    },
    {
        trigger: 'iframe .s_dynamic_snippet_products .o_carousel_product_card .js_remove',
        run: 'click',
    },
]);

return __exports;
});
;

/*****************************************************************************
*  Filepath: /project_enterprise/static/tests/tours/task_gantt_tour_test.js  *
*  Lines: 75                                                                 *
*****************************************************************************/
odoo.define('@project_enterprise/../tests/tours/task_gantt_tour_test', ['@web/core/registry', '@project/../tests/tours/project_tour', '@web/core/utils/patch'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

/**
 * Add custom steps to go to map and gantt view in Project app
 */
const { registry } = require("@web/core/registry");
require("@project/../tests/tours/project_tour");
const { patch } = require("@web/core/utils/patch");

function openProjectUpdateAndReturnToTasks(view, viewClass) {
    return [{
            trigger: '.o_project_updates_breadcrumb',
            content: 'Open Project Update from view : ' + view,
            extra_trigger: "." + viewClass,
        }, {
            trigger: ".o-kanban-button-new",
            content: "Create a new update from project task view : " + view,
            extra_trigger: '.o_project_update_kanban_view',
        }, {
            trigger: "button.o_form_button_cancel",
            content: "Discard project update from project task view : " + view,
        }, {
            trigger: ".o_switch_view.o_list",
            content: "Go to list of project update from view " + view,
        }, {
            trigger: '.o_back_button',
            content: 'Go back to the task view : ' + view,
            // extra_trigger: '.o_list_table', // FIXME: [XBO] uncomment it when sample data will be displayed after discarding creation of project update record.
        },
    ];
}

patch(registry.category("web_tour.tours").get("project_test_tour"), "patch_project_enterprise_tour", {
    steps() {
        const originalSteps = this._super();
        const taskCreationStepIndex = originalSteps.findIndex((step) => step.id === "quick_create_tasks");

        originalSteps.splice(taskCreationStepIndex + 1, 0, {
            trigger: '.o_switch_view.o_gantt',
            content: 'Open Gantt View',
        }, {
            trigger: '.o_gantt_button_add',
            content: 'Add a task in gantt',
        });

        originalSteps.splice(originalSteps.length, 0, {
            trigger: ".o_gantt_progress_bar",
            content: "See user progress bar",
            run: function () {
                const $progressbar = $(".o_gantt_progress_bar:eq(0)");
                if ($progressbar.length) {
                    if ($progressbar.find("span:eq(0)")[0].style.width === '') {
                        console.error("Progress bar should be displayed");
                    }
                    if (!$progressbar[0].classList.contains("o_gantt_group_danger")) {
                        console.error("Progress bar should be displayed in danger");
                    }
                } else {
                    console.error("Not able to select progressbar");
                }
            }
        }, ...openProjectUpdateAndReturnToTasks("Gantt", "o_gantt_view"), {
            trigger: '.o_switch_view.o_map',
            content: 'Open Map View',
        }, ...openProjectUpdateAndReturnToTasks("Map", "o_map_view"));

        return originalSteps;
    }
});

return __exports;
});
;

/*********************************************************
*  Filepath: /hr/static/tests/tours/hr_employee_flow.js  *
*  Lines: 36                                             *
*********************************************************/
odoo.define('@hr/../tests/tours/hr_employee_flow', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('hr_employee_tour', {
    test: true,
    url: '/web',
    steps: () => [
    stepUtils.showAppsMenuItem(),
    {
        content: "Open Employees app",
        trigger: ".o_app[data-menu-xmlid='hr.menu_hr_root']",
        run: 'click',
    },
    {
        content: "Open an Employee Profile",
        trigger: ".o_kanban_record_title:contains('Johnny H.')",
        run: 'click',
    },
    {
        content: "Open user account menu",
        trigger: ".o_user_menu .dropdown-toggle",
        run: 'click',
    }, {
        content: "Open My Profile",
        trigger: "[data-menu=settings]",
        run: 'click',
    },
]});

return __exports;
});
;

/*********************************************************************
*  Filepath: /hr/static/tests/tours/user_modify_own_profile_tour.js  *
*  Lines: 37                                                         *
*********************************************************************/
odoo.define('@hr/../tests/tours/user_modify_own_profile_tour', ['@web_tour/tour_service/tour_utils', '@web/core/registry', '@web/core/utils/patch'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { stepUtils } = require("@web_tour/tour_service/tour_utils");
const { registry } = require("@web/core/registry");
const { patch } = require("@web/core/utils/patch");

/**
 * As 'hr' changes the flow a bit and displays the user preferences form in a full view instead of
 * a modal, we adapt the steps of the original tour accordingly.
 */
patch(registry.category("web_tour.tours").get("mail/static/tests/tours/user_modify_own_profile_tour.js"), "patch_user_modify_own_profile_tour", {
    steps() {
        return [
            {
                content: 'Open user account menu',
                trigger: '.o_user_menu button',
            }, 
            {
                content: "Open preferences / profile screen",
                trigger: '[data-menu=settings]',
            }, 
            {
                content: "Update the email address",
                trigger: 'div[name="email"] input',
                run: 'text updatedemail@example.com',
            }, 
            ...stepUtils.saveForm(),
        ];
    }
});


return __exports;
});
;

/**************************************************************************
*  Filepath: /timesheet_grid/static/tests/tours/timesheet_record_time.js  *
*  Lines: 44                                                              *
**************************************************************************/
odoo.define('@timesheet_grid/../tests/tours/timesheet_record_time', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('timesheet_record_time', {
    test: true,
    url: "/web",
    steps: () => [
    {
        trigger: ".o_app[data-menu-xmlid='hr_timesheet.timesheet_menu_root']",
        content: "Open Timesheet app.",
        run: "click"
    },
    {
        trigger: '.btn_start_timer',
        content: "Launch the timer to start a new activity.",
        run: "click"
    },
    {
        trigger: 'div[name=name] input',
        content: "Describe your activity.",
        run: "text Description"
    },
    {
        trigger: '.timesheet-timer div[name="project_id"] input',
        content: "Select the project on which you are working.",
        run: "text Test Project",
    },
    {
        trigger: ".ui-autocomplete > li > a:contains(Test Project)",
        auto: true,
    },
    {
        trigger: '.btn_stop_timer',
        content: "Stop the timer when you are done.",
        run: "click"
    }
]});

return __exports;
});
;

/*********************************************************************
*  Filepath: /hr_expense/static/tests/tours/expense_upload_tours.js  *
*  Lines: 84                                                         *
*********************************************************************/
odoo.define('@hr_expense/../tests/tours/expense_upload_tours', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/
    
    const { registry } = require("@web/core/registry");
    const { stepUtils } = require("@web_tour/tour_service/tour_utils");

    registry.category("web_tour.tours").add('hr_expense_test_tour', {
        test: true,
        url: "/web",
        steps: () => [stepUtils.showAppsMenuItem(),
        {
            content: "Go to Expense",
            trigger: '.o_app[data-menu-xmlid="hr_expense.menu_hr_expense_root"]',
        },
        {
            content: "Go to My Expenses",
            trigger: 'a[data-menu-xmlid="hr_expense.menu_hr_expense_my_expenses"]',
        },
        {
            content: "Go to My Expenses to Report",
            trigger: 'a[data-menu-xmlid="hr_expense.menu_hr_expense_my_expenses_to_submit"]',
        },
        {
            content: "Check Upload Button",
            trigger: '.o_button_upload_expense',
            run() {
                const button = document.querySelector('.o_button_upload_expense');
                if(!button) {
                    console.error('Missing Upload button in My Expenses to Report > List View');
                }
            }
        },
        {
            content: "Go to kanban view",
            trigger: "button.o_switch_view.o_kanban",
        },
        {
            content: "Check Upload Button",
            trigger: "button.o_switch_view.o_kanban.active",
            run() {
                const button = document.querySelector('.o_button_upload_expense');
                if(!button) {
                    console.error('Missing Upload button in My Expenses to Report > Kanban View');
                }
            }
        },
        {
            content: "Go to Reporting",
            trigger: 'a[data-menu-xmlid="hr_expense.menu_hr_expense_reports"]',
        },
        {
            content: "Go to Expenses Analysis",
            trigger: 'a[data-menu-xmlid="hr_expense.menu_hr_expense_all_expenses"]',
        },
        {
            content: "Check Upload Button",
            trigger: 'li.breadcrumb-item:contains("Expenses Analysis")',
            run() {
                const button = document.querySelector('.o_button_upload_expense');
                if(!button) {
                    console.error('Missing Upload button in Expenses Analysis > List View');
                }
            }
        },
        {
            content: "Go to kanban view",
            trigger: "button.o_switch_view.o_kanban",
        },
        {
            content: "Check Upload Button",
            trigger: "button.o_switch_view.o_kanban.active",
            run() {
                const button = document.querySelector('.o_button_upload_expense');
                if(!button) {
                    console.error('Missing Upload button in Expenses Analysis > Kanban View');
                }
            }
        },
    ]});

return __exports;
});
;

/*************************************************************
*  Filepath: /web_studio/static/tests/tours/tour_helpers.js  *
*  Lines: 38                                                 *
*************************************************************/
odoo.define('@web_studio/../tests/tours/tour_helpers', [], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

__exports.assertEqual = assertEqual; function assertEqual(actual, expected) {
    if (actual !== expected) {
        throw new Error(`Assert failed: expected: ${expected} ; got: ${actual}`);
    }
}

async function nextTick() {
    await new Promise((resolve) => setTimeout(resolve));
    await new Promise((resolve) => requestAnimationFrame(resolve));
}

__exports.stepNextTick = stepNextTick; function stepNextTick() {
    // FIXME: this probably should be handled by the tour-as-macro infrastructure
    // The case is to have a dom node with a constant selector. It will trigger the next step
    // even though the element will be changed after, resulting in non-deterministic bugs.
    // This is especially the case in the case of inputs, where we'd want to assert their value changed
    return {
        trigger: "body",
        run() {
            return nextTick();
        },
    };
}

__exports.stepNotInStudio = stepNotInStudio; function stepNotInStudio(trigger) {
    return {
        extra_trigger: "body:not(:has(.o_studio))",
        trigger: trigger || "body",
    };
}

return __exports;
});
;

/**********************************************************************
*  Filepath: /web_studio/static/tests/tours/web_studio_main_tours.js  *
*  Lines: 1659                                                        *
**********************************************************************/
odoo.define('@web_studio/../tests/tours/web_studio_main_tours', ['@web/core/browser/browser', '@web/core/registry', '@web_studio/utils', '@web_studio/../tests/tours/tour_helpers'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { browser } = require("@web/core/browser/browser");
const { registry } = require("@web/core/registry");
const { randomString } = require("@web_studio/utils");
const {
    assertEqual,
    stepNextTick,
    stepNotInStudio,
} = require("@web_studio/../tests/tours/tour_helpers");

const localStorage = browser.localStorage;
let createdAppString = null;
let createdMenuString = null;

registry.category("web_tour.tours").add("web_studio_main_and_rename", {
    url: "/web?debug=1",
    test: true,
    steps: () => [
        {
            // open studio
            trigger: ".o_main_navbar .o_web_studio_navbar_item",
            extra_trigger: ".o_home_menu_background",
        },
        {
            trigger: ".o_web_studio_new_app",
        },
        {
            // the next steps are here to create a new app
            trigger: ".o_web_studio_app_creator_next",
        },
        {
            trigger: ".o_web_studio_app_creator_name > input",
            run: "text " + (createdAppString = randomString(6)),
        },
        {
            trigger: ".o_web_studio_app_creator_next.is_ready",
        },
        {
            trigger: ".o_web_studio_menu_creator > input",
            run: "text " + (createdMenuString = randomString(6)),
        },
        {
            trigger: ".o_web_studio_app_creator_next.is_ready",
        },
        {
            // disable chatter in model configurator, we'll test adding it on later
            trigger: 'input[name="use_mail"]',
        },
        {
            trigger: ".o_web_studio_model_configurator_next",
        },
        {
            // toggle the home menu outside of studio and come back in studio
            extra_trigger: ".o_menu_toggle:not(.o_menu_toggle_back)",
            trigger: ".o_web_studio_leave > a.btn",
            timeout: 60000 /* previous step reloads registry, etc. - could take a long time */,
        },
        {
            extra_trigger: `.o_web_client:not(.o_in_studio)` /* wait to be out of studio */,
            trigger: ".o_menu_toggle:not(.o_menu_toggle_back)",
            timeout: 60000 /* previous step reloads registry, etc. - could take a long time */,
        },
        {
            trigger: ".o_main_navbar .o_web_studio_navbar_item",
            extra_trigger: ".o_home_menu_background",
        },
        {
            // open the app creator and leave it
            trigger: ".o_web_studio_new_app",
        },
        {
            extra_trigger: ".o_web_studio_app_creator",
            trigger: ".o_web_studio_leave > a.btn",
        },
        {
            // go back to the previous app
            trigger: ".o_home_menu",
            run: () => {
                window.dispatchEvent(
                    new KeyboardEvent("keydown", {
                        bubbles: true,
                        key: "Escape",
                    })
                );
            },
        },
        {
            // this should open the previous app outside of studio
            extra_trigger: `.o_web_client:not(.o_in_studio) .o_menu_brand:contains(${createdAppString})`,
            // go back to the home menu
            trigger: ".o_menu_toggle:not(.o_menu_toggle_back)",
        },
        {
            trigger: "input.o_search_hidden",
            // Open Command Palette
            run: "text " + createdMenuString[0],
        },
        {
            trigger: ".o_command_palette_search input",
            run: "text " + "/" + createdMenuString,
        },
        {
            // search results should have been updated
            extra_trigger: `.o_command.focused:contains(${createdAppString} / ${createdMenuString})`,
            trigger: ".o_command_palette",
            // Close the Command Palette
            run: () => {
                window.dispatchEvent(
                    new KeyboardEvent("keydown", {
                        key: "Escape",
                    })
                );
            },
        },
        {
            // enter Studio
            trigger: ".o_main_navbar .o_web_studio_navbar_item",
        },
        {
            // edit an app
            extra_trigger: ".o_studio_home_menu",
            trigger: `.o_app[data-menu-xmlid*="studio"]:contains(${createdAppString})`,
            run: function () {
                // We can't emulate a hover to display the edit icon
                const editIcon = this.$anchor[0].querySelector(".o_web_studio_edit_icon");
                editIcon.style.visibility = "visible";
                editIcon.click();
            },
        },
        {
            // design the icon
            // TODO: we initially tested this (change an app icon) at the end but a
            // long-standing bug (KeyError: ir.ui.menu.display_name, caused by a registry
            // issue with multiple workers) on runbot prevent us from doing it. It thus have
            // been moved at the beginning of this test to avoid the registry to be reloaded
            // before the write on ir.ui.menu.
            trigger: ".o_web_studio_selector:eq(0)",
        },
        {
            trigger: ".o_web_studio_palette > .o_web_studio_selector:first",
        },
        {
            trigger: ".modal-footer .btn.btn-primary",
        },
        {
            // click on the created app
            trigger: `.o_app[data-menu-xmlid*="studio"]:contains(${createdAppString})`,
        },
        {
            // create a new menu
            trigger: ".o_main_navbar .o_web_edit_menu",
        },
        {
            trigger: "footer.modal-footer .js_add_menu",
        },
        {
            trigger: 'input[name="menuName"]',
            run: "text " + (createdMenuString = randomString(6)),
        },
        {
            trigger: 'div.o_web_studio_menu_creator_model_choice input[value="existing"]',
        },
        {
            trigger: "div.o_web_studio_menu_creator_model .o_field_many2one_selection input",
            run: "text a",
        },
        {
            trigger:
                ".o_field_many2one_selection .o-autocomplete--dropdown-menu > li > a:not(:has(.fa-spin))",
        },
        {
            extra_trigger: ".o_field_many2one_selection :not(.o-autocomplete dropdown-menu)",
            trigger: '.o_web_studio_add_menu_modal button:contains(Confirm):not(".disabled")',
        },
        {
            extra_trigger: ":not(.o_inactive_modal) .o-web-studio-appmenu-editor",
            trigger: '.o-web-studio-appmenu-editor button:contains(Confirm):not(".disabled")',
        },
        {
            // check that the Studio menu is still there
            extra_trigger: ".o_web_studio_menu",
            // switch to form view
            trigger: '.o_web_studio_views_icons > a[title="Form"]',
        },
        {
            // wait for the form editor to be rendered because the sidebar is the same
            extra_trigger: ".o_web_studio_form_view_editor",
            // unfold 'Existing Fieldqs' section
            trigger: ".o_web_studio_existing_fields_header",
        },
        {
            // add an new field
            trigger:
                ".o_web_studio_sidebar .o_web_studio_field_type_container:eq(1) .o_web_studio_field_char",
            run: "drag_and_drop_native .o_web_studio_form_view_editor .o_inner_group",
        },
        {
            // click on the field
            trigger: ".o_web_studio_form_view_editor .o_wrap_label:first label",
            // when it's there
            extra_trigger: '.o_web_studio_sidebar input[name="technical_name"]',
        },
        {
            // rename the label
            trigger: '.o_web_studio_sidebar input[name="string"]',
            run: "text My Coucou Field",
        },
        stepNextTick(),
        {
            // verify that the field name has changed and change it
            trigger: '.o_web_studio_sidebar input[name="technical_name"]',
            run(helper) {
                assertEqual(this.$anchor[0].value, "my_coucou_field");
                helper.text("coucou");
            },
            // the rename operation (/web_studio/rename_field + /web_studio/edit_view)
            // takes a while and sometimes reaches the default 10s timeout
            timeout: 20000,
        },
        {
            // click on "Add" tab
            trigger: ".o_web_studio_sidebar .o_web_studio_new",
            // the rename operation (/web_studio/rename_field + /web_studio/edit_view)
            // takes a while and sometimes reaches the default 10s timeout
            timeout: 20000,
        },
        {
            // add a new field
            trigger:
                ".o_web_studio_sidebar .o_web_studio_field_type_container:eq(1) .o_web_studio_field_char",
            run: "drag_and_drop_native .o_web_studio_form_view_editor .o_inner_group",
        },
        {
            // rename the field with the same name
            trigger: '.o_web_studio_sidebar input[name="technical_name"]',
            run: "text coucou",
        },
        {
            // an alert dialog should be opened
            trigger: ".modal-footer > button:first",
        },
        {
            // rename the label
            trigger: '.o_web_studio_sidebar input[name="string"]',
            run: "text COUCOU",
        },
        stepNextTick(),
        {
            // verify that the field name has changed (post-fixed by _1)
            trigger: '.o_web_studio_sidebar input[name="technical_name"]',
            run(helper) {
                assertEqual(this.$anchor[0].value, "coucou_1");
            },
            // the rename operation (/web_studio/rename_field + /web_studio/edit_view)
            // takes a while and sometimes reaches the default 10s timeout
            timeout: 20000,
        },
        {
            trigger: ".o_web_studio_sidebar .o_web_studio_new",
        },
        {
            // add a monetary field --> create a currency field
            trigger:
                ".o_web_studio_sidebar .o_web_studio_field_type_container:eq(1) .o_web_studio_field_monetary",
            run: "drag_and_drop_native .o_web_studio_form_view_editor .o_inner_group",
        },
        {
            // verify that the monetary field is in the view
            extra_trigger:
                '.o_web_studio_form_view_editor .o_wrap_label:eq(1) label:contains("New Monetary")',
            // switch the two first fields
            trigger: ".o_web_studio_form_view_editor .o_inner_group:first .o-draggable:eq(1)",
            run: "drag_and_drop_native .o_inner_group:first .o_web_studio_hook:first",
        },
        {
            // click on "Add" tab
            extra_trigger:
                '.o_web_studio_form_view_editor .o_wrap_label:eq(0) label:contains("New Monetary")',
            trigger: ".o_web_studio_sidebar .o_web_studio_new",
        },
        {
            // verify that the fields have been switched
            extra_trigger:
                '.o_web_studio_form_view_editor .o_wrap_label:eq(0) label:contains("New Monetary")',
            // add a m2m field
            trigger:
                ".o_web_studio_sidebar .o_web_studio_field_type_container:eq(1) .o_web_studio_field_many2many",
            run: "drag_and_drop_native .o_inner_group:first .o_web_studio_hook:first",
        },
        {
            // type something in the modal
            trigger: '[name="relation_id"] input.o-autocomplete--input',
            in_modal: true,
            // we are sure "Activity" exists since studio depends on mail.
            //Also, it is determinisic and field names should not conflict too much.
            run: "text mail.activity",
        },
        {
            // select Activity as model
            trigger:
                '[name="relation_id"] .o-autocomplete--dropdown-menu li a:not(:has(.fa-spin)):contains(Activity)',
            in_modal: true,
            run(helpers) {
                const el = Array.from(this.$anchor).find((el) => el.textContent === "Activity");
                return helpers.click($(el));
            },
        },
        {
            in_modal: true,
            trigger: "button:contains(Confirm):not(.disabled)",
        },
        {
            // select the m2m to set its properties
            trigger: ".o_wrap_input:has(.o_field_many2many)",
            timeout: 15000, // creating M2M relations can take some time...
        },
        {
            // change the `widget` attribute
            trigger: '.o_web_studio_sidebar [name="widget"] .o_select_menu_toggler_slot',
        },
        {
            trigger:
                ".o_web_studio_sidebar [name='widget'] .o_select_menu_item_label:contains('(many2many_tags)')",
        },
        {
            // use colors on the m2m tags
            trigger: '.o_web_studio_sidebar [name="color_field"]',
        },
        {
            // add a statusbar
            trigger: ".o_web_studio_statusbar_hook",
        },
        {
            trigger: ".modal-footer .btn.btn-primary",
        },
        {
            trigger: ".o_statusbar_status",
        },
        {
            // verify that a default value has been set for the statusbar
            trigger:
                '.o_web_studio_sidebar [name="default_value"] .o_select_menu_toggler_slot:contains(First Status)',
            run() {},
        },
        {
            trigger: ".o_web_studio_views_icons a[title=Form]",
        },
        {
            // verify Chatter can be added after changing view to form
            extra_trigger: ".o_web_studio_add_chatter",
            // edit action
            trigger: ".o_web_studio_menu .o_menu_sections li a:contains(Views)",
        },
        {
            // edit form view
            trigger:
                '.o_web_studio_view_category .o_web_studio_view_type[data-type="form"] .o_web_studio_thumbnail',
        },
        {
            // verify Chatter can be added after changing view to form
            extra_trigger: ".o_web_studio_add_chatter",
            // switch in list view
            trigger: '.o_web_studio_menu .o_web_studio_views_icons a[title="List"]',
        },
        {
            // wait for the list editor to be rendered because the sidebar is the same
            extra_trigger: ".o_web_studio_list_view_editor",
            // unfold 'Existing Fieldqs' section
            trigger: ".o_web_studio_existing_fields_header",
        },
        {
            // add an existing field (display_name)
            trigger:
                ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_field_char:contains(COUCOU)",
            run: "drag_and_drop_native .o_web_studio_list_view_editor th.o_web_studio_hook:first",
        },
        {
            // verify that the field is correctly named
            extra_trigger: '.o_web_studio_list_view_editor th:contains("COUCOU")',
            // leave Studio
            trigger: ".o_web_studio_leave > a.btn",
        },
        {
            // come back to the home menu to check if the menu data have changed
            extra_trigger: ".o_web_client:not(.o_in_studio)",
            trigger: ".o_menu_toggle:not(.o_menu_toggle_back)",
        },
        {
            trigger: "input.o_search_hidden",
            // Open Command Palette
            run: "text " + createdMenuString[0],
        },
        {
            trigger: ".o_command_palette_search input",
            run: "text " + "/" + createdMenuString,
        },
        {
            // search results should have been updated
            extra_trigger: `.o_command.focused:contains(${createdAppString} / ${createdMenuString})`,
            trigger: ".o_command_palette",
            // Close the Command Palette
            run: () => {
                window.dispatchEvent(
                    new KeyboardEvent("keydown", {
                        bubbles: true,
                        key: "Escape",
                    })
                );
            },
        },
        {
            trigger: ".o_home_menu",
            // go back again to the app (using keyboard)
            run: () => {
                window.dispatchEvent(
                    new KeyboardEvent("keydown", {
                        bubbles: true,
                        key: "Escape",
                    })
                );
            },
        },
        {
            // wait to be back in the list view
            extra_trigger: ".o_list_view",
            // re-open studio
            trigger: ".o_web_studio_navbar_item",
        },
        {
            // modify the list view
            trigger: ".o_web_studio_sidebar .o_web_studio_view",
        },
        {
            //select field you want to sort and based on that sorting will be applied on List view
            trigger:
                '.o_web_studio_sidebar .o_web_studio_sidebar_select[name="sort_by"] .o_select_menu_toggler',
        },
        {
            trigger:
                ".o_web_studio_sidebar .o_web_studio_sidebar_select[name='sort_by'] .dropdown-item",
        },
        {
            //change order of sorting, Select order and change it
            trigger:
                '.o_web_studio_sidebar .o_web_studio_sidebar_select[name="sort_order"] .o_select_menu_toggler',
        },
        {
            trigger:
                ".o_web_studio_sidebar .o_web_studio_sidebar_select[name='sort_order'] .dropdown-item:nth-child(2)",
        },
        {
            // edit action
            trigger: '.o_web_studio_menu .o_menu_sections li a:contains("Views")',
        },
        {
            // add a kanban
            trigger:
                '.o_web_studio_view_category .o_web_studio_view_type.o_web_studio_inactive[data-type="kanban"] .o_web_studio_thumbnail',
        },
        {
            // add a dropdown
            trigger: ".o_dropdown_kanban.o_web_studio_add_dropdown",
        },
        {
            trigger: ".modal-footer .btn.btn-primary",
        },
        {
            // select the dropdown for edition
            trigger: ".o_dropdown_kanban:not(.o_web_studio_add_dropdown)",
        },
        {
            // enable "Set Cover" feature
            trigger: ".o_web_studio_sidebar input[name=cover_value]",
        },
        {
            trigger: ".modal-footer .btn.btn-primary",
        },
        {
            // edit action
            trigger: '.o_web_studio_menu .o_menu_sections li a:contains("Views")',
        },
        {
            // check that the kanban view is now active
            extra_trigger:
                '.o_web_studio_view_category .o_web_studio_view_type:not(.o_web_studio_inactive)[data-type="kanban"]',
            // add an activity view
            trigger:
                '.o_web_studio_view_category .o_web_studio_view_type.o_web_studio_inactive[data-type="activity"] .o_web_studio_thumbnail',
        },
        {
            extra_trigger: ".o_activity_view",
            // edit action
            trigger: '.o_web_studio_menu .o_menu_sections li a:contains("Views")',
            timeout: 20000, // activating a view takes a while and sometimes reaches the default 10s timeout
        },
        {
            // add a graph view
            trigger:
                '.o_web_studio_view_category .o_web_studio_view_type.o_web_studio_inactive[data-type="graph"] .o_web_studio_thumbnail',
        },
        {
            extra_trigger: ".o_graph_renderer",
            trigger: '.o_web_studio_menu .o_menu_sections li a:contains("Views")',
        },
        {
            extra_trigger: ".o_web_studio_views",
            // edit the search view
            trigger:
                '.o_web_studio_view_category .o_web_studio_view_type[data-type="search"] .o_web_studio_thumbnail',
        },
        {
            extra_trigger: ".o_web_studio_search_view_editor",
            trigger: ".o_menu_toggle:not(.o_menu_toggle_back)",
        },
        {
            trigger: ".o_web_studio_home_studio_menu .dropdown-toggle",
        },
        {
            // export all modifications
            trigger: ".o_web_studio_export",
        },
        {
            // click on the created app
            trigger: '.o_app[data-menu-xmlid*="studio"]:last',
        },
        {
            // switch to form view
            trigger: '.o_web_studio_views_icons > a[title="Form"]',
        },
        {
            extra_trigger: ".o_web_studio_form_view_editor",
            // click on the view tab
            trigger: ".o_web_studio_view",
        },
        {
            // click on the restore default view button
            trigger: ".o_web_studio_restore",
        },
        {
            // click on the ok button
            trigger: ".modal-footer .btn.btn-primary",
        },
        {
            // checks that the field doesn't exist anymore
            extra_trigger: 'label.o_form_label:not(:contains("COUCOU"))',
            trigger: ".o_web_studio_leave > a.btn",
        },
        stepNotInStudio(".o_form_view"),
    ],
});

registry.category("web_tour.tours").add("web_studio_hide_fields_tour", {
    url: "/web?debug=1#action=studio&mode=home_menu",
    test: true,
    steps: () => [
        {
            trigger: ".o_web_studio_new_app",
        },
        {
            trigger: ".o_web_studio_app_creator_next",
        },
        {
            trigger: `
        .o_web_studio_app_creator_name
        > input`,
            run: `text ${randomString(6)}`,
        },
        {
            // make another interaction to show "next" button
            trigger: `
        .o_web_studio_selectors
        .o_web_studio_selector:eq(2)`,
        },
        {
            trigger: ".o_web_studio_app_creator_next",
        },
        {
            trigger: `
        .o_web_studio_menu_creator
        > input`,
            run: `text ${randomString(6)}`,
        },
        {
            trigger: ".o_web_studio_app_creator_next",
        },
        {
            trigger: ".o_web_studio_model_configurator_next",
        },
        {
            // check that the Studio menu is still there
            extra_trigger: ".o_web_studio_menu",
            trigger: ".o_web_studio_leave > a.btn",
            timeout: 60000 /* previous step reloads registry, etc. - could take a long time */,
        },
        {
            trigger: ".oe_title input",
            run: "text Test",
        },
        {
            trigger: ".o_form_button_save",
        },
        {
            trigger: ".o_web_studio_navbar_item",
        },
        {
            extra_trigger: ".o_web_studio_menu",
            trigger: `
        .o_web_studio_views_icons
        > a[title="List"]`,
        },
        {
            // wait for the list editor to be rendered because the sidebar is the same
            extra_trigger: ".o_web_studio_list_view_editor",
            trigger: ".o_web_studio_existing_fields_header",
        },
        {
            trigger: `
        .o_web_studio_sidebar
        .o_web_studio_existing_fields
        .o_web_studio_component:has(.o_web_studio_component_description:contains(display_name))`,
            run: "drag_and_drop_native .o_web_studio_list_view_editor .o_web_studio_hook",
        },
        {
            trigger: `
        .o_list_table
        th[data-name="display_name"]`,
        },
        {
            trigger: `
        .o_web_studio_sidebar
        [name="optional"] .o_select_menu_toggler`,
        },
        {
            trigger:
                ".o_web_studio_sidebar [name='optional'] .o_select_menu_item:contains(Hide by default)",
        },
        {
            extra_trigger: '.o_list_table:not(:has(th[data-name="display_name"]))',
            trigger: `
        .o_web_studio_sidebar
        .o_web_studio_view`,
        },
        {
            trigger: `
        .o_web_studio_sidebar_checkbox
        input#show_invisible`,
        },
        {
            extra_trigger: `
        .o_list_table
        th[data-name="display_name"].o_web_studio_show_invisible`,
            trigger: ".o_web_studio_leave > a.btn",
        },
        stepNotInStudio(".o_list_view"),
    ],
});

registry.category("web_tour.tours").add("web_studio_model_option_value_tour", {
    url: "/web?debug=tests#action=studio&mode=home_menu",
    test: true,
    steps: () => [
        {
            trigger: ".o_web_studio_new_app",
        },
        {
            trigger: ".o_web_studio_app_creator_next",
        },
        {
            trigger: `
        .o_web_studio_app_creator_name
        > input`,
            run: `text ${randomString(6)}`,
        },
        {
            trigger: `
        .o_web_studio_selectors
        .o_web_studio_selector:eq(2)`,
        },
        {
            trigger: ".o_web_studio_app_creator_next",
        },
        {
            trigger: `
        .o_web_studio_menu_creator
        > input`,
            run: `text ${randomString(6)}`,
        },
        {
            trigger: ".o_web_studio_app_creator_next",
        },
        {
            // check monetary value in model configurator
            trigger: 'input[name="use_value"]',
        },
        {
            // check lines value in model configurator
            trigger: 'input[name="lines"]',
        },
        {
            trigger: ".o_web_studio_model_configurator_next",
        },
        {
            trigger: '.o_web_studio_menu .o_web_studio_views_icons > a[title="Graph"]',
            timeout: 60000 /* previous step reloads registry, etc. - could take a long time */,
        },
        {
            // wait for the graph editor to be rendered and also check for sample data
            extra_trigger: ".o_view_sample_data .o_graph_renderer",
            trigger: '.o_web_studio_menu .o_web_studio_views_icons a[title="Pivot"]',
        },
        {
            // wait for the pivot editor to be rendered and also check for sample data
            extra_trigger: ".o_pivot_view .o_view_sample_data .o_view_nocontent_empty_folder",
            trigger: ".o_web_studio_leave > a.btn",
        },
        stepNotInStudio(".o_pivot_view"),
    ],
});

registry.category("web_tour.tours").add("web_studio_new_report_tour", {
    url: "/web",
    test: true,
    steps: () => [
        {
            // open studio
            trigger: ".o_main_navbar .o_web_studio_navbar_item",
            extra_trigger: ".o_home_menu_background",
        },
        {
            // click on the created app
            trigger: '.o_app[data-menu-xmlid*="studio"]:first',
            extra_trigger: "body.o_in_studio",
        },
        {
            // edit reports
            trigger: ".o_web_studio_menu li a:contains(Reports)",
        },
        {
            // create a new report
            trigger: ".o_control_panel .o-kanban-button-new",
        },
        {
            // select external layout
            trigger: '.o_web_studio_report_layout_dialog div[data-layout="web.external_layout"]',
        },
        {
            // edit report name
            trigger: '.o_web_studio_sidebar input[id="name"]',
            run: "text My Awesome Report",
        },
        {
            // add a new group on the node
            trigger: '.o_web_studio_sidebar .o_field_many2many_tags[name="groups_id"] input',
            run: function () {
                this.$anchor.click();
            },
        },
        {
            trigger: ".o-autocomplete--dropdown-menu li:contains(Access Rights)",
        },
        {
            // wait for the group to appear
            trigger:
                '.o_web_studio_sidebar .o_field_many2many_tags[name="groups_id"] .o_tag_badge_text:contains(Access Rights)',
            run() {},
        },
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe .odoo-editor-editable div.page",
            run($anchor) {
                const element = this.$anchor[0];
                element.ownerDocument.getSelection().setPosition(element);
                assertEqual(element.innerHTML, "<br>");
            },
        },
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe .odoo-editor-editable div.page",
            run() {
                const element = this.$anchor[0];
                assertEqual(element.classList.contains("oe-command-temporary-hint"), true);
            },
        },
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe .odoo-editor-editable div.page",
            run: "text some new text",
        },
        {
            trigger: ".o_web_studio_menu .o-web-studio-save-report.btn-primary",
        },
        {
            // The report has been saved
            trigger: ".o_web_studio_menu .o-web-studio-save-report:not(.btn-primary)",
            run() {},
        },
        {
            trigger: ".o_web_studio_breadcrumb .o_back_button:contains(Reports)",
        },
        {
            // a invisible element cannot be used as a trigger so this small hack is
            // mandatory for the next step
            run: function () {
                $(".o_kanban_record:contains(My Awesome Report) .dropdown-toggle").css(
                    "visibility",
                    "visible"
                );
            },
            trigger: ".o_kanban_view",
        },
        {
            // open the dropdown
            trigger: ".o_kanban_record:contains(My Awesome Report) .dropdown-toggle",
        },
        {
            // duplicate the report
            trigger:
                ".o_kanban_record:contains(My Awesome Report) .dropdown-menu a:contains(Duplicate)",
        },
        {
            // open the duplicate report
            trigger: ".o_kanban_record:contains(My Awesome Report copy(1))",
        },
        {
            // switch to 'Report' tab
            trigger: ".o_web_studio_sidebar input[id='name']",
            run() {
                assertEqual(this.$anchor[0].value, "My Awesome Report copy(1)");
            },
        },
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe div.page",
            run() {
                assertEqual(this.$anchor[0].textContent, "some new text");
            },
        },
        {
            trigger:
                '.o_web_studio_sidebar .o_field_many2many_tags[name="groups_id"] .o_tag_badge_text:contains(Access Rights)',
            run() {},
        },
        {
            trigger: ".o_web_studio_leave > a.btn",
        },
        stepNotInStudio(),
    ],
});

registry.category("web_tour.tours").add("web_studio_new_report_basic_layout_tour", {
    url: "/web",
    test: true,
    steps: () => [
        {
            // open studio
            trigger: ".o_main_navbar .o_web_studio_navbar_item",
            extra_trigger: ".o_home_menu_background",
        },
        {
            // click on the created app
            trigger: '.o_app[data-menu-xmlid*="studio"]:first',
            extra_trigger: "body.o_in_studio",
        },
        {
            // edit reports
            trigger: ".o_web_studio_menu li a:contains(Reports)",
        },
        {
            // create a new report
            trigger: ".o_control_panel .o-kanban-button-new",
        },
        {
            // select basic layout
            trigger: '.o_web_studio_report_layout_dialog div[data-layout="web.basic_layout"]',
        },
        {
            // edit report name
            trigger: '.o_web_studio_sidebar input[id="name"]',
            run: "text My Awesome basic layout Report",
        },
        {
            // add a new group on the node
            trigger: '.o_web_studio_sidebar .o_field_many2many_tags[name="groups_id"] input',
            run: function () {
                this.$anchor.click();
            },
        },
        {
            trigger: ".o-autocomplete--dropdown-menu li:contains(Access Rights)",
        },
        {
            // wait for the group to appear
            trigger:
                '.o_web_studio_sidebar .o_field_many2many_tags[name="groups_id"] .o_tag_badge_text:contains(Access Rights)',
            run() {},
        },
        {
            trigger: ".o_web_studio_menu .o-web-studio-save-report.btn-primary",
        },
        {
            // The report has been saved
            trigger: ".o_web_studio_menu .o-web-studio-save-report:not(.btn-primary)",
            run() {},
        },
        {
            // leave the report
            trigger: ".o_web_studio_breadcrumb .o_back_button:contains(Reports)",
        },
        {
            // a invisible element cannot be used as a trigger so this small hack is
            // mandatory for the next step
            run: function () {
                $(".o_kanban_record:contains(My Awesome basic layout Report) .dropdown-toggle").css(
                    "visibility",
                    "visible"
                );
            },
            trigger: ".o_kanban_view",
        },
        {
            // open the dropdown
            trigger: ".o_kanban_record:contains(My Awesome basic layout Report) .dropdown-toggle",
        },
        {
            // duplicate the report
            trigger:
                ".o_kanban_record:contains(My Awesome basic layout Report) .dropdown-menu a:contains(Duplicate)",
        },
        {
            // open the duplicate report
            trigger: ".o_kanban_record:contains(My Awesome basic layout Report copy(1))",
        },
        {
            trigger: '.o_web_studio_sidebar input[id="name"]',
            run() {
                assertEqual(this.$anchor[0].value, "My Awesome basic layout Report copy(1)");
            },
        },
        {
            trigger: ".o_web_studio_leave > a.btn",
        },
        stepNotInStudio(),
    ],
});

registry.category("web_tour.tours").add("web_studio_approval_tour", {
    url: "/web?debug=1",
    test: true,
    steps: () => [
        {
            // go to Apps menu
            trigger: '.o_app[data-menu-xmlid="base.menu_management"]',
        },
        {
            // open studio
            trigger: ".o_main_navbar .o_web_studio_navbar_item",
            extra_trigger: ".o_cp_switch_buttons",
        },
        {
            // switch to form view editor
            trigger: '.o_web_studio_views_icons > a[title="Form"]',
        },
        {
            // click on first button it finds that has a node id
            trigger: ".o_web_studio_form_view_editor button.o-web-studio-editor--element-clickable",
        },
        {
            // enable approvals for the button
            trigger: '.o_web_studio_sidebar label[for="studio_approval"]',
        },
        {
            // add approval rule
            trigger: '.o_web_studio_sidebar_approval [name="create_approval_rule"]',
            extra_trigger: ".o_web_studio_snackbar .fa-check",
        },
        {
            // set approval message
            trigger: '.o_web_studio_sidebar_approval input[name*="approval_message"]',
            run: "text nope",
        },
        {
            // set domain on first rule
            trigger: ".o_web_studio_sidebar_approval .o_approval_domain",
            extra_trigger: ".o_studio_sidebar_approval_rule:eq(1)",
        },
        {
            // set stupid domain that is always truthy
            trigger: ".o_domain_debug_container textarea",
            run: function () {
                this.$anchor.focusIn();
                this.$anchor.val('[["id", "!=", False]]');
                this.$anchor.change();
            },
        },
        {
            // save domain and close modal
            trigger: " .modal-footer .btn-primary",
        },
        {
            // add second approval rule when the first is set
            trigger: '.o_web_studio_sidebar_approval [name="create_approval_rule"]',
            extra_trigger: ".o_web_studio_snackbar .fa-check",
        },
        {
            // enable 'force different users' for one rule (doesn't matter which)
            trigger: '.o_web_studio_sidebar label[for*="exclusive_user"]',
            extra_trigger: ".o_web_studio_snackbar .fa-check",
        },
        {
            // leave studio
            trigger: ".o_web_studio_leave > a.btn",
            extra_trigger: ".o_web_studio_snackbar .fa-check",
        },
        {
            // go back to kanban
            trigger: ".o_breadcrumb .o_back_button",
            extra_trigger: ".o_web_client:not(.o_in_studio)",
        },
        {
            // open first record (should be the one that was used, so the button should be there)
            trigger: ".o_kanban_view .o_kanban_record .o_dropdown_kanban .dropdown-toggle",
        },
        {
            trigger: ".o_kanban_view .o_kanban_record .o-dropdown--menu .dropdown-item",
        },
        {
            // try to do the action
            trigger: "button[studio_approval]",
        },
        {
            // there should be a warning
            trigger: ".o_notification.border-warning",
        },
        {
            trigger: ".breadcrumb .o_back_button",
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_custom_field_tour", {
    url: "/web",
    test: true,
    steps: () => [
        {
            // go to Apps menu
            trigger: '.o_app[data-menu-xmlid="base.menu_management"]',
        },
        {
            // click on the list view
            trigger: ".o_switch_view.o_list",
        },
        {
            // click on optional column dropdown
            trigger: ".o_optional_columns_dropdown_toggle",
        },
        {
            // click on add custom field
            trigger: ".dropdown-item-studio",
        },
        {
            // go to home menu
            trigger: ".o_menu_toggle",
            extra_trigger: ".o_web_client.o_in_studio",
        },
        {
            //leave studio
            trigger: ".o_web_studio_leave > a.btn",
        },
        {
            // studio left.
            trigger: '.o_app[data-menu-xmlid="base.menu_management"]',
            extra_trigger: ".o_web_client:not(.o_in_studio)",
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_local_storage_tour", {
    url: "/web",
    test: true,
    steps: () => [
        {
            trigger: '.o_app[data-menu-xmlid="base.menu_management"]',
            run: function () {
                localStorage.setItem("openStudioOnReload", "main");
                window.location.reload();
            },
        },
        {
            // should be directly in studio mode
            trigger: '.o_app[data-menu-xmlid="base.menu_management"]',
            extra_trigger: ".o_web_client.o_in_studio",
        },
        {
            trigger: ".o_menu_toggle",
        },
        {
            trigger: ".o_web_studio_leave > a.btn",
        },
        {
            // studio left.
            trigger: '.o_app[data-menu-xmlid="base.menu_management"]',
            extra_trigger: ".o_web_client:not(.o_in_studio)",
            run: function () {
                window.location.reload();
            },
        },
        {
            // studio left after refresh.
            trigger: '.o_app[data-menu-xmlid="base.menu_management"]',
            extra_trigger: ".o_web_client:not(.o_in_studio)",
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_custom_background_tour", {
    url: "/web",
    test: true,
    steps: () => [
        {
            content: "class for custom background must be enabled (outside studio)",
            trigger: ".o_home_menu_background_custom.o_home_menu_background:not(.o_in_studio)",
            run: () => null,
        },
        {
            content: "opening studio",
            trigger: ".o_main_navbar .o_web_studio_navbar_item",
        },
        {
            content: "class for custom background must be enabled (in studio)",
            trigger: ".o_home_menu_background_custom.o_home_menu_background.o_in_studio",
            run: () => null,
        },
        {
            content: "click on Customizations button",
            trigger: ".o_web_studio_home_studio_menu button",
        },
        {
            content: "reset the background",
            trigger: ".o_web_studio_reset_default_background",
        },
        {
            content: "validate the reset of the background",
            trigger: ".modal-dialog .btn-primary",
        },
        {
            content: "class for custom background must be disabled (inside studio)",
            trigger: ".o_home_menu_background.o_in_studio:not(.o_home_menu_background_custom)",
            run: () => null,
        },
        {
            content: "leaving studio",
            trigger: ".o_web_studio_leave a",
        },
        {
            content: "class for custom background must be disabled (outside studio)",
            trigger: ".o_home_menu_background:not(.o_in_studio.o_home_menu_background_custom)",
            run: () => null,
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_create_app_with_pipeline_and_user_assignment", {
    test: true,
    steps: () => [
        {
            // open studio
            trigger: ".o_main_navbar .o_web_studio_navbar_item",
            extra_trigger: ".o_home_menu_background",
        },
        {
            trigger: ".o_web_studio_new_app",
        },
        {
            // the next steps are here to create a new app
            trigger: ".o_web_studio_app_creator_next",
        },
        {
            trigger: ".o_web_studio_app_creator_name > input",
            run: "text " + (createdAppString = randomString(6)),
        },
        {
            trigger: ".o_web_studio_app_creator_next.is_ready",
        },
        {
            trigger: ".o_web_studio_menu_creator > input",
            run: "text " + (createdMenuString = randomString(6)),
        },
        {
            trigger: ".o_web_studio_app_creator_next.is_ready",
        },
        {
            trigger: "input#use_stages",
        },
        {
            trigger: "input#use_responsible",
        },
        {
            trigger: ".o_web_studio_model_configurator_next",
        },
        {
            trigger: ".o_web_studio_editor .o_menu_sections a:contains(Views)",
        },
        {
            trigger: ".o_web_studio_view_type[data-type='kanban'] .o_web_studio_thumbnail",
        },
        {
            extra_trigger: ".o_web_studio_kanban_view_editor",
            trigger: "img.oe_kanban_avatar",
            run() {
                const avatarImg = document.querySelector("img.oe_kanban_avatar");
                if (!avatarImg.getAttribute("title") === "Unassigned") {
                    throw new Error(
                        "The title of the new avatar should be set, even if there are no record"
                    );
                }
            },
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_alter_field_existing_in_multiple_views_tour", {
    test: true,
    steps: () => [
        {
            // open studio
            trigger: ".o_main_navbar .o_web_studio_navbar_item button",
            extra_trigger: ".o_home_menu_background",
        },
        {
            trigger: ".o_web_studio_new_app",
        },
        {
            // the next steps are here to create a new app
            trigger: ".o_web_studio_app_creator_next",
        },
        {
            trigger: ".o_web_studio_app_creator_name > input",
            run: "text " + (createdAppString = randomString(6)),
        },
        {
            trigger: ".o_web_studio_app_creator_next.is_ready",
        },
        {
            trigger: ".o_web_studio_menu_creator > input",
            run: `text ${createdAppString}`,
        },
        {
            trigger: ".o_web_studio_app_creator_next.is_ready",
        },
        {
            trigger: ".o_web_studio_model_configurator_next",
        },
        {
            extra_trigger: ".o_web_studio_sidebar",
            // unfold 'Existing Fieldqs' section
            trigger: ".o_web_studio_existing_fields_header",
            timeout: 60000,
        },
        {
            // add an existing field (the one we created)
            trigger:
                ".o_web_studio_sidebar .o_web_studio_field_type_container:eq(2) .o_web_studio_field_many2many:contains(Followers (Partners))",
            run: "drag_and_drop_native .o_inner_group:first .o_web_studio_hook:first",
        },
        {
            trigger: ".o_web_studio_new ",
        },
        {
            trigger:
                ".o_web_studio_sidebar .o_web_studio_field_type_container:eq(1) .o_web_studio_field_many2many",
            run: "drag_and_drop_native div.o_web_studio_hook:last",
        },
        {
            extra_trigger: ".modal-body",
            in_modal: true,
            trigger: '[name="relation_id"] input',
            run: `text ${createdAppString}`,
        },
        {
            // select the first model
            trigger: ".o-autocomplete--dropdown-menu > li > a:not(:has(.fa-spin))",
            in_modal: true,
        },
        {
            trigger: "button:contains(Confirm)",
        },
        {
            // edit list view
            trigger: ".o_web_studio_editX2Many",
        },
        {
            // wait for list view to be loaded
            extra_trigger: ".o_web_studio_list_view_editor",
            // go to view
            trigger: ".o_web_studio_view ",
        },
        {
            // show invisible elements
            trigger: 'label[for="show_invisible"]',
        },
        {
            trigger: ".o_web_studio_new ",
        },
        {
            // unfold 'Existing Fieldqs' section
            trigger: ".o_web_studio_existing_fields_header",
        },
        {
            // add an existing field (the one we created)
            trigger:
                ".o_web_studio_sidebar .o_web_studio_field_type_container:eq(1) .o_web_studio_field_many2many:contains(Followers (Partners))",
            run: "drag_and_drop_native .o_web_studio_list_view_editor th.o_web_studio_hook:first",
        },
        {
            // select field
            trigger: "th[data-name='message_partner_ids']",
            run: "click",
        },
        {
            // make it invisible
            trigger: "#invisible",
            run: "click",
        },
        {
            extra_trigger: ".o_web_studio_snackbar .fa.fa-check",
            // check if the invisible option is checked
            trigger: "#invisible:checked",
            run() {},
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_monetary_create", {
    url: "/web?debug=1",
    test: true,
    steps: () => [
        // This tour drag&drop a monetary field and verify that a currency is created
        {
            // open studio
            trigger: ".o_main_navbar .o_web_studio_navbar_item",
            extra_trigger: ".o_home_menu_background",
        },
        {
            trigger: ".o_web_studio_new_app",
            run: () => {},
        },
        {
            trigger: ".o_app[data-menu-xmlid='web_studio.studio_app_menu']",
        },
        // drag&drop a monetary and verify that the currency is in the view
        {
            // add a new monetary field
            trigger: ".o_web_studio_sidebar .o_web_studio_field_monetary",
            run: "drag_and_drop_native .o_web_studio_form_view_editor .o_inner_group",
        },
        {
            // verify that the currency is set
            trigger: ".o_web_studio_sidebar .o_web_studio_property_currency_field .text-start",
            run() {
                assertEqual(this.$anchor[0].textContent, "Currency (x_studio_currency_id)");
            },
        },
        {
            // currency field is in the view
            trigger: ".o_web_studio_view_renderer div[data-field-name='x_studio_currency_id']",
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_monetary_change_currency_name", {
    url: "/web?debug=1",
    test: true,
    steps: () => [
        // Changing currency name also change the currency name in the monetary currency selection
        {
            // open studio
            trigger: ".o_main_navbar .o_web_studio_navbar_item",
            extra_trigger: ".o_home_menu_background",
        },
        {
            trigger: ".o_web_studio_new_app",
            run: () => {},
        },
        {
            trigger: ".o_app[data-menu-xmlid='web_studio.studio_app_menu']",
        },
        {
            // currency field is in the view and click on it
            trigger: ".o_web_studio_view_renderer [data-field-name='x_studio_currency_test']",
        },
        {
            // change the currency name
            trigger: "input[name='string']",
            run(helper) {
                helper.text("NewCurrency");
            },
        },
        {
            // click on monetary
            trigger: "div[data-field-name^='x_studio_monetary_test']",
        },
        {
            // verify that the currency name changed in the monetary field
            trigger: ".o_web_studio_sidebar .o_web_studio_property_currency_field .text-start",
            run() {
                assertEqual(this.$anchor[0].textContent, "NewCurrency (x_studio_currency_test)");
            },
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_monetary_change_currency_field", {
    url: "/web",
    test: true,
    steps: () => [
        // Change currency and verify that the view take the changes into account (the dollar appears)
        {
            // open the custom app form view
            trigger: "a[data-menu-xmlid='web_studio.studio_app_menu']",
        },
        {
            // fill the required char input
            trigger: ".o_field_char input",
            run: "text title",
        },
        {
            // fill the new currency (many2one) input #1
            trigger: "div [name='x_studio_currency_test2'] input",
            run: "text USD",
        },
        {
            // add a new currency field step #2
            trigger: '.ui-menu-item a:contains("USD")',
        },
        {
            // save the view form
            trigger: "button.o_form_button_save",
        },
        {
            // open studio with the record
            trigger: ".o_main_navbar .o_web_studio_navbar_item button",
            extra_trigger: ".o_form_saved",
        },
        {
            // check that there is no currency symbol in renderer
            trigger: "div[name='x_studio_monetary_test'] span",
            run() {
                assertEqual(this.$anchor[0].textContent, "0.00");
            },
        },
        {
            // click on the monetary field
            trigger: "div[data-field-name='x_studio_monetary_test']",
        },
        {
            // change the currency_field in the monetary
            trigger: ".o_web_studio_sidebar .o_web_studio_property_currency_field button",
        },
        {
            // click on the second currency, which is "X Studio Currency Test2"
            trigger: ".o_web_studio_property_currency_field .o_select_menu_item:nth-child(2)",
        },
        {
            //wait until the currency has been set (also test the reactivity)
            trigger:
                ".o_web_studio_sidebar .o_web_studio_property_currency_field span.text-start:contains('X Studio Currency Test2')",
            run() {},
        },
        {
            // by changing the currency, we should have a $ symbol in the renderer
            trigger: "div[name^='x_studio_monetary'] span",
            run() {
                assertEqual(this.$anchor[0].textContent, "$ 0.00");
            },
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_monetary_change_currency_not_in_view", {
    url: "/web",
    test: true,
    steps: () => [
        // Change a currency that is not present in the view insert it in the view
        {
            // open studio
            trigger: ".o_main_navbar .o_web_studio_navbar_item",
            extra_trigger: ".o_home_menu_background",
        },
        {
            trigger: ".o_web_studio_new_app",
            run: () => {},
        },
        {
            trigger: ".o_app[data-menu-xmlid='web_studio.studio_app_menu']",
        },
        {
            // click on the monetary field
            trigger: "div[data-field-name='x_studio_monetary_test']",
        },
        {
            // change the currency_field in the monetary
            trigger: ".o_web_studio_sidebar .o_web_studio_property_currency_field button",
        },
        {
            // click on the second currency, which is "X Studio Currency Test2"
            trigger: ".o_web_studio_property_currency_field .o_select_menu_item:nth-child(2)",
        },
        {
            // wait until the currency has been set
            trigger:
                ".o_web_studio_sidebar .o_web_studio_property_currency_field span.text-start:contains('X Studio Currency Test2')",
            run() {},
        },
        {
            // go to view tab
            trigger: ".o_web_studio_view",
        },
        {
            // currency field is in the view and click on it
            trigger: ".o_web_studio_view_renderer div[data-field-name='x_studio_currency_test2']",
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_monetary_add_existing_monetary", {
    url: "/web?debug=1",
    test: true,
    steps: () => [
        // Add an existing monetary trough the "existing fields" and verify that the currency
        // is added to the view
        {
            // open studio
            trigger: ".o_main_navbar .o_web_studio_navbar_item",
            extra_trigger: ".o_home_menu_background",
        },
        {
            trigger: ".o_web_studio_new_app",
            run: () => {},
        },
        {
            trigger: ".o_app[data-menu-xmlid='web_studio.studio_app_menu']",
        },
        {
            // click on "existing fields"
            trigger: ".o_web_studio_existing_fields_header",
        },
        {
            // add the existing monetary field
            trigger: ".o_web_studio_existing_fields_section .o_web_studio_field_monetary",
            run: "drag_and_drop_native .o_form_renderer .o_web_studio_hook",
        },
        {
            // monetary exist and click on monetary
            trigger: "div[data-field-name='x_studio_monetary_test']",
        },
        {
            // verify that the currency name changed in the monetary field
            trigger: ".o_web_studio_sidebar .o_web_studio_property_currency_field .text-start",
            run() {
                assertEqual(
                    this.$anchor[0].textContent,
                    "X Studio Currency Test (x_studio_currency_test)"
                );
            },
        },
        {
            // currency field is in the view
            trigger: "div[data-field-name='x_studio_currency_test']",
            run() {},
        },
    ],
});

registry
    .category("web_tour.tours")
    .add("web_studio_monetary_create_monetary_with_existing_currency", {
        url: "/web?debug=1",
        test: true,
        steps: () => [
            // Add a new monetary field, since a currency already exists, it should take it instead
            // of creating a new one
            {
                // open studio
                trigger: ".o_main_navbar .o_web_studio_navbar_item",
                extra_trigger: ".o_home_menu_background",
            },
            {
                trigger: ".o_web_studio_new_app",
                run: () => {},
            },
            {
                trigger: ".o_app[data-menu-xmlid='web_studio.studio_app_menu']",
            },
            {
                // go to Add tab
                trigger: ".o_web_studio_new",
            },
            {
                // add a new monetary field
                trigger: ".o_web_studio_sidebar .o_web_studio_field_monetary",
                run: "drag_and_drop_native .o_web_studio_form_view_editor .o_inner_group",
            },
            {
                // there is only one occurence of the currency field in the view
                trigger: ".o_form_renderer div[data-field-name^='x_studio_monetary']",
                run() {
                    const o2mNumber = document.querySelectorAll("div.o_field_many2one");
                    assertEqual(o2mNumber.length, 1);
                },
            },
        ],
    });

registry.category("web_tour.tours").add("web_studio_add_field_into_empty_group_by", {
    url: "/web?debug=1",
    test: true,
    steps: () => [
        {
            trigger: ".o_main_navbar .o_web_studio_navbar_item",
            extra_trigger: ".o_home_menu_background",
        },
        {
            trigger: ".o_web_studio_new_app",
        },
        {
            trigger: ".o_web_studio_app_creator_next",
        },
        {
            trigger: ".o_web_studio_app_creator_name > input",
            run: `text ${randomString(6)}`,
        },
        {
            trigger: ".o_web_studio_app_creator_next.is_ready",
        },
        {
            trigger: ".o_web_studio_menu_creator > input",
            run: `text ${randomString(6)}`,
        },
        {
            trigger: ".o_web_studio_app_creator_next.is_ready",
        },
        {
            trigger: ".o_web_studio_model_configurator_next",
        },
        {
            trigger: ".o_web_studio_views_icons a:last",
        },
        {
            trigger: `
        .o_web_studio_sidebar
        .o_web_studio_existing_fields
        .o_web_studio_component:has(.o_web_studio_component_description:contains(create_date))`,
            run: "drag_and_drop_native .o-web-studio-search--groupbys .o_web_studio_hook",
        },
    ],
});

return __exports;
});
;

/*************************************************************************************
*  Filepath: /web_studio/static/tests/tours/web_studio_test_ui_unit_report_tours.js  *
*  Lines: 575                                                                        *
*************************************************************************************/
odoo.define('@web_studio/../tests/tours/web_studio_test_ui_unit_report_tours', ['@web/core/registry', '@web/core/network/download', '@web_studio/client_action/report_editor/report_editor_model', '@web/core/utils/patch', '@web_studio/../tests/tours/tour_helpers'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */
const { registry } = require("@web/core/registry");
const { download } = require("@web/core/network/download");
const { ReportEditorModel } = require("@web_studio/client_action/report_editor/report_editor_model");
const { patch, unpatch } = require("@web/core/utils/patch");
const { assertEqual, stepNotInStudio } = require("@web_studio/../tests/tours/tour_helpers");

const getBoundingClientRect = Element.prototype.getBoundingClientRect;

function insertText(element, text, offset = 0) {
    const doc = element.ownerDocument;
    const sel = doc.getSelection();
    sel.removeAllRanges();
    const range = doc.createRange();
    range.setStart(element, offset);
    range.setEnd(element, offset);
    sel.addRange(range);
    for (const char of text) {
        element.dispatchEvent(
            new KeyboardEvent("keydown", {
                key: char,
            })
        );
        const textNode = doc.createTextNode(char);
        element.append(textNode);
        sel.removeAllRanges();
        range.setStart(textNode, 1);
        range.setEnd(textNode, 1);
        sel.addRange(range);
        element.dispatchEvent(
            new InputEvent("input", {
                inputType: "insertText",
                data: char,
                bubbles: true,
            })
        );
        element.dispatchEvent(
            new KeyboardEvent("keyup", {
                key: char,
            })
        );
    }
}

function openEditorPowerBox(element, offset = 0) {
    return insertText(element, "/", offset);
}

/* global ace */

// This function allows to use and test the feature that automatically
// saves when we leave the reportEditor.
// Implem detail: it is done at willUnmount, so we need to wait for the promise
// to be sure we leave the tour when the save is done.
function patchReportEditorModelForSilentSave() {
    const saveProms = [];
    patch(ReportEditorModel.prototype, "studioTestSilentSave", {
        saveReport() {
            const prom = this._super(...arguments);
            saveProms.push(prom);
            return prom;
        },
    });

    function _unpatch() {
        unpatch(ReportEditorModel.prototype, "studioTestSilentSave");
    }

    return {
        wait: async (unpatch = true) => {
            await Promise.all(saveProms);
            if (unpatch) {
                _unpatch();
            }
        },
        saveProms,
        unpatch: _unpatch,
    };
}

let silentPatch;
registry.category("web_tour.tours").add("web_studio.test_basic_report_edition", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: ".o_web_studio_sidebar input[id='name']",
            run: "text modified in test",
        },
        {
            trigger: ".o_web_studio_menu .breadcrumb-item.active",
            run() {
                assertEqual(this.$anchor[0].textContent, "modified in test");
            },
        },
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe p:eq(0)",
            run: "text edited with odoo editor",
        },
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe p:eq(2)",
            run: "text edited with odoo editor 2",
        },
        {
            // Don't explicitly save, this is a feature
            trigger: ".o_web_studio_leave a",
            run(helpers) {
                silentPatch = patchReportEditorModelForSilentSave();
                helpers.click(this.$anchor);
            },
        },
        stepNotInStudio(),
        {
            trigger: "body",
            run() {
                return silentPatch.wait();
            },
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_basic_report_edition_xml", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: ".o_web_studio_sidebar button[name='report_edit_sources']",
        },
        {
            trigger: ".o_web_studio_xml_resource_selector .o_web_studio_xml_resource_select_menu",
            run() {
                assertEqual(
                    this.$anchor[0].textContent,
                    "web_studio.test_report_document (web_studio.test_report_document)"
                );
            },
        },
        {
            trigger: ".o_web_studio_code_editor.ace_editor",
            run() {
                ace.edit(this.$anchor[0])
                    .getSession()
                    .insert(
                        { row: 2, column: 0 },
                        '<span class="test-added-0">in document view</span>\n'
                    );
            },
        },
        {
            trigger: ".o_web_studio_xml_resource_selector .o_select_menu_toggler",
        },
        {
            trigger: ".o_web_studio_xml_resource_selector .o-dropdown--menu",
            run(helpers) {
                const mainView = Array.from(
                    this.$anchor[0].querySelectorAll(".o_select_menu_item")
                ).find(
                    (el) =>
                        el.textContent ===
                        "web_studio.test_report (web_studio.studio_test_report_view)"
                );
                helpers.click(mainView);
            },
        },
        {
            trigger: ".o_web_studio_code_editor.ace_editor",
            run() {
                ace.edit(this.$anchor[0])
                    .getSession()
                    .insert(
                        { row: 2, column: 0 },
                        '<span class="test-added-1">in main view</span>\n'
                    );
            },
        },
        {
            trigger: ".o-web-studio-save-report.btn-primary",
        },
        {
            extra_trigger: ".o-web-studio-save-report:not(.btn-primary)",
            trigger: ".o-web-studio-report-container iframe body",
            run() {
                assertEqual(
                    this.$anchor[0].querySelector(".test-added-0").textContent,
                    "in document view"
                );
                assertEqual(
                    this.$anchor[0].querySelector(".test-added-1").textContent,
                    "in main view"
                );
            },
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_basic_report_edition_rollback", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe p:eq(0)",
            run: "text edited with odoo editor",
        },
        {
            // Brutally add a t-else: this will crash in python on save
            trigger: ".o-web-studio-report-editor-wysiwyg iframe body",
            run() {
                const editable = this.$anchor[0].querySelector(".odoo-editor-editable");
                const wysiwyg = $(editable).data("wysiwyg");
                const telse = document.createElement("t");
                telse.setAttribute("t-else", "");
                wysiwyg.odooEditor.execCommand("insert", telse);
            },
        },
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe p:eq(2)",
            run: "text edited with odoo editor 2",
        },
        {
            trigger: ".o-web-studio-save-report.btn-primary",
        },
        {
            trigger: ".o_notification .o_notification_title",
            run() {
                assertEqual(this.$anchor[0].textContent, "Report edition failed");
            },
        },
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe p:eq(0)",
            run() {
                assertEqual(this.$anchor[0].textContent, "");
            },
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_basic_report_edition_xml_rollback", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: ".o_web_studio_sidebar button[name='report_edit_sources']",
        },
        {
            trigger: ".o_web_studio_code_editor.ace_editor",
            run() {
                ace.edit(this.$anchor[0])
                    .getSession()
                    .insert(
                        { row: 2, column: 0 },
                        '<span t-else="" class="test-added">in main view</span>'
                    );
            },
        },
        {
            trigger: ".o-web-studio-save-report.btn-primary",
        },
        {
            extra_trigger: ".o-web-studio-save-report:not(.btn-primary)",
            trigger: ".o_notification .o_notification_title",
            run() {
                assertEqual(this.$anchor[0].textContent, "Report edition failed");
            },
        },
        {
            trigger: ".o-web-studio-report-container iframe body",
            run() {
                const element = this.$anchor[0].querySelector(".test-added");
                if (element) {
                    throw new Error("The iframe should have been re-rendered after an error");
                }
            },
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_report_reset_archs", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: ".o_web_studio_sidebar button[name='report_reset_archs']",
        },
        {
            trigger: ".modal-footer",
            run(helpers) {
                const button = Array.from(this.$anchor[0].querySelectorAll("button")).find(
                    (el) => el.textContent === "Reset report" && el.classList.contains("btn-danger")
                );
                helpers.click(button);
            },
        },
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe body p:eq(1)",
            run() {
                assertEqual(this.$anchor[0].textContent, "from file");
            },
        },
    ],
});

let downloadProm;
let steps = [];
registry.category("web_tour.tours").add("web_studio.test_print_preview", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: ".o_web_studio_sidebar button[name='report_print_preview']",
            run(helpers) {
                downloadProm = new Promise(resolve => {
                    patch(download, "studio_test_download", {
                        _download(options) {
                            steps.push("download report")
                            const context = JSON.parse(options.data.context);
                            assertEqual(context["report_pdf_no_attachment"], true);
                            assertEqual(context["discard_logo_check"], true);
                            assertEqual(context["active_ids"].length, 1);
                            unpatch(download, "studio_test_download")
                            resolve();
                        }
                    })
                })
                return helpers.click(this.$anchor);
            }
        },
        {
            trigger: ".o-web-studio-report-editor-wysiwyg",
            async run() {
                await downloadProm;
                assertEqual(steps.length, 1)
                assertEqual(steps[0], "download report")
            },
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_table_rendering", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe .valid_table",
            run() {
                assertEqual(
                    this.$anchor[0].outerHTML,
                    `<table class="valid_table">
                    <tbody><tr><td>I am valid</td></tr>
                </tbody></table>`
                );
            },
        },
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe .invalid_table",
            run() {
                assertEqual(
                    this.$anchor[0].outerHTML,
                    `<div class="invalid_table" oe-origin-tag="table" oe-origin-style="">
                    <t t-foreach="doc.child_ids" t-as="child" oe-context="{&quot;docs&quot;: {&quot;model&quot;: &quot;res.partner&quot;, &quot;name&quot;: &quot;Contact&quot;, &quot;in_foreach&quot;: false}, &quot;company&quot;: {&quot;model&quot;: &quot;res.company&quot;, &quot;name&quot;: &quot;Companies&quot;, &quot;in_foreach&quot;: false}, &quot;doc&quot;: {&quot;model&quot;: &quot;res.partner&quot;, &quot;name&quot;: &quot;Contact&quot;, &quot;in_foreach&quot;: true}, &quot;child&quot;: {&quot;model&quot;: &quot;res.partner&quot;, &quot;name&quot;: &quot;Contact&quot;, &quot;in_foreach&quot;: true}}">
                        <div oe-origin-tag="tr" oe-origin-style=""><div oe-origin-tag="td" oe-origin-style="" style="width: calc(100% - 10px);">I am not valid</div></div>
                    </t>
                </div>`
                );
            },
        },
        {
            trigger:
                ".o-web-studio-report-editor-wysiwyg iframe .invalid_table [oe-origin-tag='td']",
            run: "text edited with odooEditor",
        },
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe p:eq(1)",
            run: "text p edited with odooEditor",
        },
        {
            trigger: ".o_web_studio_sidebar input[id='name']",
            run: "text modified",
        },
        {
            trigger: ".o-web-studio-save-report.btn-primary",
        },
        {
            trigger: ".o-web-studio-save-report:not(.btn-primary)",
            run() {},
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_field_placeholder", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            // 1 sec delay to make sure we call the download route
            trigger: ".o-web-studio-report-editor-wysiwyg iframe p:eq(2)",
            async run(helpers) {
                const el = this.$anchor[0];
                openEditorPowerBox(el);
            },
        },
        {
            trigger:
                ".oe-powerbox-wrapper .oe-powerbox-commandDescription:contains(Insert a field)",
        },
        {
            extra_trigger: ".o-web-studio-field-dynamic-placeholder",
            trigger: ".o-web-studio-report-editor-wysiwyg div:has(> .o-web-studio-report-container)",
            async run() {
                const placeholderBox = getBoundingClientRect.call(document.querySelector(".o-web-studio-field-dynamic-placeholder"));
                assertEqual(this.$anchor[0].scrollTop, 0);
                this.$anchor[0].scrollTop = 9999;
                await new Promise(requestAnimationFrame);
                const newPlaceholderbox = getBoundingClientRect.call(document.querySelector(".o-web-studio-field-dynamic-placeholder"));
                // The field placeholder should have followed its anchor, and it happens that the anchor's container
                // has been scrolled, so the anchor has moved upwards (and is actually outside of the viewPort, to the top)
                assertEqual(placeholderBox.top > newPlaceholderbox.top, true);
            }
        },
        {
            trigger:
                ".o-web-studio-field-dynamic-placeholder .o_model_field_selector_popover_search input",
            run: "text Job Position",
        },
        {
            trigger:
                ".o-web-studio-field-dynamic-placeholder .o_model_field_selector_popover_item_name:contains(Job Position)",
        },
        {
            trigger:
                ".o-web-studio-field-dynamic-placeholder .o_model_field_selector_default_value_input input",
            run: "text some default value",
        },
        {
            trigger: ".o-web-studio-field-dynamic-placeholder .o_model_field_selector_popover",
            run() {
                this.$anchor[0].dispatchEvent(
                    new KeyboardEvent("keydown", { key: "Enter", bubbles: true })
                );
            },
        },
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe p:eq(0)",
            run() {
                insertText(this.$anchor[0], "edited with odooEditor");
            },
        },
        {
            trigger: ".o-web-studio-save-report.btn-primary",
        },
        {
            trigger: ".o-web-studio-save-report:not(.btn-primary)",
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_edition_without_lang", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe p:eq(1)",
            run() {
                assertEqual(this.$anchor[0].textContent, "original term");
            },
        },
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe p:eq(1)",
            async run() {
                insertText(this.$anchor[0], " edited");
            },
        },
        {
            trigger: ".o_web_studio_sidebar button[name='report_edit_sources']",
        },
        {
            trigger: ".o_web_studio_code_editor_info .o_field_translate",
        },
        {
            trigger: ".o_translation_dialog .row:eq(1)",
            run() {
                assertEqual(this.$anchor[0].children[0].textContent.trim(), "French / Français");
                assertEqual(this.$anchor[0].children[1].textContent.trim(), "original term edited");
            },
        },
        {
            trigger: ".o_translation_dialog .row:eq(1) textarea",
            run: "text translated edited term",
        },
        {
            trigger: ".modal-footer button.btn-primary",
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_report_xml_other_record", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: ".o_web_studio_sidebar button[name='report_edit_sources']",
        },
        {
            extra_trigger: ".o_web_studio_xml_editor",
            trigger: ".o-web-studio-report-container iframe body p:contains(partner_1)",
            run() {
                assertEqual(
                    document.querySelector(".o-web-studio-report-search-record input").value,
                    "partner_1"
                );
            },
        },
        {
            trigger: ".o-web-studio-report-pager .o_pager_next",
        },
        {
            trigger: ".o-web-studio-report-container iframe body p:contains(partner_2)",
            run() {
                assertEqual(
                    document.querySelector(".o-web-studio-report-search-record input").value,
                    "partner_2"
                );
            },
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_partial_eval", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: ".o-web-studio-report-container iframe .lol",
            run() {
                const closestContextElement = this.$anchor[0].closest("[oe-context]");
                const oeContext = closestContextElement.getAttribute("oe-context");
                const expected = {
                    docs: { model: "res.partner", name: "Contact", in_foreach: false },
                    company: { model: "res.company", name: "Companies", in_foreach: false },
                    doc: { model: "res.partner", name: "Contact", in_foreach: true },
                    my_children: { model: "res.partner", name: "Contact", in_foreach: false },
                    child: { model: "res.partner", name: "Contact", in_foreach: true },
                };
                assertEqual(JSON.stringify(JSON.parse(oeContext)), JSON.stringify(expected));
            },
        },
        {
            trigger: ".o-web-studio-report-container iframe .couic",
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_render_multicompany", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: ".o-web-studio-report-container iframe .test_layout",
            run() {},
        },
        {
            trigger: ".o-web-studio-report-container iframe img",
            run() {
                const currentUrl = new URL(window.location)
                const cids = new URLSearchParams(currentUrl.hash.slice(1)).get("cids").split(",");
                assertEqual(this.$anchor[0].getAttribute("src"), `/logo.png?company=${cids[0]}`)
            }
        },
    ],
});

return __exports;
});
;

/******************************************************************************
*  Filepath: /web_studio/static/tests/tours/web_studio_test_ui_unit_tours.js  *
*  Lines: 899                                                                 *
******************************************************************************/
odoo.define('@web_studio/../tests/tours/web_studio_test_ui_unit_tours', ['@web/core/registry', '@web_studio/../tests/tours/tour_helpers'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */
const { registry } = require("@web/core/registry");
const { stepNotInStudio, assertEqual } = require("@web_studio/../tests/tours/tour_helpers");

registry
    .category("web_tour.tours")
    .add("web_studio_test_form_view_not_altered_by_studio_xml_edition", {
        test: true,
        url: "/web?debug=1",
        sequence: 260,
        steps: () => [
            {
                trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
            },
            {
                trigger: ".o_form_view .o_form_editable",
            },
            {
                trigger: ".o_web_studio_navbar_item button",
            },
            {
                trigger: ".o_web_studio_sidebar .o_web_studio_view",
            },
            {
                trigger: ".o_web_studio_open_xml_editor",
            },
            {
                extra_trigger: ".o_web_studio_code_editor_info",
                trigger: ".o_web_studio_leave",
            },
            stepNotInStudio(".o_form_view .o_form_editable"),
        ],
    });

/* global ace */
registry.category("web_tour.tours").add("web_studio_test_edit_with_xml_editor", {
    test: true,
    url: "/web?debug=1",
    sequence: 260,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            extra_trigger: ".someDiv",
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            trigger: ".o_web_studio_sidebar .o_web_studio_view",
        },
        {
            trigger: ".o_web_studio_open_xml_editor",
        },
        {
            extra_trigger: ".o_web_studio_xml_editor",
            trigger: ".o_web_studio_xml_resource_selector .o_select_menu_toggler",
        },
        {
            trigger:
                ".o_web_studio_xml_resource_selector .o-dropdown--menu .o_select_menu_item:contains(Odoo Studio)",
        },
        {
            trigger: ".ace_content",
            run() {
                ace.edit(document.querySelector(".ace_editor")).setValue("<data/>");
            },
        },
        {
            trigger: ".o_web_studio_xml_editor .o_web_studio_xml_resource_selector .btn-primary",
        },
        {
            trigger: ".o_web_studio_snackbar:not(:has(.fa-spin))",
        },
        {
            trigger: ".o_form_view",
            run() {
                if (document.querySelector(".someDiv")) {
                    throw new Error("The edition of the view's arch via the xml editor failed");
                }
            },
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_enter_x2many_edition_and_add_field", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            trigger: ".o_form_view .o_form_editable",
        },
        {
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            trigger: ".o_web_studio_form_view_editor .o_field_widget[name='user_ids']",
        },
        {
            extra_trigger: ".o-web-studio-edit-x2manys-buttons",
            trigger: ".o_web_studio_editX2Many[data-type='form']",
        },
        {
            extra_trigger: ".o_view_controller.o_form_view.test-user-form",
            trigger: ".o_web_studio_sidebar .o_web_studio_existing_fields_header",
        },
        {
            extra_trigger: ".o_web_studio_existing_fields_section:not(.d-none)",
            trigger:
                ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(User log entries)",
            run() {
                $(
                    ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(User log entries)"
                )[0].scrollIntoView();
            },
        },
        {
            trigger:
                ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(User log entries)",
            run: "drag_and_drop_native (.o_web_studio_form_view_editor .o_web_studio_hook:eq(1))",
        },
        {
            trigger: ".o_web_studio_form_view_editor .o_field_widget[name='log_ids']",
            run() {
                const countFields = document.querySelectorAll(
                    ".o_web_studio_form_view_editor .o_field_widget"
                ).length;
                if (!countFields === 2) {
                    throw new Error("There should be 2 fields in the form view");
                }
            },
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_enter_x2many_auto_inlined_subview", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            trigger: ".o_form_view .o_form_editable",
        },
        {
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            trigger:
                ".o_web_studio_form_view_editor .o_field_widget[name='user_ids'] .o_field_x2many_list",
        },
        {
            extra_trigger: ".o-web-studio-edit-x2manys-buttons",
            trigger: ".o_web_studio_editX2Many[data-type='list']",
        },
        {
            extra_trigger: ".o_view_controller.o_list_view.test-user-list",
            trigger: ".o_web_studio_sidebar .o_web_studio_existing_fields_header",
        },
        {
            extra_trigger: ".o_web_studio_existing_fields_section:not(.d-none)",
            trigger:
                ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(User log entries)",
            run() {
                $(
                    ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(User log entries)"
                )[0].scrollIntoView();
            },
        },
        {
            trigger:
                ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(User log entries)",
            run: "drag_and_drop_native (.o_web_studio_list_view_editor .o_web_studio_hook:eq(1))",
        },
        {
            trigger: ".o_web_studio_list_view_editor th[data-name='log_ids']",
            run() {
                const countFields = document.querySelectorAll(
                    ".o_web_studio_form_view_editor th[data-name]"
                ).length;
                if (!countFields === 2) {
                    throw new Error("There should be 2 fields in the form view");
                }
            },
        },
    ],
});

registry
    .category("web_tour.tours")
    .add("web_studio_enter_x2many_auto_inlined_subview_with_multiple_field_matching", {
        test: true,
        sequence: 260,
        steps: () => [
            {
                trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
            },
            {
                trigger: ".o_form_view .o_form_editable",
            },
            {
                trigger: ".o_web_studio_navbar_item button",
            },
            {
                trigger:
                    ".o_web_studio_form_view_editor .o_field_widget[name='user_ids']:eq(1) .o_field_x2many_list",
            },
            {
                extra_trigger: ".o-web-studio-edit-x2manys-buttons",
                trigger: ".o_web_studio_editX2Many[data-type='list']",
            },
            {
                extra_trigger: ".o_view_controller.o_list_view.test-user-list",
                trigger: ".o_web_studio_sidebar .o_web_studio_existing_fields_header",
            },
            {
                extra_trigger: ".o_web_studio_existing_fields_section:not(.d-none)",
                trigger:
                    ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(User log entries)",
                run() {
                    $(
                        ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(User log entries)"
                    )[0].scrollIntoView();
                },
            },
            {
                trigger:
                    ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(User log entries)",
                run: "drag_and_drop_native (.o_web_studio_list_view_editor .o_web_studio_hook:eq(1))",
            },
            {
                trigger: ".o_web_studio_list_view_editor th[data-name='log_ids']",
                run() {
                    const countFields = document.querySelectorAll(
                        ".o_web_studio_form_view_editor th[data-name]"
                    ).length;
                    if (!countFields === 2) {
                        throw new Error("There should be 2 fields in the form view");
                    }
                },
            },
        ],
    });

registry.category("web_tour.tours").add("web_studio_field_with_group", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            trigger: ".o_list_view",
        },
        {
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            trigger: ".o_web_studio_list_view_editor th[data-name='function']",
            run() {},
        },
        {
            trigger: ".o_web_studio_sidebar .o_web_studio_existing_fields_header",
        },
        {
            extra_trigger: ".o_web_studio_existing_fields_section:not(.d-none)",
            trigger:
                ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(Website Link)",
            run() {
                $(
                    ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(Website Link)"
                )[0].scrollIntoView();
            },
        },
        {
            trigger:
                ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(Website Link)",
            run: "drag_and_drop_native (.o_web_studio_list_view_editor th.o_web_studio_hook:eq(2))",
        },
        {
            extra_trigger:
                ".o_web_studio_list_view_editor th.o_web_studio_hook:not(.o_web_studio_nearest_hook)",
            trigger: ".o_web_studio_list_view_editor th[data-name='website']",
            run() {
                const countFields = document.querySelectorAll(
                    ".o_web_studio_list_view_editor th[data-name]"
                ).length;
                if (!countFields === 3) {
                    throw new Error("There should be 3 fields in the form view");
                }
            },
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_elements_with_groups_form", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            trigger: ".o_form_view",
        },
        {
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            trigger: ".o_web_studio_form_view_editor",
            run() {},
        },
        {
            trigger: ".o_web_studio_sidebar .o_web_studio_existing_fields_header",
        },
        {
            extra_trigger: ".o_web_studio_existing_fields_section:not(.d-none)",
            trigger:
                ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(Website Link)",
            run() {
                $(
                    ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(Website Link)"
                )[0].scrollIntoView();
            },
        },
        {
            trigger:
                ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(Website Link)",
            run: "drag_and_drop_native (.o_web_studio_form_view_editor .o_inner_group .o_web_studio_hook:eq(1))",
        },
        {
            extra_trigger:
                ".o_web_studio_form_view_editor .o_web_studio_hook:not(.o_web_studio_nearest_hook)",
            trigger: ".o_web_studio_form_view_editor .o_field_widget[name='website']",
            allowInvisible: true,
            run() {
                const countFields = document.querySelectorAll(
                    ".o_web_studio_form_view_editor .o_field_widget[name]"
                ).length;
                if (!countFields === 2) {
                    throw new Error("There should be 2 fields in the form view");
                }
            },
        },
    ],
});

registry.category("web_tour.tours").add("test_element_group_in_sidebar", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            trigger: ".o_form_view .o_form_editable",
        },
        {
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            extra_trigger: ".o_web_studio_form_view_editor .o_field_widget[name='display_name']",
            trigger: ".o_web_studio_form_view_editor .o_field_widget[name='display_name']",
        },
        {
            trigger: ".o_field_many2many_tags[name='groups_id'] .badge",
            run() {
                const tag = document.querySelector(
                    ".o_field_many2many_tags[name='groups_id'] .badge"
                );
                if (!tag || !tag.textContent.includes("Test Group")) {
                    throw new Error("The groups should be displayed in the sidebar");
                }
            },
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_custom_selection_field_edit_values", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            extra_trigger: ".o_form_view",
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            trigger: ".o_web_studio_sidebar .o_web_studio_new_fields .o_web_studio_field_selection",
            run: "drag_and_drop_native (.o_web_studio_hook:eq(0))",
        },
        {
            trigger: ".o_web_studio_add_selection .o-web-studio-interactive-list-item-input",
            run: "text some value",
        },
        {
            trigger: ".modal-footer .btn-primary",
        },
        {
            extra_trigger: "body:not(:has(.modal))",
            trigger: ".o_web_studio_leave",
        },
        {
            extra_trigger: ".o_form_view",
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            trigger: ".o_web_studio_form_view_editor .o_wrap_input:has(.o_field_selection)",
        },
        {
            trigger: ".o_web_studio_sidebar .o_web_studio_edit_selection_values",
        },
        {
            in_modal: true,
            trigger: ".o_web_studio_add_selection .o-web-studio-interactive-list-item-input",
            run: "text another value cancel",
        },
        {
            trigger: ".o_web_studio_add_selection .o-web-studio-interactive-list-edit-item",
        },
        {
            trigger: ".o_web_studio_selection_editor li:nth-child(2)",
            async run() {
                assertEqual(this.$anchor[0].textContent, "another value cancel")
            }
        },
        {
            trigger: ".modal-footer .btn-secondary",
        },
        {
            trigger: ".o_web_studio_sidebar .o_web_studio_edit_selection_values",
        },
        {
            trigger: ".o_web_studio_selection_editor li",
            run() {
                assertEqual(Array.from(this.$anchor).map(el => el.textContent).join(" "), "some value")
            }
        },
        {
            in_modal: true,
            trigger: ".o_web_studio_add_selection .o-web-studio-interactive-list-item-input",
            run: "text another value",
        },
        {
            trigger: ".modal-footer .btn-primary",
        },
        {
            extra_trigger: "body:not(:has(.modal))",
            trigger: ".o_web_studio_leave",
        },
        stepNotInStudio(),
    ],
});

registry.category("web_tour.tours").add("web_studio_test_create_one2many_lines_then_edit_name", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            extra_trigger: ".o_form_view",
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            trigger: ".o_web_studio_sidebar .o_web_studio_new_fields .o_web_studio_field_lines",
            run: "drag_and_drop_native (.o_web_studio_hook:eq(0))",
        },
        {
            trigger: ".o_form_label",
            extra_trigger: ".o_field_x2many_list",
            timeout: 20000,
        },
        {
            extra_trigger: ".o_web_studio_sidebar .o_web_studio_properties.active",
            trigger: "input[name='string']",
            run: "text new name",
        },
        {
            trigger: ".o_web_studio_leave",
            timeout: 20000,
        },
        stepNotInStudio(".o_form_view"),
    ],
});

registry.category("web_tour.tours").add("web_studio_test_address_view_id_no_edit", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            extra_trigger: ".o_form_view",
            trigger: ".o_address_format",
            run: function () {
                if (
                    this.$anchor.find("[name=lang]").length ||
                    !this.$anchor.find("[name=street]").length
                ) {
                    throw new Error(
                        "The address view id set on the company country should be displayed"
                    );
                }
            },
        },
        {
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            extra_trigger: ".o_web_studio_view_renderer",
            trigger: ".o_address_format",
            run: function () {
                if (
                    this.$anchor.find("[name=street]").length ||
                    !this.$anchor.find("[name=lang]").length
                ) {
                    throw new Error(
                        "The address view id set on the company country shouldn't be editable"
                    );
                }
            },
        },
        {
            trigger: ".o_web_studio_leave",
        },
        stepNotInStudio(".o_form_view"),
    ],
});

registry.category("web_tour.tours").add("web_studio_test_create_new_model_from_existing_view", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            extra_trigger: ".o_kanban_view",
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            trigger: ".o_web_create_new_model",
        },
        {
            extra_trigger: ".modal-dialog",
            trigger: "input[name='model_name']",
            run: "text new model",
        },
        {
            trigger: ".confirm_button",
        },
        {
            trigger: ".o_web_studio_model_configurator_next",
        },
        {
            trigger: ".o_form_view",
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_test_create_model_with_clickable_stages", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            extra_trigger: ".o_form_view",
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            trigger: ".o_web_create_new_model",
        },
        {
            extra_trigger: ".modal-dialog",
            trigger: "input[name='model_name']",
            run: "text new model",
        },
        {
            trigger: ".confirm_button",
        },
        {
            trigger: "#use_stages",
        },
        {
            trigger: ".o_web_studio_model_configurator_next",
        },
        {
            trigger: ".o_web_studio_leave",
        },
        {
            extra_trigger: ".o_form_view",
            trigger: "input#x_name_0",
            run: "text new record",
        },
        {
            trigger: ".o_arrow_button:contains(In Progress)",
        },
        {
            trigger: ".o_arrow_button_current:contains(In Progress)",
        },
        {
            trigger: ".o_form_button_save",
        },
        {
            trigger: ".o_back_button",
        },
        {
            trigger:
                ".o_kanban_group:contains(In Progress) .o_kanban_record_details:contains(new record)",
        },
    ],
});

registry
    .category("web_tour.tours")
    .add("web_studio_test_enter_x2many_edition_with_multiple_subviews", {
        test: true,
        sequence: 260,
        steps: () => [
            {
                trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
            },
            {
                extra_trigger: ".o_form_view span:contains('Address Type')",
                trigger: ".o_web_studio_navbar_item button",
            },
            {
                trigger:
                    ".o_web_studio_form_view_editor .o_field_widget[name='child_ids'] .o_field_x2many_list",
                extra_trigger: ".o_list_renderer span:contains('Address Type')",
            },
            {
                extra_trigger: ".o-web-studio-edit-x2manys-buttons",
                trigger: ".o_web_studio_editX2Many[data-type='list']",
            },
            {
                trigger: ".o_content > .o_list_renderer span:contains('Address Type')",
            },
        ],
    });

registry
    .category("web_tour.tours")
    .add("web_studio_test_enter_x2many_edition_with_multiple_subviews_correct_xpath", {
        test: true,
        sequence: 260,
        steps: () => [
            {
                trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
            },
            {
                extra_trigger: ".o_form_view",
                trigger: ".o_web_studio_navbar_item button",
            },
            {
                trigger:
                    ".o_web_studio_form_view_editor .o_field_widget[name='child_ids'] .o_field_x2many_list",
            },
            {
                extra_trigger: ".o-web-studio-edit-x2manys-buttons",
                trigger: ".o_web_studio_editX2Many[data-type='list']",
            },
            {
                extra_trigger: ".o_view_controller.o_list_view.test-subview-list",
                trigger: ".o_web_studio_sidebar .o_web_studio_existing_fields_header",
            },
            {
                extra_trigger: ".o_web_studio_sidebar .o_web_studio_existing_fields_section",
                trigger: `.o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component[data-drop='${JSON.stringify(
                    { fieldName: "active" }
                )}']`,
                run: "drag_and_drop_native (.o_web_studio_hook:eq(0))",
            },
            {
                content: "Check that the active field has been added",
                trigger: ".o_web_studio_view_renderer .o_list_view thead th[data-name='active']",
            },
        ],
    });

registry.category("web_tour.tours").add("web_studio_test_studio_view_is_last", {
    test: true,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            extra_trigger: ".o_form_view",
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            trigger: ".o_web_studio_sidebar .o_web_studio_existing_fields_header",
        },
        {
            extra_trigger: ".o_web_studio_existing_fields_section:not(.d-none)",
            trigger:
                ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(Website Link)",
            run() {
                $(
                    ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(Website Link)"
                )[0].scrollIntoView();
            },
        },
        {
            trigger:
                ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(Website Link)",
            run: "drag_and_drop_native (.o_web_studio_form_view_editor .o_inner_group .o_web_studio_hook:last)",
        },
        {
            trigger: ".o_web_studio_form_view_editor .o_field_widget[name='website']",
            allowInvisible: true,
            run() {},
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_test_edit_form_subview_attributes", {
    test: true,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            extra_trigger: ".o_form_view",
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            trigger:
                ".o_web_studio_form_view_editor .o_field_widget[name='child_ids'] .o_field_x2many_list",
        },
        {
            extra_trigger: ".o-web-studio-edit-x2manys-buttons",
            trigger: ".o_web_studio_editX2Many[data-type='form']",
        },
        {
            extra_trigger: ".o_view_controller.o_form_view.test-subview-form",
            trigger: ".o_web_studio_sidebar.o_notebook .nav-link:contains(View)",
        },
        {
            trigger: ".o_web_studio_sidebar input[name='create']:checked",
        },
        {
            trigger: ".o_web_studio_sidebar input[name='create']:not(:checked)",
            run() {},
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_x2many_two_levels_edition", {
    test: true,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            trigger: ".o_form_view .o_form_editable",
        },
        {
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            trigger: ".o_web_studio_form_view_editor .o_field_widget[name='user_ids']",
        },
        {
            extra_trigger: ".o-web-studio-edit-x2manys-buttons",
            trigger: ".o_web_studio_editX2Many[data-type='form']",
        },
        {
            extra_trigger: ".o_view_controller.o_form_view.test-subview-form-1",
            trigger: ".o_web_studio_form_view_editor .o_field_widget[name='log_ids']",
        },
        {
            trigger: ".o_web_studio_editX2Many[data-type='form']",
        },
        {
            trigger: ".o_view_controller.o_form_view.test-subview-form-2",
            run() {},
        },
        {
            trigger: ".o_web_studio_sidebar .o_web_studio_existing_fields_header",
        },
        {
            extra_trigger: ".o_web_studio_existing_fields",
            trigger:
                ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(Created on)",
            run: "drag_and_drop_native .o_web_studio_hook",
        },
        {
            trigger: ".o_web_studio_form_view_editor [data-field-name='create_date']",
            run() {},
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_field_group_studio_no_fetch", {
    test: true,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            trigger: ".o_form_view .o_form_editable",
        },
        {
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            trigger: ".o_web_studio_form_view_editor",
            run() {
                assertEqual(this.$anchor[0].querySelectorAll(".o_field_widget").length, 1);
                assertEqual(
                    this.$anchor[0].querySelectorAll(".o_field_widget")[0].dataset.studioXpath,
                    "/form[1]/field[2]"
                );
            },
        },
        {
            trigger: ".o_web_studio_views_icons a[title='List']",
        },
        {
            trigger: ".o_web_studio_list_view_editor",
            run() {
                assertEqual(
                    this.$anchor[0].querySelectorAll("th:not(.o_web_studio_hook)").length,
                    1
                );
                assertEqual(
                    this.$anchor[0].querySelectorAll("th:not(.o_web_studio_hook)")[0].dataset
                        .studioXpath,
                    "/tree[1]/field[2]"
                );
            },
        },
        {
            trigger: ".o_web_studio_views_icons a[title='Kanban']",
        },
        {
            trigger: ".o_web_studio_kanban_view_editor",
            run() {
                assertEqual(
                    this.$anchor[0].querySelectorAll(
                        ".o_kanban_record:not(.o_kanban_demo):not(.o_kanban_ghost) [data-field-name]"
                    ).length,
                    1
                );
                assertEqual(
                    this.$anchor[0]
                        .querySelectorAll(
                            ".o_kanban_record:not(.o_kanban_demo):not(.o_kanban_ghost) [data-field-name]"
                        )[0]
                        .getAttribute("studioxpath"),
                    "/kanban[1]/t[1]/field[2]"
                );
            },
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_test_move_similar_field", {
    test: true,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            extra_trigger: ".o_form_view",
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            extra_trigger: ".o_web_studio_form_view_editor",
            trigger: ".o_notebook_headers a:contains('two')",
        },
        {
            trigger: ".tab-pane.active [data-field-name=display_name]",
            run: "drag_and_drop_native (.o_web_studio_form_view_editor .o_web_studio_hook:eq(1))",
        },
        {
            trigger: ".o_web_studio_leave",
            run() {
            },
        },
    ]
});

return __exports;
});
;

/***************************************************************************************
*  Filepath: /knowledge/static/tests/tours/commands/knowledge_article_command_tour.js  *
*  Lines: 60                                                                           *
***************************************************************************************/
odoo.define('@knowledge/../tests/tours/commands/knowledge_article_command_tour', ['@web/core/registry', '@knowledge/../tests/tours/knowledge_tour_utils', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { appendArticleLink, endKnowledgeTour } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");


registry.category("web_tour.tours").add('knowledge_article_command_tour', {
    url: '/web',
    test: true,
    steps: () => [stepUtils.showAppsMenuItem(), {
    // open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, ...appendArticleLink('[name="body"]', "EditorCommandsArticle"),
{ // wait for the block to appear in the editor
    trigger: '.o_knowledge_behavior_type_article:contains("EditorCommandsArticle")',
    run: 'click',
}, { // check that the view switched to the corresponding article while keeping the breadcrumbs history
    trigger: '.o_knowledge_header:has(.o_breadcrumb_article_name_container:contains("EditorCommandsArticle")):has(.breadcrumb-item > a:contains("EditorCommandsArticle"))'
}, ...endKnowledgeTour()
]});

const composeBody = '.modal-dialog:contains(Compose Email) [name="body"]';
registry.category("web_tour.tours").add('knowledge_article_command_dialog_tour', {
    url: '/web',
    test: true,
    steps: () => [stepUtils.showAppsMenuItem(), {
    // open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { // open the chatter
    trigger: '.btn-chatter',
}, { // open the message editor
    trigger: '.o-mail-Chatter-sendMessage:not([disabled=""])',
}, { // open the full composer
    trigger: "button[aria-label='Full composer']",
}, ...appendArticleLink(`${composeBody}`, 'EditorCommandsArticle'), { // wait for the block to appear in the editor
    trigger: `${composeBody} .o_knowledge_behavior_type_article:contains("EditorCommandsArticle")`,
    run: () => {},
}, ...appendArticleLink(`${composeBody}`, 'LinkedArticle', 1), { // wait for the block to appear in the editor, after the previous one
    trigger: `${composeBody} .odoo-editor-editable > p > a:nth-child(2).o_knowledge_behavior_type_article:contains("LinkedArticle")[contenteditable="false"]`,
    run: () => {},
}, { // verify that the first block is still there and contenteditable=false
    trigger: `${composeBody} .odoo-editor-editable > p > a:nth-child(1).o_knowledge_behavior_type_article:contains("EditorCommandsArticle")[contenteditable="false"]`,
    run: () => {},
}, { // send the message
    trigger: '.o_mail_send',
}, {
    trigger: '.o_widget_knowledge_chatter_panel .o-mail-Thread .o-mail-Message-body > p > a:nth-child(1).o_knowledge_behavior_type_article:contains("EditorCommandsArticle")',
    run: () => {},
}, {
    trigger: '.o_widget_knowledge_chatter_panel .o-mail-Thread .o-mail-Message-body > p > a:nth-child(2).o_knowledge_behavior_type_article:contains("LinkedArticle")',
    run: () => {},
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/****************************************************************************************
*  Filepath: /knowledge/static/tests/tours/commands/knowledge_calendar_command_tour.js  *
*  Lines: 390                                                                           *
****************************************************************************************/
odoo.define('@knowledge/../tests/tours/commands/knowledge_calendar_command_tour', ['@web/core/registry', '@knowledge/../tests/tours/knowledge_tour_utils', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { endKnowledgeTour, openCommandBar } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

function clickDate(el) {
    const rect = el.getBoundingClientRect();
    const eventParams = {
        bubbles: true,
        clientX: rect.left + 1,
        clientY: rect.top + 1,
    };
    el.dispatchEvent(new MouseEvent('mousedown', eventParams));
    el.dispatchEvent(new MouseEvent('mouseup', eventParams));
}

function dragDate(el, target) {
    // Cannot use drag_and_drop because it uses the center of the elements
    const elRect = el.getBoundingClientRect();
    el.dispatchEvent(new MouseEvent('mousedown', {
        bubbles: true,
        clientX: elRect.left + 1,
        clientY: elRect.top + 1,
    }));
    const targetRect = target.getBoundingClientRect();
    target.dispatchEvent(new MouseEvent('mousemove', {
        bubbles: true,
        clientX: targetRect.left + 1,
        clientY: targetRect.top + 1,
    }));
    target.dispatchEvent(new MouseEvent('mouseup', {
        bubbles: true,
        clientX: targetRect.left + 1,
        clientY: targetRect.top + 1,
    }));
}

registry.category("web_tour.tours").add('knowledge_calendar_command_tour', {
    url: '/web',
    test: true,
    steps: () => [stepUtils.showAppsMenuItem(), { // open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { 
    //-----------------------------------------------
    // Insert a new item calendar view in the article
    //-----------------------------------------------
    
    // Open the command bar
    trigger: '.odoo-editor-editable > p',
    run: function () {
        openCommandBar(this.$anchor[0]);
    },
}, { // Click on the /calendar command
    trigger: '.oe-powerbox-commandName:contains("Calendar")',
    run: 'click',
}, { // As the article does not have properties definitions, it should create default ones
    trigger: '.modal-footer .btn-primary',
}, { // Scroll to the embedded view to load it
    trigger: '.o_knowledge_behavior_type_embedded_view',
    run: () => {},
}, { 
    //---------------------------------------------------
    // Create an article item by clicking in the calendar
    //---------------------------------------------------

    // Click on a date
    trigger: 'tr[data-time="08:00:00"] td.fc-widget-content:not(.fc-time)',
    extra_trigger: '.o_knowledge_behavior_type_embedded_view .o_knowledge_article_view_calendar_embedded_view',
    run: function () {
        clickDate(this.$anchor[0]);
    },
}, {
    // Check we created an item with the right datetime used as property
    trigger: '.o_knowledge_properties_field .o_property_field:contains("Start Date")',
    extra_trigger: '.o_breadcrumb_article_name_container span:empty',
    run: function () {
        const input = this.$anchor.find("input")[0];
        if (!input.value.includes("08:00:00")) {
            throw new Error('Item was not created with the correct property value');
        }
    },
}, { // Set the name of the item
    trigger: '.o_knowledge_editor .odoo-editor-editable h1',
    run: 'text Item Article',
}, { // Go back to parent article
    trigger: '.o_knowledge_tree .o_article_name:contains("EditorCommandsArticle")',
    run: 'click',
}, { // Check that the item is shown in the calendar
    trigger: '.fc-time-grid-event .o_event_title:contains("Item Article")',
    run: () => {},
}, {
    //--------------------------------------------------------------
    // Insert another item calendar view (to test advanced settings)
    // and create new start and stop properties to use by the view
    //--------------------------------------------------------------

    // Remove previous item calendar view
    trigger: '.odoo-editor-editable',
    run: function () {
        this.$anchor.data('wysiwyg').odooEditor.resetContent();
    },
}, {
    // Click on the "Create Item Calednar" helper
    trigger: '.o_knowledge_helper .o_knowledge_add_item_calendar',
    extra_trigger: '.odoo-editor-editable:not(:has(.o_knowledge_behavior_type_embedded_view))',
    run: 'click',
}, { // Open the start date dropdown
    trigger: '.o_knowledge_item_calendar_dialog_date_start .o_select_menu_toggler',
    run: 'click',
}, { // Create a new start property
    trigger: '.o_knowledge_item_calendar_dialog_date_start .o_select_menu input',
    run: 'text Start Property'
}, {
    trigger: '.o_knowledge_item_calendar_dialog_date_start .o_select_menu .o_select_menu_item.o_create_datetime',
    run: 'click',
}, { // Open the stop dropwdown
    trigger: '.o_knowledge_item_calendar_dialog_date_stop .o_select_menu_toggler',
    run: 'click',
}, { // Create a new stop property
    trigger: '.o_knowledge_item_calendar_dialog_date_stop .o_select_menu input',
    run: 'text Stop Property'
}, {
    trigger: '.o_knowledge_item_calendar_dialog_date_stop .o_select_menu .o_select_menu_item.o_create_choice',
    run: 'click',
}, { // Insert the calendar
    trigger: '.modal-footer .btn-primary',
    run: 'click',
}, {
    //---------------------------------------------------
    // Create an article item by clicking in the calendar
    //---------------------------------------------------

    // Click on a date
    trigger: 'tr[data-time="08:00:00"] td.fc-widget-content:not(.fc-time)',
    extra_trigger: '.o_knowledge_behavior_type_embedded_view .o_knowledge_article_view_calendar_embedded_view',
    run: function () {
        clickDate(this.$anchor[0]);
    },
}, {
    // Check we created an item with the right datetime used as property
    trigger: '.o_knowledge_properties_field .o_property_field:contains("Start Property")',
    extra_trigger: '.o_breadcrumb_article_name_container span:empty',
    run: function () {
        const input = this.$anchor.find("input")[0];
        if (!input.value.includes("08:00:00")) {
            throw new Error('Item was not created with the correct property value');
        }
    },
}, { 
    //-----------------------------------------------------------------------
    // Create new properties from the article view that will be used later in
    // this tour
    //-----------------------------------------------------------------------

    // Create a new date property
    trigger: '.o_knowledge_properties_field .o_field_property_add button',
    run: 'click',
}, {
    trigger: '.o_field_property_definition_header',
    run: 'text Date Property',
}, {
    trigger: '.o_field_property_definition_type button.dropdown-toggle',
    run: 'click',
}, {
    trigger: '.o_field_property_definition_type .dropdown-menu .dropdown-item:contains("Date"):not(:contains("Time"))',
    run: 'click',
}, {
    trigger: '.o_knowledge_editor .odoo-editor-editable',
    run: 'click',
}, { // Create a new checkbox property
    trigger: '.o_knowledge_properties_field .o_field_property_add button',
    run: 'click',
}, {
    trigger: '.o_field_property_definition_header',
    run: 'text Boolean Property',
}, {
    trigger: '.o_field_property_definition_type button.dropdown-toggle',
    run: 'click',
}, {
    trigger: '.o_field_property_definition_type .dropdown-menu .dropdown-item:contains("Checkbox")',
    run: 'click',
}, {
    trigger: '.o_knowledge_editor .odoo-editor-editable',
    run: 'click',
}, { // Create a text property
    trigger: '.o_knowledge_properties_field .o_field_property_add button',
    run: 'click',
}, {
    trigger: '.o_field_property_definition_header',
    run: 'text Text Property',
}, {
    trigger: '.o_field_property_definition_type button.dropdown-toggle',
    run: 'click',
}, {
    trigger: '.o_field_property_definition_type .dropdown-menu .dropdown-item:contains("Text")',
    run: 'click',
}, {
    trigger: '.o_knowledge_editor .odoo-editor-editable',
    run: 'click',
}, { // Set the text property
    trigger: '.o_knowledge_properties_field .o_property_field:contains("Text Property") input',
    run: 'text Custom text',
}, { // Set the name of the item 
    trigger: '.o_knowledge_editor .odoo-editor-editable h1',
    run: 'text Item Article',
}, { // Go back to parent article
    trigger: '.o_knowledge_tree .o_article_name:contains("EditorCommandsArticle")',
    run: 'click',
}, { // Check that the item is shown in the calendar
    trigger: '.fc-time-grid-event .o_event_title:contains("Item Article")',
    run: () => {},
}, {
    //-------------------------------------------------------------------------
    // Test the props editor dialog by changing the values, check that the view
    // is updated accordingly, and set the start and stop dates back to check
    // that the item article is shown again
    //-------------------------------------------------------------------------

    // Open the view props editor
    trigger: '.o_knowledge_behavior_type_embedded_view .o_knowledge_toolbar button:contains("Edit")',
    run: 'click',
}, { // Change the start property
    trigger: '.o_knowledge_item_calendar_dialog_date_start .o_select_menu_toggler',
    run: 'click',
}, {
    trigger: '.o_knowledge_item_calendar_dialog_date_start .o_select_menu .o_select_menu_item:contains("Date Property")',
    run: 'click',
}, { // Check that stop date has been removed as the start type changed,
    trigger: '.o_knowledge_item_calendar_dialog_date_stop .o_select_menu_toggler_slot span.text-muted',
    run: () => {},
}, { // Open the stop property dropdown
    trigger: '.o_knowledge_item_calendar_dialog_date_stop .o_select_menu_toggler',
    run: 'click',
}, { // Check that one cannot use the selected start date
    trigger: '.o_knowledge_item_calendar_dialog_date_stop .o_select_menu:not(:contains("Date Property"))',
    run: () => {},
}, { // Don't select a stop property
    trigger: '.o_knowledge_item_calendar_props_dialog',
    run: 'click',
}, { // Open the color property dropdown
    trigger: '.o_color .o_select_menu_toggler',
    run: 'click',
}, { // Select the previously created property
    trigger: '.o_color .o_select_menu .o_select_menu_item:contains("Boolean Property")',
    run: 'click',
}, { // Open the scale dropdown
    trigger: '.o_scale .o_select_menu_toggler',
    run: 'click',
}, { // Select the month scale
    trigger: '.o_scale .o_select_menu .o_select_menu_item:contains("Month")',
    run: 'click',
}, { // Save changes
    trigger: '.modal-footer .btn-primary',
    run: 'click',
}, { // Check calendar has been updated (new scale and no item shown)
    trigger: '.o_knowledge_article_view_calendar_embedded_view .o_calendar_buttons .o_view_scale_selector:contains("Month")',
    extra_trigger: '.fc-view:not(:has(.fc-event-container))',
    run: () => {},
}, { // Change start and stop dates again
    trigger: '.o_knowledge_behavior_type_embedded_view .o_knowledge_toolbar button:contains("Edit")',
    run: 'click',
}, { // Change the start property
    trigger: '.o_knowledge_item_calendar_dialog_date_start .o_select_menu_toggler',
    run: 'click',
}, {
    trigger: '.o_knowledge_item_calendar_dialog_date_start .o_select_menu .o_select_menu_item:contains("Start Property")',
    run: 'click',
}, { // Check that stop date has been removed as the start type changed,
    trigger: '.o_knowledge_item_calendar_dialog_date_stop .o_select_menu_toggler_slot span.text-muted',
    run: () => {},
}, { // Open the stop property dropdown
    trigger: '.o_knowledge_item_calendar_dialog_date_stop .o_select_menu_toggler',
    run: 'click',
}, { // Select the stop date
    trigger: '.o_knowledge_item_calendar_dialog_date_stop .o_select_menu .o_select_menu_item:contains("Stop Property")',
    run: 'click',
}, { // Save changes
    trigger: '.modal-footer .btn-primary',
    run: 'click',
}, { // Open the view
    trigger: '.o_knowledge_behavior_type_embedded_view .o_knowledge_toolbar button:contains("Open")',
    run: 'click',
}, { // Check that the item is shown
    trigger: '.fc-view .o_event_title:contains("Item Article")',
    extra_trigger: '.o_knowledge_article_view_calendar_embedded_view.o_action',
    run: () => {},
}, { // Leave the app and come back to make sure that changes have been saved
    trigger: '.o_main_navbar .o_menu_toggle',
}, {
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
    run: 'click',
}, { 
    //----------------------------
    // Move the item and resize it
    //----------------------------

    // Change the scale from the calendar view
    trigger: '.o_knowledge_article_view_calendar_embedded_view .o_calendar_buttons .o_view_scale_selector button:contains("Month")',
    extra_trigger: '.o_knowledge_behavior_type_embedded_view',
    run: 'click',
}, {
    trigger: '.o_knowledge_article_view_calendar_embedded_view .o_calendar_buttons .o_scale_button_week',
    run: 'click',
}, { // Move the item in the calendar
    trigger: '.fc-time-grid-event .o_event_title:contains("Item Article")',
    run: function () {
        const target = document.querySelector('tr[data-time="09:00:00"] td.fc-widget-content:not(.fc-time)');
        dragDate(this.$anchor[0], target);
    },
}, { // Make resizer visible
    trigger: '.fc-time-grid-event',
    run: function () {
        const resizer = this.$anchor.find('.fc-end-resizer')[0];
        resizer.style.display = "block";
        resizer.style.width = "100%";
        resizer.style.height = "3px";
        resizer.style.bottom = "0";
        },
}, {
    trigger: '.fc-time-grid-event:contains("Item Article") .fc-end-resizer',
    run: function () {
        const target = document.querySelector('tr[data-time="11:00:00"] td.fc-widget-content:not(.fc-time)');
        dragDate(this.$anchor[0], target);
    },
}, { 
    //----------------------------------------------------------------------
    // Check that the date properties have been updated correclty after that
    // the item has been moved in the item calendar view, and that the text
    // property has not been changed
    //----------------------------------------------------------------------

    // Open the item
    trigger: '.fc-time-grid-event',
    run: 'dblclick',
}, { // Check that the properties have been updated
    trigger: '.o_knowledge_properties_field .o_property_field:contains("Start Property")',
    extra_trigger: '.o_breadcrumb_article_name_container:contains("Item Article")',
    run: function () {
        const input = this.$anchor.find("input")[0];
        if (!input.value.includes("09:00:00")) {
            throw new Error('Item start date property has not been updated');
        }
    },
}, {
    trigger: '.o_knowledge_properties_field .o_property_field:contains("Stop Property")',
    run: function () {
        const input = this.$anchor.find("input")[0];
        // When resizing an event, the event spans the hovered row, so we need to add 15 minutes
        if (!input.value.includes("11:15:00")) {
            throw new Error('Item stop date property has not been updated');
        }
    },
}, { // Check text property did not change
    trigger: '.o_knowledge_properties_field .o_property_field:contains("Text Property")',
    run: function () {
        const input = this.$anchor.find("input")[0];
        if (!input.value.includes("Custom text")) {
            throw new Error('Item text property has changed');
        }
    },
}, {
    //---------------------------------------------------------------------
    // Remove start property to test the behavior of the item calendar view
    // when the required props are missing
    //---------------------------------------------------------------------

    // Click on edit property button
    trigger: '.o_knowledge_properties_field .o_property_field:contains("Start Property") .o_field_property_open_popover',
    run: 'click',
}, { // Delete start date property
    trigger: '.o_field_property_definition .o_field_property_definition_delete',
    run: 'click',
}, { // Confirm deletion
    trigger: '.modal-dialog .btn-primary',
    run: 'click',
}, { // Go back to parent article
    trigger: '.o_knowledge_tree .o_article_name:contains("EditorCommandsArticle")',
    run: 'click',
}, { // Make sure view is not crashed and shows nocontent helper
    trigger: '.o_knowledge_article_view_calendar_embedded_view .o_knowledge_item_calendar_nocontent',
    run: () => {},
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/************************************************************************************
*  Filepath: /knowledge/static/tests/tours/commands/knowledge_file_command_tour.js  *
*  Lines: 36                                                                        *
************************************************************************************/
odoo.define('@knowledge/../tests/tours/commands/knowledge_file_command_tour', ['@web/core/registry', '@knowledge/../tests/tours/knowledge_tour_utils', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { endKnowledgeTour, openCommandBar } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");


registry.category("web_tour.tours").add('knowledge_file_command_tour', {
    url: '/web',
    test: true,
    steps: () => [stepUtils.showAppsMenuItem(), {
    // open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { // open the command bar
    trigger: '.odoo-editor-editable > p',
    run: function () {
        openCommandBar(this.$anchor[0]);
    },
}, { // click on the /file command
    trigger: '.oe-powerbox-commandName:contains("File")',
    run: 'click',
}, { // wait for the media dialog to open
    trigger: '.o_select_media_dialog',
}, { // click on the first item of the modal
    trigger: '.o_existing_attachment_cell:first-child',
    run: 'click'
}, { // wait for the block to appear in the editor
    trigger: '.o_knowledge_behavior_type_file',
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/*************************************************************************************
*  Filepath: /knowledge/static/tests/tours/commands/knowledge_index_command_tour.js  *
*  Lines: 37                                                                         *
*************************************************************************************/
odoo.define('@knowledge/../tests/tours/commands/knowledge_index_command_tour', ['@web/core/registry', '@knowledge/../tests/tours/knowledge_tour_utils', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { endKnowledgeTour, openCommandBar } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");


registry.category("web_tour.tours").add('knowledge_index_command_tour', {
    url: '/web',
    test: true,
    steps: () => [stepUtils.showAppsMenuItem(), {
    // open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { // open the command bar
    trigger: '.odoo-editor-editable > p',
    run: function () {
        openCommandBar(this.$anchor[0]);
    },
}, { // click on the /index command
    trigger: '.oe-powerbox-commandName:contains("Index")',
    run: 'click',
}, { // wait for the block to appear in the editor
    trigger: '.o_knowledge_behavior_type_articles_structure',
}, { // click on the refresh button
    trigger: '.o_knowledge_behavior_type_articles_structure button[title="Update"]',
    run: 'click',
}, { // click on the switch mode button
    trigger: '.o_knowledge_behavior_type_articles_structure button[title="Switch Mode"]',
    run: 'click',
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/**************************************************************************************
*  Filepath: /knowledge/static/tests/tours/commands/knowledge_kanban_command_tour.js  *
*  Lines: 179                                                                         *
**************************************************************************************/
odoo.define('@knowledge/../tests/tours/commands/knowledge_kanban_command_tour', ['@web/core/registry', '@knowledge/../tests/tours/knowledge_tour_utils', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { endKnowledgeTour, openCommandBar } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('knowledge_kanban_cards_command_tour', {
    url: '/web',
    test: true,
    steps: () => [stepUtils.showAppsMenuItem(), { // open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { // open the command bar
    trigger: '.odoo-editor-editable > p',
    run: function () {
        openCommandBar(this.$anchor[0]);
    },
}, { // click on the /kanban command
    trigger: '.oe-powerbox-commandName:contains("Item Cards")',
    run: 'click',
},
...commonKanbanSteps(),
{ // create an article item
    trigger: '.o_knowledge_behavior_type_embedded_view .o-kanban-button-new',
    run: 'click',
}, { // verify that the view switched to the article item
    trigger: '.o_knowledge_header:has(input[id="name"]:placeholder-shown):has(.breadcrumb-item > a:contains("EditorCommandsArticle"))',
    run: () => {},
}, ...endKnowledgeTour()
]});

registry.category("web_tour.tours").add('knowledge_kanban_command_tour', {
    url: '/web',
    test: true,
    steps: () => [stepUtils.showAppsMenuItem(), { // open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { // open the command bar
    trigger: '.odoo-editor-editable > p',
    run: function () {
        openCommandBar(this.$anchor[0]);
    },
}, { // click on the /kanban command
    trigger: '.oe-powerbox-commandName:contains("Item Kanban")',
    run: 'click',
},
...commonKanbanSteps(),
{ // Check that the stages are well created
    trigger: '.o_knowledge_behavior_type_embedded_view .o_kanban_renderer .o_kanban_group .o_kanban_header_title:contains("Ongoing")',
    run: () => {},
}, { // create an article item from Main New button
    trigger: '.o_knowledge_behavior_type_embedded_view .o-kanban-button-new',
    run: 'click',
}, { // Type a Title for new article in the quick create form
    trigger: '.o_knowledge_behavior_type_embedded_view .o_kanban_renderer .o_kanban_quick_create .o_input',
    run: 'text New Quick Create Item',
}, { // Click on Add to create the article
    trigger: '.o_knowledge_behavior_type_embedded_view .o_kanban_renderer .o_kanban_quick_create .o_kanban_add',
    run: 'click'
}, { // Verify that the article has been properly created
    trigger: '.o_knowledge_behavior_type_embedded_view .o_kanban_renderer .o_kanban_record_title span:contains("New Quick Create Item")',
    run: () => {},
}, { // Create a new article using quick create in OnGoing Column
    trigger: '.o_knowledge_behavior_type_embedded_view .o_kanban_renderer .o_kanban_group .o_kanban_header_title:contains("Ongoing") .o_kanban_quick_add',
    run: 'click'
}, { // Type a Title for new article in the quick create form
    trigger: '.o_knowledge_behavior_type_embedded_view .o_kanban_renderer .o_kanban_group:has(.o_kanban_header_title:contains("Ongoing")) .o_kanban_quick_create .o_input',
    run: 'text Quick Create Ongoing Item',
}, { // Click on Edit to open the article in edition in his own form view
    trigger: '.o_knowledge_behavior_type_embedded_view .o_kanban_renderer .o_kanban_quick_create .o_kanban_edit',
    run: 'click'
}, { // verify that the view switched to the article item
    trigger: '.o_knowledge_header .o_breadcrumb_article_name_container:contains("Quick Create Ongoing Item")',
    run: () => {},
}, ...endKnowledgeTour()
]});

function commonKanbanSteps () {
    return [
        { // choose a name for the embedded view
            trigger: '.modal-footer button.btn-primary',
            run: 'click',
        }, { // scroll to the embedded view to load it
            trigger: '.o_knowledge_behavior_type_embedded_view',
            run: function () {
                this.$anchor[0].scrollIntoView();
            },
        }, { // wait for the kanban view to be mounted
            trigger: '.o_knowledge_behavior_type_embedded_view .o_kanban_renderer',
            run: () => {
                const helpField = document.querySelector('.o_knowledge_content[data-prop-name="action_help"]');
                if (!helpField) {
                    throw new Error('Help field was not rendered in the DOM');
                }
                // allow further modifications of the help field for testing
                helpField.classList.remove('d-none');
            },
        }, { // modify the help message in the dom
            trigger: '.o_knowledge_content[data-prop-name="action_help"] > p',
            run: function () {
                this.$anchor[0].textContent = "Test help message";
            }
        }, { // create an article to switch to
            trigger: '.o_section_header:contains(Workspace) .o_section_create',
            run: 'click'
        }, { // check that the article is correctly created
            trigger: '.odoo-editor-editable > h1',
            run: () => {},
        }, { // switch back to the first article
            trigger: '.o_knowledge_tree .o_article_name:contains("EditorCommandsArticle")',
            run: 'click',
        }, { // scroll to load
            trigger: '.o_knowledge_behavior_type_embedded_view',
            run: function () {
                this.$anchor[0].scrollIntoView();
            }
        }, { // wait for the kanban view to be mounted
            trigger: '.o_knowledge_behavior_type_embedded_view .o_kanban_renderer',
            run: () => {}
        }, { // open the view
            trigger: '.o_knowledge_toolbar button:contains(Open)',
            run: 'click'
        }, { // verify that the help message is displayed
            trigger: '.o_action_manager > .o_view_controller.o_kanban_view .o_nocontent_help:contains("Test help message")',
            run: () => {}
        }, { // go back to the first view
            trigger: '.breadcrumb a:contains("EditorCommandsArticle")',
            run: 'click',
        }, { // scroll to the embedded view to load it
            trigger: '.o_knowledge_behavior_type_embedded_view',
            run: function () {
                this.$anchor[0].scrollIntoView();
            },
        }, { // wait for the kanban view to be mounted
            trigger: '.odoo-editor-editable',
            extra_trigger: '.o_knowledge_behavior_type_embedded_view .o_kanban_renderer',
            run: function () {
                const helpField = document.querySelector('.o_knowledge_content[data-prop-name="action_help"]');
                if (!helpField) {
                    throw new Error('Help field was not rendered in the DOM');
                }
                // focus the body otherwise change will not be saved
                this.$anchor[0].focus();
                // remove the help field from the dom for testing
                helpField.remove();
            },
        }, { // switch back to the first article
            trigger: '.o_knowledge_tree .o_article_name:contains("Untitled")',
            run: 'click',
        }, { // check that the article is loaded
            trigger: '.odoo-editor-editable > h1',
            run: () => {},
        }, { // reswitch to the other article
            trigger: '.o_knowledge_tree .o_article_name:contains("EditorCommandsArticle")',
            run: 'click',
        }, { // scroll to the embedded view to load it
            trigger: '.o_knowledge_behavior_type_embedded_view',
            run: function () {
                this.$anchor[0].scrollIntoView();
            },
        }, { // wait for the kanban view to be mounted
            trigger: '.o_knowledge_behavior_type_embedded_view .o_kanban_renderer',
            run: () => {},
        }, { // open the view
            trigger: '.o_knowledge_toolbar button:contains(Open)',
            run: 'click'
        }, { // verify that the default help message is displayed
            trigger: '.o_action_manager > .o_view_controller.o_kanban_view .o_nocontent_help:contains("No data to display")',
            run: () => {}
        }, { // go back to the first view
            trigger: '.breadcrumb a:contains("EditorCommandsArticle")',
            run: 'click',
        }
    ];
};

return __exports;
});
;

/************************************************************************************
*  Filepath: /knowledge/static/tests/tours/commands/knowledge_list_command_tour.js  *
*  Lines: 85                                                                        *
************************************************************************************/
odoo.define('@knowledge/../tests/tours/commands/knowledge_list_command_tour', ['@web/core/registry', '@knowledge/../tests/tours/knowledge_tour_utils', '@knowledge/js/knowledge_utils', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { endKnowledgeTour, openCommandBar } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { decodeDataBehaviorProps } = require("@knowledge/js/knowledge_utils");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

const testName = "*()!'<>~";
let behaviorProps;

registry.category("web_tour.tours").add('knowledge_list_command_tour', {
    url: '/web',
    test: true,
    steps: () => [stepUtils.showAppsMenuItem(), { // open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { // open the command bar
    trigger: '.odoo-editor-editable > p',
    run: function () {
        openCommandBar(this.$anchor[0]);
    },
}, { // click on the /list command
    trigger: '.oe-powerbox-commandName:contains("Item List")',
    run: 'click',
}, { // input a test name for the view
    trigger: '.modal-dialog #label',
    run: `text ${testName}`,
}, { // choose a name for the embedded view
    trigger: '.modal-footer button.btn-primary',
    run: 'click'
}, { // scroll to the embedded view to load it
    trigger: '.o_knowledge_behavior_type_embedded_view',
    run: function () {
        this.$anchor[0].scrollIntoView();
    },
}, { // wait for the list view to be mounted
    trigger: '.o_knowledge_behavior_type_embedded_view .o_list_renderer',
    run: () => {},
}, { // verify that the view has the correct name and store data-behavior-props
    trigger: '.o_knowledge_embedded_view .o_control_panel .o_breadcrumb .active:contains("*()!\'<>~")',
    run: () => {
        const embeddedViewElement = document.querySelector('.o_knowledge_behavior_type_embedded_view');
        behaviorProps = decodeDataBehaviorProps(embeddedViewElement.dataset.behaviorProps);
    }
}, { // click on rename button
    trigger: '.o_knowledge_toolbar button:contains(Rename)',
    run: 'click',
}, { // click to validate the modal
    trigger: '.modal-footer button.btn-primary',
    run: 'click'
}, { // check that the name is the correct one and compare previous data-behavior-props and the new one (should be equivalent)
    trigger: '.o_knowledge_embedded_view .o_control_panel .o_breadcrumb .active:contains("*()!\'<>~")',
    run: () => {
        const embeddedViewElement = document.querySelector('.o_knowledge_behavior_type_embedded_view');
        const newBehaviorProps = decodeDataBehaviorProps(embeddedViewElement.dataset.behaviorProps);
        if (JSON.stringify(newBehaviorProps) !== JSON.stringify(behaviorProps)) {
            // check that knowledge.article render_embedded_view urllib.parse.quote did
            // produce an equivalent data-behavior-props as knowledge_utils encodeDataBehaviorProps encodeURIComponent
            throw new Error('data-behavior-props should be semantically the same as before');
        }
    }
}, { // click on rename button
    trigger: '.o_knowledge_toolbar button:contains(Rename)',
    run: 'click',
}, { // rename the view
    trigger: '.modal-body input',
    run: 'text New Title',
}, { // click to validate the modal
    trigger: '.modal-footer button.btn-primary',
    run: 'click',
}, { // check that name has been updated
    trigger: '.o_knowledge_embedded_view .o_control_panel .o_breadcrumb .active:contains("New Title")',
    run: () => {},
}, {
    // reload the article to make sure that the article is saved for readonly tour
    trigger: 'a[data-menu-xmlid="knowledge.knowledge_menu_home"]',
}, { // wait for embed to be visible
    trigger: '.o_knowledge_behavior_type_embedded_view',
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/***************************************************************************************
*  Filepath: /knowledge/static/tests/tours/commands/knowledge_outline_command_tour.js  *
*  Lines: 34                                                                           *
***************************************************************************************/
odoo.define('@knowledge/../tests/tours/commands/knowledge_outline_command_tour', ['@web/core/registry', '@knowledge/../tests/tours/knowledge_tour_utils', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { endKnowledgeTour, openCommandBar } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");


registry.category("web_tour.tours").add('knowledge_outline_command_tour', {
    url: '/web',
    test: true,
    steps: () => [stepUtils.showAppsMenuItem(), {
    // open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { // open the command bar
    trigger: '.odoo-editor-editable > p',
    run: function () {
        openCommandBar(this.$anchor[0]);
    },
}, { // click on the /outline command
    trigger: '.oe-powerbox-commandName:contains("Index")',
    run: 'click',
}, { // wait for the block to appear in the editor
    trigger: '.o_knowledge_behavior_type_articles_structure',
}, { // click on the refresh button
    trigger: '.o_knowledge_behavior_type_articles_structure button[title="Update"]',
    run: 'click',
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/****************************************************************************************
*  Filepath: /knowledge/static/tests/tours/commands/knowledge_search_favorites_tour.js  *
*  Lines: 198                                                                           *
****************************************************************************************/
odoo.define('@knowledge/../tests/tours/commands/knowledge_search_favorites_tour', ['@web/core/registry', '@knowledge/../tests/tours/knowledge_tour_utils', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { endKnowledgeTour, openCommandBar } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

/**
 * Insert the Knowledge kanban view as an embedded view in article.
 *
 * @param {String} article article name
 * @returns {Array} steps
 */
const embedKnowledgeKanbanViewSteps = function (article) {
    return [{ // open the Knowledge App
        trigger: ".o_app[data-menu-xmlid='knowledge.knowledge_menu_root']",
    }, { // click on the search menu
        trigger: "[role='menuitem']:contains(Search)",
    }, { // toggle on the kanban view
        trigger: ".o_switch_view.o_kanban",
    }, { // wait for the kanban view
        trigger: ".o_kanban_renderer",
        run: () => {},
    }, { // open action menu dropdown
        trigger: ".o_control_panel .o_cp_action_menus button",
    }, { // click on the knowledge menu button
        trigger: ".o_control_panel .o_cp_action_menus .dropdown-toggle:contains(Knowledge)",
        run: function () {
            this.$anchor[0].dispatchEvent(new Event("mouseenter"));
        },
    }, { // click on insert view in article
        trigger: ".o_cp_action_menus span:contains('Insert view in article')",
    }, { // embed in article
        trigger: `.modal-dialog td.o_field_cell:contains(${article})`,
    }];
};

/**
 * Test favorite filters and use by default filters in embedded views in
 * Knowledge. Need an article with 2 named kanban embeds to work.
 *
 * @param {String} kanban1 name of the first kanban
 * @param {String} kanban2 name of the second kanban
 * @returns {Array} steps
 */
const validateFavoriteFiltersSteps = function (kanban1, kanban2) {
    return [{
        content: 'Open the search panel menu',
        trigger: `.o_knowledge_embedded_view .o_control_panel:contains(${kanban1}) .o_searchview_dropdown_toggler`,
    }, {
        trigger: ".o_favorite_menu .o_add_favorite",
    }, {
        trigger: ".o_favorite_menu:contains(Favorites) input[type='text']",
        run: "text testFilter",
    }, {
        // use by default
        trigger: ".o_favorite_menu .o-checkbox:contains(Default filter) input",
    }, {
        trigger: ".o_favorite_menu .o_save_favorite",
    },
    stepUtils.toggleHomeMenu(),
    {
        // open the Knowledge App
        trigger: ".o_app[data-menu-xmlid='knowledge.knowledge_menu_root']",
    }, {
        // check that the search item has been added
        trigger: ".o_facet_value",
        run: function () {
            const items = document.querySelectorAll(".o_facet_value");
            if (items.length !== 1) {
                console.error("The search should be applied only on the first view");
            } else if (items[0].innerText !== 'testFilter') {
                console.error(`Wrong favorite name: ${items[0].innerText}`);
            }
        },
    }, {
        // Open the favorite of the second kanban and check it has no favorite
        // (favorite are defined per view)
        trigger: `.o_breadcrumb:contains('${kanban2}')`,
        run: function () {
            const view = this.$anchor[0].closest(
                '.o_kanban_view'
            );
            const searchMenuButton = view.querySelector(".o_searchview_dropdown_toggler");
            searchMenuButton.click();
        },
    }, {
        trigger: ".o_favorite_menu",
        run: function () {
            const items = document.querySelectorAll(".o_favorite_menu .dropdown-item");
            if (items.length !== 1 || items[0].innerText !== "Save current search") {
                console.error("The favorite should not be available for the second view");
            }
        },
    }];
};

registry.category("web_tour.tours").add("knowledge_items_search_favorites_tour", {
    url: "/web",
    test: true,
    steps: () => [
        stepUtils.showAppsMenuItem(),
        {
            // open the Knowledge App
            trigger: ".o_app[data-menu-xmlid='knowledge.knowledge_menu_root']",
        },
        {
            trigger: ".o_field_html",
            run: function () {
                const header = document.querySelector(".o_breadcrumb_article_name input");
                if (header.value !== "Article 1") {
                    console.error(`Wrong article: ${header.value}`);
                }
            },
        },
        // Create the first Kanban
        {
            trigger: ".odoo-editor-editable > h1",
            run: function () {
                openCommandBar(this.$anchor[0]);
            },
        },
        {
            trigger: ".oe-powerbox-commandName:contains('Item Kanban')",
        },
        {
            trigger: ".modal-body input.form-control",
            run: "text Items 1",
        },
        {
            trigger: "button:contains('Insert')",
        },
        // wait for kanban 1 to be inserted
        {
            trigger: ".o_knowledge_embedded_view .o_control_panel:contains(Items 1)",
            run: () => {},
        },
        // Create the second Kanban
        {
            trigger: ".odoo-editor-editable > h1",
            run: function () {
                openCommandBar(this.$anchor[0]);
            },
        },
        {
            trigger: ".oe-powerbox-commandName:contains('Item Kanban')",
        },
        {
            trigger: ".modal-body input.form-control",
            run: "text Items 2",
        },
        {
            trigger: "button:contains('Insert')",
        },
        // wait for kanban 2 to be inserted
        {
            trigger: ".o_knowledge_embedded_view .o_control_panel:contains(Items 2)",
            run: () => {},
        },
        ...validateFavoriteFiltersSteps("Items 1", "Items 2"),
        ...endKnowledgeTour(),
    ],
});

registry.category("web_tour.tours").add("knowledge_search_favorites_tour", {
    url: "/web",
    test: true,
    steps: () => [stepUtils.showAppsMenuItem(),
        // insert a first kanban view
        ...embedKnowledgeKanbanViewSteps("Article 1"),
        { // wait for embedded view to load and click on rename button
            trigger: '.o_knowledge_behavior_type_embedded_view:has(.o_knowledge_embedded_view .o_control_panel:contains(Articles)) .o_knowledge_toolbar button:contains(Rename)',
            allowInvisible: true,
        }, { // rename the view Kanban 1
            trigger: '.modal-dialog input.form-control',
            run: `text Kanban 1`,
        }, { // click on rename
            trigger: "button:contains('Rename')",
        }, { // check the application of the rename
            trigger: '.o_knowledge_embedded_view .o_control_panel:contains(Kanban 1)',
            run: () => {},
        },
        stepUtils.toggleHomeMenu(),
        // insert a second kanban view
        ...embedKnowledgeKanbanViewSteps("Article 1"),
        { // wait for embedded view to load
            trigger: '.o_knowledge_embedded_view .o_control_panel:contains(Articles)',
            run: () => {},
        },
        ...validateFavoriteFiltersSteps("Kanban 1", "Articles"),
        ...endKnowledgeTour(),
    ],
});

return __exports;
});
;

/************************************************************************************************
*  Filepath: /knowledge/static/tests/tours/commands/knowledge_table_of_content_command_tour.js  *
*  Lines: 73                                                                                    *
************************************************************************************************/
odoo.define('@knowledge/../tests/tours/commands/knowledge_table_of_content_command_tour', ['@web/core/registry', '@knowledge/../tests/tours/knowledge_tour_utils', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { endKnowledgeTour, openCommandBar } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");


registry.category("web_tour.tours").add('knowledge_table_of_content_command_tour', {
    url: '/web',
    test: true,
    steps: () => [stepUtils.showAppsMenuItem(), {
    // open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { // open the command bar
    trigger: '.odoo-editor-editable > p',
    run: function () {
        openCommandBar(this.$anchor[0]);
    },
}, { // click on the /toc command
    trigger: '.oe-powerbox-commandName:contains("Table Of Content")',
    run: 'click',
}, { // wait for the block to appear in the editor
    trigger: '.o_knowledge_behavior_type_toc',
}, { // insert a few titles in the editor
    trigger: '.odoo-editor-editable > p',
    run: function () {
        const $anchor = $(this.$anchor[0]);
        $anchor.append([
            $('<h1>Title 1</h1>'),
            $('<h2>Title 1.1</h2>'),
            $('<h3>Title 1.1.1</h3>'),
            $('<h2>Title 1.2</h2>'),
        ]);
    },
}, { // click on the h1 anchor link generated by the toc
    trigger: '.o_knowledge_toc_link_depth_0',
    run: 'click',
}, { // open the tools panel
    trigger: '#dropdown_tools_panel',
    run: 'click',
}, { // switch to locked (readonly) mode
    trigger: '.o_knowledge_more_options_panel .btn-lock',
    run: 'click',
}, { // check that we are in readonly mode
    trigger: '.o_field_html .o_readonly',
    run: () => {},
}, { // check that the content of the toc is not duplicated
    trigger: '.o_knowledge_behavior_type_toc',
    run: function () {
        if (this.$anchor[0].querySelectorAll('.o_knowledge_toc_content').length !== 1) {
            throw new Error('The table of content group of links should be present exactly once (not duplicated)');
        }
    },
}, { // click on the h1 anchor link generated by the toc
    trigger: '.o_knowledge_toc_link_depth_0',
    run: 'click',
}, { // open the tools panel
    trigger: '#dropdown_tools_panel',
    run: 'click',
}, { // unlock the article
    trigger: '.o_knowledge_more_options_panel.show .btn-lock',
    run: 'click',
}, { // check that we are in edit mode
    trigger: '.o_field_html .odoo-editor-editable',
    run: () => {},
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/****************************************************************************************
*  Filepath: /knowledge/static/tests/tours/commands/knowledge_template_command_tour.js  *
*  Lines: 71                                                                            *
****************************************************************************************/
odoo.define('@knowledge/../tests/tours/commands/knowledge_template_command_tour', ['@web/core/registry', '@knowledge/../tests/tours/knowledge_tour_utils', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { endKnowledgeTour, openCommandBar } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");


registry.category("web_tour.tours").add('knowledge_template_command_tour', {
    url: '/web',
    test: true,
    steps: () => [stepUtils.showAppsMenuItem(), {
    // open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { // go to the custom article
    trigger: '.o_article .o_article_name:contains("EditorCommandsArticle")',
}, { // wait for article to be correctly loaded
    trigger: '.o_breadcrumb_article_name_container:contains("EditorCommandsArticle")',
    run: () => {},
}, { // open the command bar
    trigger: '.odoo-editor-editable > p',
    run: function () {
        openCommandBar(this.$anchor[0]);
    },
}, { // click on the /clipboard command
    trigger: '.oe-powerbox-commandName:contains("Clipboard")',
    run: 'click',
}, { // wait for the block to appear in the editor
    trigger: '.o_knowledge_behavior_type_template',
}, { // enter text into the mail template
    trigger: '.o_knowledge_content > p',
    run: 'text Hello world'
}, { // verify that the text was correctly inserted
    trigger: '.o_knowledge_content > p:contains(Hello world)',
}, { // open the chatter
    trigger: '.btn-chatter',
    run: 'click',
}, {
    trigger: '.o-mail-Thread',
    run: () => {},
}, { // open the follower list of the article
    trigger: '.o-mail-Followers-button',
    run: 'click',
}, { // open the contact record of the follower
    trigger: '.o-mail-Follower-details:contains(HelloWorldPartner)',
    run: 'click',
}, { // verify that the partner form view is fully loaded
    trigger: '.o_breadcrumb .o_last_breadcrumb_item.active:contains(HelloWorldPartner)',
    run: () => {},
}, { // search an article to open it from the contact record
    trigger: 'button[title="Search Knowledge Articles"]',
    run: 'click',
}, { // open the article
    trigger: '.o_command_default:contains(EditorCommandsArticle)',
    run: 'click',
}, { // wait for article to be correctly loaded
    trigger: '.o_breadcrumb_article_name_container:contains("EditorCommandsArticle")',
    run: () => {},
}, { // use the template as description for the contact record
    trigger: '.o_knowledge_behavior_type_template button:contains(Use as)',
    run: 'click',
}, { // check that the content of the template was inserted as description
    trigger: '.o_form_sheet .o_field_html .odoo-editor-editable p:first-child:contains("Hello world")',
    run: () => {},
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/**********************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_cover_picker.js  *
*  Lines: 199                                                         *
**********************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_cover_picker', ['@knowledge/../tests/tours/knowledge_tour_utils', '@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { endKnowledgeTour } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

function moveCover(position) {
    const cover = document.querySelector('.o_knowledge_cover img');
    cover.dispatchEvent(new PointerEvent('pointerdown'));
    document.dispatchEvent(new PointerEvent('pointermove', {clientY: position}));
    document.dispatchEvent(new PointerEvent('pointerup'));
}

/**
 * Tests the cover picker feature when unsplash credentials are unset. In this
 * case, the "Add Cover" button should always open the cover selector.
 */
registry.category("web_tour.tours").add('knowledge_cover_selector_tour', {
    test: true,
    url: '/web',
    steps: () => [stepUtils.showAppsMenuItem(), {
    // Open Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, {
    // Click on the "Create" button
    trigger: '.o_knowledge_header .btn-create',
}, {
    // Set the name of the article
    trigger: '.o_breadcrumb_article_name > input',
    extra_trigger: '.o_article_active:contains("Untitled")',
    run: 'text Birds',
}, {
    // Make the add cover button visible (only visible on hover)
    trigger: '.o_article_active:contains("Birds")',
    run() {},
}, {
    // Click on add cover button
    trigger: '.o_knowledge_add_cover',
    allowInvisible: true,
}, {
    // Check that the cover selector has been opened and that it shows
    // the form allowing to enter unsplash credentials, and click on the
    // add url button
    trigger: '.o_upload_media_url_button',
    extra_trigger: '.modal-body .unsplash_error',
    run: () => {},
}, {
    // Change the search query to find odoo_logo file
    trigger: '.modal-body input.o_we_search',
    extra_trigger: '.modal-body .o_nocontent_help',
    run: 'text odoo_logo',
}, {
    // Choose the odoo_logo cover
    trigger: '.o_existing_attachment_cell img[title*="odoo_logo"]',
    run: 'click',
}, {
    // Check cover has been added to the article and is initially centered and
    // make the reposition cover button visible
    trigger: '.o_knowledge_cover img[style="object-position: 50% 50%;"]',
    run() {},
}, {
    // Click on the reposition cover button
    trigger: '.o_knowledge_reposition_cover',
    allowInvisible: true,
}, {
    // Move the cover down and click on the "Cancel" button
    trigger: '.o_reposition_hint',
    run: () => {
        moveCover(1000);
        const undoButton = document.querySelector('.o_knowledge_undo_cover_move');
        // Timeout to make sure the event is fired after that the cover has moved
        setTimeout(() => undoButton.dispatchEvent(new PointerEvent('pointerdown', {bubbles: true})), 0);
    },
}, {
    // Check that the undo button works as expected (cover should be centered)
    trigger: '.o_knowledge_cover img[style="object-position: 50% 50%;"]',
    extra_trigger: '.o_knowledge_cover:not(:has(.o_reposition_hint))',
    run() {},
}, {
    // Move cover again but use the "save" button this time
    trigger: '.o_knowledge_reposition_cover',
    allowInvisible: true,
}, {
    trigger: '.o_reposition_hint',
    run: () => {
        moveCover(1000);
        const saveButton = document.querySelector('.o_knowledge_save_cover_move');
        // Timeout to make sure the event is fired after that the cover has moved
        setTimeout(() => saveButton.dispatchEvent(new PointerEvent('pointerdown', {bubbles: true})), 0);
    }
}, {
    // Check that the cover is positioned at the top
    trigger: '.o_knowledge_cover img[style="object-position: 50% 0.01%;"]',
    extra_trigger: '.o_knowledge_cover:not(:has(.o_reposition_hint))',
}, {
    // Create another article
    trigger: '.o_knowledge_header .btn-create',
}, {
    // Change the name of the article
    trigger: '.o_breadcrumb_article_name > input',
    extra_trigger: '.o_article_active:contains("Untitled")',
    run: 'text odoo',
}, {
    // Go back to previous article
    trigger: '.o_knowledge_sidebar .o_article_name:contains("Birds")',
    extra_trigger: '.o_article_active:contains("odoo")',
}, {
    // Check that the cover is still positioned at the top and make the replace
    // cover visible
    trigger: '.o_knowledge_cover img[style="object-position: 50% 0.01%;"]',
    extra_trigger: '.o_article_active:contains("Birds")',
    run() {},
}, {
    // Click on replace cover button
    trigger: '.o_knowledge_replace_cover',
    allowInvisible: true,
}, {
    // Check that the cover selector has been opened, that no image is shown
    // since the search query (birds) do not match the name of the existing
    // cover, and close the cover selector
    trigger: '.modal-footer .btn-secondary',
    extra_trigger: '.modal-body .o_nocontent_help',
}, {
    // Make the remove cover button visible
    trigger: '.o_knowledge_edit_cover_buttons',
    run() {},
}, {
    // Click on remove cover button
    trigger: '.o_knowledge_remove_cover',
    allowInvisible: true,
}, {
    // Check cover has been removed from the article and open other article
    trigger: '.o_knowledge_sidebar .o_article_name:contains("odoo")',
    extra_trigger: '.o_knowledge_body:not(:has(.o_widget_knowledge_cover))',
}, {
    // Make the add cover button visible
    trigger: '.o_article_active:contains("odoo")',
    run() {},
}, {
    // Click on add cover button
    trigger: '.o_knowledge_add_cover',
    allowInvisible: true,
}, {
    // Check that odoo logo previously uploaded is shown in the selector as the
    // search query, which is the article name, is "odoo" which is also in the
    // cover attachment's name, and that clicking on it sets it as cover of the
    // current article
    trigger: '.modal-body .o_existing_attachment_cell img[title="odoo_logo.png"]',
}, {
    // Check cover has been set, and open previous article again
    trigger: '.o_knowledge_sidebar .o_article_name:contains("Birds")',
    extra_trigger: '.o_knowledge_cover',
}, {
    // Make the add cover button visible
    trigger: '.o_knowledge_edit_cover_buttons',
    run() {},
}, {
    // Click on add cover button
    trigger: '.o_knowledge_add_cover',
    allowInvisible: true,
}, {
    // Check odoo logo is not shown as the search query does not match its name
    // and remove search query
    trigger: '.modal-body input.o_we_search',
    extra_trigger: '.modal-body .o_nocontent_help',
    run: 'remove_text',
}, {
    // Check that odoo logo is now shown in the cover selector, and make the trash
    // button visible
    trigger: '.modal-body .o_existing_attachment_cell img[title="odoo_logo.png"]',
    run() {},
}, {
    // Click on delete cover button
    trigger: '.modal-body .o_existing_attachment_cell:has(img[title="odoo_logo.png"]) .o_existing_attachment_remove',
    allowInvisible: true,
}, {
    // Confirm deletion of cover (should ask for confirmation)
    trigger: '.modal-footer .btn-primary',
    extra_trigger: '.modal-title:contains("Confirmation")'
}, {
    // Check that no cover is shown anymore in the cover selector, and close it
    trigger: '.modal-footer .btn-secondary',
    extra_trigger: '.modal-body .o_we_existing_attachments:not(:has(.o_existing_attachment_cell))',
}, {
    // Open other article to check that its cover has been removed since it has
    // been deleted
    trigger: '.o_knowledge_sidebar .o_article_name:contains("odoo")',
}, {
    trigger: '.o_knowledge_body:not(:has(.o_widget_knowledge_cover))',
    extra_trigger: '.o_article_active:contains("odoo")',
    allowInvisible: true,
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/******************************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_cover_random_unplash.js  *
*  Lines: 78                                                                  *
******************************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_cover_random_unplash', ['@knowledge/../tests/tours/knowledge_tour_utils', '@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { endKnowledgeTour, makeVisible } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

/**
 * Tests the cover picker feature when unsplash credentials are set. In this
 * case, the "Add Cover" button should either add a random picture from a 
 * selected unsplash collection if no name is set on the article, either
 * add a random image using the article name as query word.
 */
registry.category("web_tour.tours").add('knowledge_random_cover_tour', {
    test: true,
    url: '/web',
    steps: () => [stepUtils.showAppsMenuItem(), {
    // Open Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, {
    // Click on the "Create" action
    trigger: '.o_knowledge_header .btn-create',
}, {
    // Make the add cover button visible (only visible on hover)
    trigger: '.o_article_active:contains("Untitled")',
    run: () => makeVisible('.o_knowledge_add_cover'),
}, {
    // Click on add cover button
    trigger: '.o_knowledge_add_cover',
}, {
    // Check that a cover has been added, and make the change cover button visible
    trigger: '.o_knowledge_cover .o_knowledge_cover_image',
    run: () => makeVisible('.o_knowledge_replace_cover'),
}, {
    // Click on change cover button
    trigger: '.o_knowledge_replace_cover',
}, {
    // Check that the cover selector has been opened, that no unsplash images can be
    // loaded as the article has no name and close the cover selector
    trigger: '.modal-footer .btn-secondary',
    extra_trigger: '.modal-body .o_load_done_msg',
}, {
    // Make the remove cover button visible
    trigger: '.o_knowledge_edit_cover_buttons',
    run: () => makeVisible('.o_knowledge_remove_cover'),
}, {
    // Remove the cover of the article
    trigger: '.o_knowledge_remove_cover',
}, {
    // Set the name of the article
    trigger: '.o_breadcrumb_article_name > input',
    run: 'text Birds',
}, {
    // Make the add cover button visible
    trigger: '.o_article_active:contains("Birds")',
    run: () => makeVisible('.o_knowledge_add_cover'),
}, {
    // Click on add cover button
    trigger: '.o_knowledge_add_cover',
}, {
    // Check that a cover has been added and make the change cover button visible
    trigger: '.o_knowledge_cover .o_knowledge_cover_image',
    run: () => makeVisible('.o_knowledge_replace_cover'),
}, {
    // Click on change cover button
    trigger: '.o_knowledge_replace_cover',
}, {
    // Check that the cover selector has been opened, that other unsplash
    // images can be loaded and close the cover selector
    trigger: '.modal-footer .btn-secondary',
    extra_trigger: '.modal-body .o_load_more',
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/*****************************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_embedded_views_tour.js  *
*  Lines: 61                                                                 *
*****************************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_embedded_views_tour', ['@web/core/registry', '@web_tour/tour_service/tour_utils', '@knowledge/../tests/tours/knowledge_tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");
const { endKnowledgeTour, openCommandBar } = require("@knowledge/../tests/tours/knowledge_tour_utils");

registry.category("web_tour.tours").add('knowledge_embedded_view_filters_tour', {
    test: true,
    url: '/web',
    steps: () => [stepUtils.showAppsMenuItem(), {
        // open Knowledge App
        trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
    }, { // open the command bar
        trigger: '.odoo-editor-editable > p',
        run: function () {
            openCommandBar(this.$anchor[0]);
        },
    }, { // add embedded list view of article items
        trigger: '.oe-powerbox-commandName:contains("Item List")'
    }, {
        trigger: '.btn-primary'
    }, { // Check that we have 2 elements in the embedded view
        trigger: 'tbody tr.o_data_row:nth-child(2)',
        run: () => {}
    }, { // add a simple filter
        trigger: '.o_searchview_input_container input',
        run: 'text 1'
    }, {
        trigger: 'li#1'
    }, { // Check that the filter is effective
        trigger: 'tbody:not(tr.o_data_row:nth-child(2))',
        run: () => {}
    }, { // Open the filtered article
        trigger: 'tbody > tr > td[name="display_name"]'
    }, { // Wait for the article to be open
        trigger: '.o_breadcrumb_article_name_container > span:contains("Child 1")',
        run: () => {}
    }, { // Open parent via the sidebar
        trigger: '.o_article_name:contains("EditorCommandsArticle")'
    }, { // Check that there is no filter in the searchBar
        trigger: '.o_searchview_input_container:not( > div)',
        run: () => {}
    }, { // Check that we have 2 elements in the embedded view
        trigger: 'tbody tr.o_data_row:nth-child(2)',
        run: () => {}
    }, { // Go back via the breadcrumb
        trigger: '.o_back_button'
    }, { // Check that there is the filter in the searchBar
        trigger: '.o_searchview_input_container > div',
        run: () => {}
    }, { // Check that the filter is effective
        trigger: 'tbody:not(tr.o_data_row:nth-child(2))',
        run: () => {}
    }, ...endKnowledgeTour()]
});

return __exports;
});
;

/************************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_load_more_tour.js  *
*  Lines: 281                                                           *
************************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_load_more_tour', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");

/**
 * Returns the jQuery selector to find the nth element in the specified depth.
 * e.g: The 50th element of depth 1 would be "Child Article 49".
 * 
 * @param {integer} n 
 * @param {String} depth 
 */
const getNthArticleSelector = (n, depth) => {
    let articleBaseName;
    if (depth === 0) {
        articleBaseName = 'Root Article';
    } else if (depth === 1) {
        articleBaseName = 'Child Article';
    } else {
        articleBaseName = 'Grand-Child Article';
    }

    // articles are index based so we subtract 1
    return `li.o_article:contains("${articleBaseName} ${n-1}")`;
};

/**
 * Helper to fetch an article item in the tree view.
 * We need to use "xpath" as a simple "querySelector" does not support finding
 * elements by their contained text.
 * 
 * @param {String} name 
 * @returns 
 */
const findArticleNodeNyName = (name) => {
    return document.evaluate(
        `//li[contains(@class, "o_article")][contains(., "${name}")]`,
        document
    ).iterateNext();
};

/**
 * Simple use case:
 * 
 * No specific "active article".
 * Check that on the root sub-tree, we only show 50 articles.
 * Then load more and verify we now have 100.
 * Etc. until everything is displayed.
 */
const LOAD_MORE_SIMPLE_STEPS = [{
    // check first article is displayed
    trigger: getNthArticleSelector(1, 0),
    run: () => {},
}, {
    // check 50th article is displayed
    trigger: getNthArticleSelector(50, 0),
    run: () => {},
}, {
    // check that the 51th article is NOT displayed, a bit tricky
    trigger: 'ul.o_tree_workspace',
    run: () => {
        const article51 = findArticleNodeNyName("Root Article 50");
        if (!article51) {
            document.querySelector('ul.o_tree_workspace').classList.add(
                'knowledge_load_more_tour_step_root_51_success');
        }
    }
}, {
    // check our previous step succeeded
    trigger: 'ul.o_tree_workspace.knowledge_load_more_tour_step_root_51_success',
    run: () => {},
}, {
    // click to load more articles
    trigger: 'ul.o_tree_workspace .o_knowledge_article_load_more',
}, {
    // check 51th article is displayed
    trigger: getNthArticleSelector(51, 0),
    run: () => {},
}, {
    // check 100th article is displayed
    trigger: getNthArticleSelector(100, 0),
    run: () => {},
}, {
    // check that the 101th article is NOT displayed, a bit tricky
    trigger: 'ul.o_tree_workspace',
    run: () => {
        const article101 = findArticleNodeNyName("Root Article 100");
        if (!article101) {
            document.querySelector('ul.o_tree_workspace').classList.add(
                'knowledge_load_more_tour_step_root_101_success');
        }
    }
}, {
    // check our previous step succeeded
    trigger: 'ul.o_tree_workspace.knowledge_load_more_tour_step_root_101_success',
    run: () => {},
}, {
    // check that there is only a single "load more" button
    trigger: 'ul.o_tree_workspace',
    run: () => {
        const loadMoreButtons = document.querySelectorAll(
            'ul.o_tree_workspace .o_knowledge_article_load_more');
        if (loadMoreButtons.length === 1) {
            document.querySelector('ul.o_tree_workspace').classList.add(
                'knowledge_load_more_tour_step_single_button_success');
        }
    }
}, {
    // check our previous step succeeded
    trigger: 'ul.o_tree_workspace.knowledge_load_more_tour_step_single_button_success',
    run: () => {},
}, {
    // click to load more articles
    trigger: 'ul.o_tree_workspace .o_knowledge_article_load_more',
}, {
    // check 101th article is displayed
    trigger: getNthArticleSelector(101, 0),
    run: () => {},
}, {
    // check 150th article is displayed
    trigger: getNthArticleSelector(150, 0),
    run: () => {},
}, {
    // click to load more articles
    trigger: 'ul.o_tree_workspace .o_knowledge_article_load_more',
}, {
    // check 153th article is displayed (last article of this sub-tree)
    trigger: getNthArticleSelector(153, 0),
    run: () => {},
}, {
    // check that we hide "load more" as we loaded everything in that sub-tree
    trigger: 'ul.o_tree_workspace',
    run: () => {
        const loadMoreButtons = document.querySelectorAll(
            'ul.o_tree_workspace .o_knowledge_article_load_more');
        if (loadMoreButtons.length === 0) {
            document.querySelector('ul.o_tree_workspace').classList.add(
                'knowledge_load_more_tour_step_no_button_success');
        }
    }
}, {
    // check our previous step succeeded
    trigger: 'ul.o_tree_workspace.knowledge_load_more_tour_step_no_button_success',
    run: () => {},
}];

/**
 * Advanced use case:
 *
 * The active article is within a hierarchy where itself is not within the 50 first articles
 * of its sub-tree but its ancestors are ALSO not within the 50 first articles of their own sub-tree.
 * 
 * Check that everything is correctly displayed, notably the fact that we "force" the display
 * of the active article and its ancestors.
 * 
 * The use case is as follows:
 * - 153 root articles
 * - 254 children, all of which are children of "Root Article 103" (the 104th root article)
 * - 344 grand-children, all of which are children of "Child Article 203" (the 204th child article)
 * 
 * When opening the tree, "Root Article 103", "Child Article 203" and "Grand-Child Article 218"
 * should all be forcefully displayed, even though outside of 50 first articles of their respective
 * sub-tree.
 */
const LOAD_MORE_ADVANCED_STEPS = [{
    trigger: 'input.knowledge_search_bar',
    run: 'text Grand-Child Article 218',
}, {
    trigger: 'ul.o_search_tree .o_article a',
}, {
    // check first article is displayed
    trigger: getNthArticleSelector(1, 0),
    run: () => {},
}, {
    // check first article ancestor is displayed (even though outside of 50 first)
    // it should be placed after the 50th article and after the load more
    trigger: `${getNthArticleSelector(50, 0)}+.o_knowledge_article_load_more+${getNthArticleSelector(104, 0)}`,
    run: () => {},
}, {
    // check second article ancestor is displayed (even though outside of 50 first)
    // it should be placed after the 50th child article and after the load more
    trigger: `${getNthArticleSelector(50, 1)}+.o_knowledge_article_load_more+${getNthArticleSelector(204, 1)}`,
    run: () => {},
}, {
    // check the active article is displayed (even though outside of 50 first)
    // it should be placed after the 50th grand-child article and after the load more
    trigger: `${getNthArticleSelector(50, 2)}+.o_knowledge_article_load_more+${getNthArticleSelector(219, 2)}`,
    run: () => {},
}, {
    // click on load more for the root articles
    trigger: `${getNthArticleSelector(50, 0)}+.o_knowledge_article_load_more`,
}, {
    // check first article ancestor is displayed (even though outside of 100 first)
    // it should be placed after 100th root article and after the load more
    trigger: `${getNthArticleSelector(100, 0)}+.o_knowledge_article_load_more+${getNthArticleSelector(104, 0)}`,
    run: () => {},
}, {
    // click on load more for the root articles
    trigger: `${getNthArticleSelector(100, 0)}+.o_knowledge_article_load_more`,
}, {
    // check first article ancestor is displayed at its correct spot
    trigger: `${getNthArticleSelector(103, 0)}+${getNthArticleSelector(104, 0)}`,
    run: () => {},
}, {
    // click on load more for the children articles
    trigger: `${getNthArticleSelector(50, 1)}+.o_knowledge_article_load_more`,
}, {
    // check second article ancestor is displayed (even though outside of 100 first)
    // it should be placed after the 100th child article and after the load more
    trigger: `${getNthArticleSelector(100, 1)}+.o_knowledge_article_load_more+${getNthArticleSelector(204, 1)}`,
    run: () => {},
}, {
    // click on load more for the children articles
    trigger: `${getNthArticleSelector(100, 1)}+.o_knowledge_article_load_more`,
}, {
    // check second article ancestor is displayed (even though outside of 100 first)
    // it should be placed after the 150th child article and after the load more
    trigger: `${getNthArticleSelector(150, 1)}+.o_knowledge_article_load_more+${getNthArticleSelector(204, 1)}`,
    run: () => {},
}, {
    // click on load more for the children articles
    trigger: `${getNthArticleSelector(150, 1)}+.o_knowledge_article_load_more`,
}, {
    // check second article ancestor is displayed (even though outside of 100 first)
    // it should be placed after the 200th child article and after the load more
    trigger: `${getNthArticleSelector(200, 1)}+.o_knowledge_article_load_more+${getNthArticleSelector(204, 1)}`,
    run: () => {},
}, {
    // click on load more for the children articles
    trigger: `${getNthArticleSelector(200, 1)}+.o_knowledge_article_load_more`,
}, {
    // check second article ancestor is displayed (even though outside of 100 first)
    // it should be placed at its correct spot after 203
    trigger: `${getNthArticleSelector(203, 1)}+${getNthArticleSelector(204, 1)}`,
    run: () => {},
}, {
    // click on load more for the grand-children articles
    trigger: `${getNthArticleSelector(50, 2)}+.o_knowledge_article_load_more`,
}, {
    // check active article is displayed (even though outside of 100 first)
    // it should be placed after the 100th grand-child article and after the load more
    trigger: `${getNthArticleSelector(100, 2)}+.o_knowledge_article_load_more+${getNthArticleSelector(219, 2)}`,
    run: () => {},
}, {
    // click on load more for the grand-children articles
    trigger: `${getNthArticleSelector(100, 2)}+.o_knowledge_article_load_more`,
}, {
    // check active article is displayed (even though outside of 100 first)
    // it should be placed after the 150th grand-child article and after the load more
    trigger: `${getNthArticleSelector(150, 2)}+.o_knowledge_article_load_more+${getNthArticleSelector(219, 2)}`,
    run: () => {},
}, {
    // click on load more for the grand-children articles
    trigger: `${getNthArticleSelector(150, 2)}+.o_knowledge_article_load_more`,
}, {
    // check active article is displayed (even though outside of 100 first)
    // it should be placed after the 200th grand-child article and after the load more
    trigger: `${getNthArticleSelector(200, 2)}+.o_knowledge_article_load_more+${getNthArticleSelector(219, 2)}`,
    run: () => {},
}, {
    // click on load more for the grand-children articles
    trigger: `${getNthArticleSelector(200, 2)}+.o_knowledge_article_load_more`,
}, {
    // check active article is displayed (even though outside of 100 first)
    // it should be placed at its correct spot after 218
    trigger: `${getNthArticleSelector(218, 2)}+${getNthArticleSelector(219, 2)}`,
    run: () => {},
}];

registry.category("web_tour.tours").add('knowledge_load_more_tour', {
    test: true,
    steps: () => [
        ...LOAD_MORE_SIMPLE_STEPS,
        ...LOAD_MORE_ADVANCED_STEPS,
    ]
});

return __exports;
});
;

/************************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_main_flow_tour.js  *
*  Lines: 239                                                           *
************************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_main_flow_tour', ['@knowledge/../tests/tours/knowledge_tour_utils', '@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

/**
 * Global Knowledge flow tour.
 * Features tested:
 * - Create an article
 * - Change its title / content
 * - Share an article with a created partner
 * - Create 2 children articles and invert their order
 * - Favorite 2 different articles and invert their order in the favorite section
 */

const { dragAndDropArticle, endKnowledgeTour, makeVisible } = require('@knowledge/../tests/tours/knowledge_tour_utils');
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('knowledge_main_flow_tour', {
    test: true,
    url: '/web',
    steps: () => [stepUtils.showAppsMenuItem(), {
    // open Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, {
    // click on the main "New" action
    trigger: '.o_knowledge_header .btn:contains("New")',
}, {
    // check that the article is correctly created (private section)
    trigger: 'section[data-section="private"] .o_article .o_article_name:contains("Untitled")',
    run: () => {},
}, {
    // check the autofocus
    trigger: '.note-editable.odoo-editor-editable:focus',
    run: () => {},
}, {
    trigger: '.note-editable.odoo-editor-editable h1',
    run: 'text My Private Article',  // modify the article content
}, {
    trigger: 'section[data-section="workspace"]',
    run: () => {
        // force the create button to be visible (it's only visible on hover)
        makeVisible('section[data-section="workspace"] .o_section_create');
    },
}, {
    // create an article in the "Workspace" section
    trigger: 'section[data-section="workspace"] .o_section_create',
}, {
    // check that the article is correctly created (workspace section), and that the previous
    // article has been renamed using its title (first h1 in body).
    trigger: 'section[data-section="workspace"] .o_article .o_article_name:contains("Untitled")',
    extra_trigger: 'section[data-section="private"] .o_article .o_article_name:contains("My Private Article")',
    run: () => {},
}, {
    // check the autofocus
    trigger: '.note-editable.odoo-editor-editable:focus',
    run: () => {},
}, {
    trigger: '.o_breadcrumb_article_name > input',
    run: 'text My Workspace Article',  // modify the article name
}, {
    trigger: '.note-editable.odoo-editor-editable',
    run: 'text Content of My Workspace Article',  // modify the article content
}, {
    trigger: '.o_article:contains("My Workspace Article")',
    run: () => {
        // force the create button to be visible (it's only visible on hover)
        $('.o_article:contains("My Workspace Article") a.o_article_create').css('display', 'block');
    },
}, {
    // create child article
    trigger: '.o_article:contains("My Workspace Article") a.o_article_create',
}, {
    // check that the article is correctly created (workspace section)
    trigger: 'section[data-section="workspace"] .o_article .o_article_name:contains("Untitled")',
    run: () => {},
}, {
    // check the autofocus
    trigger: '.note-editable.odoo-editor-editable:focus',
    run: () => {},
}, {
    trigger: '.o_breadcrumb_article_name > input',
    run: 'text Child Article 1',  // modify the article name
}, {
    trigger: '.o_article:contains("My Workspace Article")',
}, {
    // create child article (2)
    trigger: '.o_article:contains("My Workspace Article") a.o_article_create',
}, {
    trigger: 'section[data-section="workspace"] .o_article .o_article_name:contains("Untitled")',
    run: () => {},
}, {
    // check the autofocus
    trigger: '.note-editable.odoo-editor-editable:focus',
    run: () => {},
}, {
    trigger: '.o_breadcrumb_article_name > input',
    run: 'text Child Article 2',  // modify the article name
}, {
    // move child article 2 above child article 1
    trigger: '.o_article_handle:contains("Child Article 2")',
    run: () => {
        dragAndDropArticle(
            $('.o_article_handle:contains("Child Article 2")'),
            $('.o_article_handle:contains("Child Article 1")'),
        );
    },
}, {
    // verify that the move was done
    trigger: '.o_article:has(.o_article_name:contains("My Workspace Article")) ul > :eq(0):contains("Child Article 2")',
    run: () => {},
}, {
    // go back to main workspace article
    trigger: 'section[data-section="workspace"] .o_article .o_article_name:contains("My Workspace Article")',
}, {
    trigger: '.o_knowledge_editor:contains("Content of My Workspace Article")',
    run: () => {},  // wait for article to be correctly loaded
}, {
    // check the autofocus
    trigger: '.note-editable.odoo-editor-editable:focus',
    run: () => {},
}, {
    // open the share dropdown
    trigger: '.o_knowledge_header .btn:contains("Share")',
}, {
    // click on 'Invite'
    trigger: '.o_knowledge_share_panel .btn:contains("Invite")',
}, {
    // Type the invited person's name
    trigger: '.o_field_many2many_tags_email[name=partner_ids] input',
    run: 'text micheline@knowledge.com',
}, {
    // Create the partner
    trigger: '.ui-autocomplete.dropdown-menu a:contains("micheline@knowledge.com")',
    in_modal: false,
}, {
    // Submit the invite wizard
    trigger: 'button:contains("Invite")',
    extra_trigger: '.o_field_tags span.o_badge_text',
}, {
    // add to favorite
    trigger: '.o_knowledge_toggle_favorite',
}, {
    // check article was correctly added into favorites
    trigger: 'section[data-section="favorites"] .o_article .o_article_name:contains("My Workspace Article")',
    run: () => {},
}, {
    // open the share dropdown
    trigger: '.o_knowledge_header .btn:contains("Share")',
}, {
    // open the share dropdown
    trigger: '.o_member_email:contains("micheline@knowledge.com")',
    in_modal: false,
    run: () => {},
}, {
    // go back to private article
    trigger: 'section[data-section="private"] .o_article .o_article_name:contains("My Private Article")',
}, {
    trigger: '.o_knowledge_editor:contains("My Private Article")',
    run: () => {},  // wait for article to be correctly loaded
}, {
    // check the autofocus
    trigger: '.note-editable.odoo-editor-editable:focus',
    run: () => {},
}, {
    // add to favorite
    trigger: '.o_knowledge_toggle_favorite',
}, {
    // wait for the article to be registered as favorited
    trigger: '.o_knowledge_toggle_favorite .fa-star',
    run: () => {},
}, {
    // move private article above workspace article in the favorite section
    trigger: 'section[data-section="favorites"] .o_article_handle:contains("My Private Article")',
    run: () => {
        dragAndDropArticle(
            $('section[data-section="favorites"] .o_article_handle:contains("My Private Article")'),
            $('section[data-section="favorites"] .o_article_handle:contains("My Workspace Article")'),
        );
    },
}, {
    // verify that the move was done
    trigger: 'section[data-section="favorites"] ul > :eq(0):contains("My Private Article")',
    run: () => {},
}, {
    // go back to main workspace article
    trigger: 'section[data-section="workspace"] .o_article .o_article_name:contains("My Workspace Article")',
}, {
    trigger: ':contains("Content of My Workspace Article")',
    run() {},
}, {
    // check the autofocus
    trigger: '.note-editable.odoo-editor-editable:focus',
    run: () => {},
}, {
    // click on the main "New" action
    trigger: '.o_knowledge_header .btn:contains("New")',
}, {
    trigger: 'section[data-section="private"] .o_article .o_article_name:contains("Untitled")',
    run: () => {}, // check that the article is correctly created (private section)
}, {
    // check the autofocus
    trigger: '.note-editable.odoo-editor-editable:focus',
    run: () => {},
}, {
    trigger: '.o_breadcrumb_article_name > input',
    run: 'text Article to be moved',  // modify the article name
}, {// move article
    trigger: 'a#dropdown_tools_panel',
    run: 'click'
}, {
    trigger: '.btn-move',
    run: 'click',
}, {
    trigger: '.o_select_menu_item:contains("Article 3")',
    run: 'click',
}, {
    trigger: '.o_select_menu_toggler_slot:contains("Article 3")',
    run: () => {},
}, {
    trigger: '.modal-content .btn-primary:contains("Move Article")',
    run: 'click',
}, {
    trigger: 'section[data-section="workspace"] .o_article .o_article_name:contains("Article to be moved")',
    run: 'click'
}, {
    // open the trash
    trigger: '.o_knowledge_sidebar_trash div[role="button"]',
}, {
    // verify that the trash list has been opened correctly and that items are correctly ordered
    trigger: '.o_data_row:first .o_data_cell[name="display_name"]:contains("Article 2")',
    extra_trigger: '.o_breadcrumb .active:contains("Trash")',
    run: () => {},
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/*******************************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_main_flow_tour_portal.js  *
*  Lines: 127                                                                  *
*******************************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_main_flow_tour_portal', ['@knowledge/../tests/tours/knowledge_tour_utils', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

/**
 * Global Knowledge flow tour - Adapter for portal user
 * Features tested:
 * - Create a private article
 * - Change its title / content
 * - Write on a "workspace" article to which we have access
 * - Create children articles to a "workspace" article to which we have access
 * - Favorite 2 different articles and invert their order in the favorite section
 */

const { dragAndDropArticle } = require('@knowledge/../tests/tours/knowledge_tour_utils');
const { registry } = require("@web/core/registry");


registry.category("web_tour.tours").add('knowledge_main_flow_tour_portal', {
    test: true,
    url: '/knowledge/home',
    steps: () => [{
    // click on the main "New" action
    trigger: '.o_knowledge_header .btn:contains("New")',
}, {
    trigger: 'section[data-section="private"] .o_article .o_article_name:contains("Untitled")',
    run: () => {},  // check that the article is correctly created (private section)
}, {
    trigger: '.o_breadcrumb_article_name > input',
    run: 'text My Private Article',  // modify the article name
}, {
    trigger: '.note-editable.odoo-editor-editable',
    run: 'text Content of My Private Article',  // modify the article content
}, {
    trigger: 'body',
    run: () => {
        // Make sure the internal article is not visible
        if (document.querySelectorAll(
            'section[data-section="workspace"] .o_article .o_article_name'
        ).length !== 1) {
            throw new Error("Internal Workspace Article is not supposed to be visible for portal user.");
        }
    }
}, {
    trigger: '#knowledge_search_bar' // make sure the search article feature works
}, {
    trigger: '.o_select_menu_item:contains("Workspace Article")',
    in_modal: false,
}, {
    trigger: 'button:contains("Open")'
}, {
    trigger: '.o_knowledge_editor:contains("Content of Workspace Article")',
    run: () => {},  // wait for article to be correctly loaded
}, {
    trigger: '.note-editable.odoo-editor-editable',
    run: 'text Edited Content of Workspace Article',  // modify the article content
}, {
    trigger: '.o_article:contains("Workspace Article")',
    run: () => {
        // force the create button to be visible (it's only visible on hover)
        $('.o_article:contains("Workspace Article") a.o_article_create').css('display', 'block');
    },
}, {
    // create child article
    trigger: '.o_article:contains("Workspace Article") a.o_article_create',
}, {
    trigger: 'section[data-section="workspace"] .o_article .o_article_name:contains("Untitled")',
    run: () => {},  // check that the article is correctly created (workspace section)
}, {
    trigger: '.o_breadcrumb_article_name > input',
    run: 'text Child Article 1',  // modify the article name
}, {
    // create child article (2)
    trigger: '.o_article:contains("Workspace Article") a.o_article_create',
}, {
    trigger: 'section[data-section="workspace"] .o_article .o_article_name:contains("Untitled")',
    run: () => {},  // check that the article is correctly created (workspace section)
}, {
    trigger: '.o_breadcrumb_article_name > input',
    run: 'text Child Article 2',  // modify the article name
}, {
    // go back to main workspace article
    trigger: 'section[data-section="workspace"] .o_article .o_article_name:contains("Workspace Article")',
}, {
    trigger: '.o_knowledge_editor:contains("Edited Content of Workspace Article")',
    run: () => {},  // wait for article to be correctly loaded
}, {
    // add to favorite
    trigger: '.o_knowledge_toggle_favorite',
}, {
    // check article was correctly added into favorites
    trigger: 'div.o_favorite_container .o_article .o_article_name:contains("Workspace Article")',
    run: () => {},
}, {
    // go back to private article
    trigger: 'section[data-section="private"] .o_article .o_article_name:contains("My Private Article")',
}, {
    trigger: '.o_knowledge_editor:contains("My Private Article")',
    run: () => {},  // wait for article to be correctly loaded
}, {
    // add to favorite
    trigger: '.o_knowledge_toggle_favorite',
}, {
    // wait for the article to be registered as favorited
    trigger: '.o_knowledge_toggle_favorite .fa-star',
    run: () => {},
}, {
    // move private article above workspace article in the favorite section
    trigger: 'div.o_favorite_container .o_article_handle:contains("My Private Article")',
    run: () => {
        dragAndDropArticle(
            $('div.o_favorite_container .o_article_handle:contains("My Private Article")'),
            $('div.o_favorite_container .o_article_handle:contains("Workspace Article")'),
        );
    },
}, {
    // verify that the move was done
    trigger: 'div.o_favorite_container ul > :eq(0):contains("My Private Article")',
    run: () => {},
}, {
    // go back to '/my' page, as ending a tour on a form view can lead to issues
    trigger: 'a[title="Home"]',
}]});

return __exports;
});
;

/*************************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_pick_emoji_tour.js  *
*  Lines: 57                                                             *
*************************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_pick_emoji_tour', ['@knowledge/../tests/tours/knowledge_tour_utils', '@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { endKnowledgeTour } = require('@knowledge/../tests/tours/knowledge_tour_utils');
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('knowledge_pick_emoji_tour', {
    test: true,
    url: '/web',
    steps: () => [stepUtils.showAppsMenuItem(), {
    // open Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, {
    // click on the main "New" action
    trigger: '.o_knowledge_header .btn:contains("New")',
}, {
    trigger: 'section[data-section="private"] .o_article .o_article_name:contains("Untitled")',
    run: () => {}, // check that the article is correctly created (private section)
}, {
    trigger: '.o_knowledge_add_buttons',
    run: () => {
        // force the cover buttons to be visible (it's only visible on hover)
        $('.o_knowledge_add_icon, .o_knowledge_add_cover').css({
            opacity: 1,
            visibility: 'visible'
        });
    },
}, {
    // add a random emoji
    trigger: '.o_knowledge_add_icon',
    run: 'click',
}, {
    trigger: '.o_knowledge_body .o_article_emoji',
    run: 'click',
}, {
    trigger: '.o-Emoji[data-codepoints="😃"]',
    run: 'click',
}, {
    // check that the emoji has been properly changed in the article body
    trigger: '.o_knowledge_body .o_article_emoji:contains(😃)',
    run: () => {},
}, {
    // check that the emoji has been properly changed in the header
    trigger: '.o_knowledge_header .o_article_emoji:contains(😃)',
    run: () => {},
}, {
    // check that the emoji has been properly changed in the aside block
    trigger: '.o_knowledge_sidebar .o_article_emoji:contains(😃)',
    run: () => {}
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/*************************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_properties_tour.js  *
*  Lines: 61                                                             *
*************************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_properties_tour', ['@knowledge/../tests/tours/knowledge_tour_utils', '@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { dragAndDropArticle, endKnowledgeTour } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('knowledge_properties_tour', {
    test: true,
    url: '/web',
    steps: () => [stepUtils.showAppsMenuItem(), {
    // open Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { // ensure display of ParentArticle child articles
    trigger: '.o_article_handle:contains("ParentArticle") .o_article_caret',
    run: function (actions) {
        const button = this.$anchor[0];
        if (button.querySelector('i.fa-caret-right')) {
            actions.click(this.$anchor);
        }
    }
}, { // go to ChildArticle
    trigger: '.o_article .o_article_name:contains("ChildArticle")',
    run: 'click',
}, { // wait ChildArticle loading
    trigger: '.breadcrumb .active:contains("ChildArticle")',
    run: () => {},
}, { // click on add properties
    trigger: 'button.o_knowledge_add_properties',
    run: 'click',
}, {
    trigger: '.o_field_property_add button',
    run: 'click'
}, { // modify property name
    trigger: '.o_field_property_definition_header',
    run: 'text_blur myproperty',
}, { // verify property and finish property edition
    trigger: '.o_knowledge_editor .odoo-editor-editable',
    extra_trigger: '.o_field_property_label:contains("myproperty")',
    run: 'click',
}, { // go to InheritPropertiesArticle
    trigger: '.o_article .o_article_name:contains("InheritPropertiesArticle")',
    run: 'click',
}, { // wait InheritPropertiesArticle loading and move InheritPropertiesArticle under ParentArticle
    trigger: '.breadcrumb .active:contains("InheritPropertiesArticle")',
    run: () => {
        dragAndDropArticle(
            $('.o_article_handle:contains("InheritPropertiesArticle")'),
            $('.o_article_handle:contains("ChildArticle")'),
        );
    },
}, { // verify property
    trigger: '.o_knowledge_properties .o_field_property_label:contains("myproperty")',
    run: () => {},
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/********************************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_readonly_favorite_tour.js  *
*  Lines: 48                                                                    *
********************************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_readonly_favorite_tour', ['@knowledge/../tests/tours/knowledge_tour_utils', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { dragAndDropArticle, endKnowledgeTour } = require('@knowledge/../tests/tours/knowledge_tour_utils');
const { registry } = require("@web/core/registry");

// Checks that one can add an readonly article to its favorites

registry.category("web_tour.tours").add('knowledge_readonly_favorite_tour', {
    test: true,
    steps: () => [{
    // Make sure we are on the readonly article 1, that is not favorited, and
    // click on the toggle favorite button.
    trigger: 'a.o_knowledge_toggle_favorite:has(.fa-star-o)',
    extra_trigger: '.o_article_active:contains("Readonly Article 1")',
}, {
    // Check that the article has been added to the favorites
    trigger: 'section[data-section="favorites"]:contains("Readonly Article 1")',
    extra_trigger: 'a.o_knowledge_toggle_favorite:has(.fa-star)',
    run: () => {},
}, {
    // Open the other readonly article
    trigger: '.o_knowledge_sidebar .o_article_name:contains("Readonly Article 2")',
}, {
    // Make sure we are on the readonly article 1, that is not favorited, and
    // click on the toggle favorite button.
    trigger: 'a.o_knowledge_toggle_favorite:has(.fa-star-o)',
    extra_trigger: '.o_article_active:contains("Readonly Article 2")',
}, {
    // Check that the article has been added to the favorites under the other
    // one and try to resquence the favorite articles
    trigger: 'section[data-section="favorites"] li:last:contains("Readonly Article 2")',
    run: () => dragAndDropArticle(
        $('section[data-section="favorites"] li:last .o_article_handle'),
        $('section[data-section="favorites"] li:first .o_article_handle')
    ),
}, {
    // Check that articles have been reordered correctly
    trigger: 'section[data-section="favorites"] li:last:contains("Readonly Article 1")',
    extra_trigger: 'section[data-section="favorites"] li:first:contains("Readonly Article 2")',
    run: () => {},
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/***********************************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_readonly_item_kanban_tour.js  *
*  Lines: 33                                                                       *
***********************************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_readonly_item_kanban_tour', ['@knowledge/../tests/tours/knowledge_tour_utils', '@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { endKnowledgeTour } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");
/**
 * This tour checks that a user that has readonly access on an article cannot
 * create items from the item kanban.
 */
registry.category("web_tour.tours").add('knowledge_readonly_item_kanban_tour', {
    url: '/web',
    test: true,
    steps: () => [stepUtils.showAppsMenuItem(), { // open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { // scroll to the embedded view to load it
    trigger: '.o_knowledge_behavior_type_embedded_view',
    run: function () {
        this.$anchor[0].scrollIntoView();
    },
}, { // wait for the kanban view to be mounted
    trigger: '.o_knowledge_behavior_type_embedded_view .o_kanban_renderer',
    run: () => {},
}, { // check that the "new" button is not shown
    trigger: '.o_control_panel_main:not(:has(.o-kanban-button-new))',
    run: () => {},
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/*********************************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_readonly_item_list_tour.js  *
*  Lines: 34                                                                     *
*********************************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_readonly_item_list_tour', ['@knowledge/../tests/tours/knowledge_tour_utils', '@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { endKnowledgeTour } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

/**
 * This tour checks that a user that has readonly access on an article cannot
 * create items from the item list.
 */
registry.category("web_tour.tours").add('knowledge_readonly_item_list_tour', {
    url: '/web',
    test: true,
    steps: () => [stepUtils.showAppsMenuItem(), { // open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { // scroll to the embedded view to load it
    trigger: '.o_knowledge_behavior_type_embedded_view',
    run: function () {
        this.$anchor[0].scrollIntoView();
    },
}, { // wait for the list view to be mounted
    trigger: '.o_knowledge_behavior_type_embedded_view .o_list_renderer',
    run: () => {},
}, { // check that the "new" button is not shown
    trigger: '.o_control_panel_main:not(:has(.o_list_button_add))',
    run: () => {},
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/*******************************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_sidebar_readonly_tour.js  *
*  Lines: 54                                                                   *
*******************************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_sidebar_readonly_tour', ['@knowledge/../tests/tours/knowledge_tour_utils', '@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { dragAndDropArticle } = require('@knowledge/../tests/tours/knowledge_tour_utils');
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('knowledge_sidebar_readonly_tour', {
    test: true,
    url: '/web',
    steps: () => [stepUtils.showAppsMenuItem(), {
    // Open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, {
    // Unfold the private article and check that articles are in the correct
    // order to make the move possible
    trigger: '.o_article.readonly .o_article_caret',
    extra_trigger: '.o_knowledge_tree .o_article:contains("Workspace Article") + .o_article:contains("Private Article")',
}, {
    // Check that article has been unfolded and move an article under a redonly article (fails)
    trigger: '.o_article:contains("Private Child")',
    run: () => {
        dragAndDropArticle(
            $('section[data-section="workspace"] .o_article_name:contains("Workspace Article")'),
            $('section[data-section="workspace"] .o_article_name:contains("Private Article")'),
        );
    },
}, {
    // Close the move cancelled modal
    trigger: '.modal-footer .btn-primary',
    extra_trigger: '.modal-title:contains("Move cancelled")',
}, {
    // Move a readonly article (fails)
    trigger: '.o_knowledge_tree .o_article:contains("Workspace Article") + .o_article:contains("Private Article")',
    run: () => {
        dragAndDropArticle(
            $('section[data-section="workspace"] .o_article_name:contains("Private Article")'),
            $('section[data-section="workspace"] .o_article_name:contains("Workspace Article")'),
        );
    },
}, {
    // Check that article did not move and try to change icon of readable article (fails)
    trigger: '.o_article:contains("Private Article") .o_article_emoji:contains("📄")',
    extra_trigger: '.o_knowledge_tree .o_article:contains("Workspace Article") + .o_article:contains("Private Article")',
}, {
    // Check that emoji picker did not show up
    trigger: 'body:not(:has(.o-EmojiPicker))',
    run: () => {},
}]});

return __exports;
});
;

/**********************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_sidebar_tour.js  *
*  Lines: 945                                                         *
**********************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_sidebar_tour', ['@knowledge/../tests/tours/knowledge_tour_utils', '@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { changeInternalPermission, dragAndDropArticle, makeVisible } = require('@knowledge/../tests/tours/knowledge_tour_utils');
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");


/**
 * Sidebar tour.
 * Tests sidebar features and responsiveness.
 * Todo: add responsiveness checks from usage of moveArticleDialog
 * when select2 will be replaced (can currently not select options)
 */

registry.category("web_tour.tours").add('knowledge_sidebar_tour', {
    test: true,
    url: '/web',
    steps: () => [stepUtils.showAppsMenuItem(), {
    // Open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
},
// Create a workspace article
{
    // Force the create button to be visible (it's only visible on hover)
    trigger: 'section[data-section="workspace"]',
    run: () => {
        makeVisible('section[data-section="workspace"] .o_section_create');
    },
}, {
    // Create an article in the "Workspace" section
    trigger: 'section[data-section="workspace"] .o_section_create',
}, {
    // Check that the article is created inside the Workspace
    trigger: 'section[data-section="workspace"] .o_article .o_article_name:contains("Untitled")',
    run: () => {},
}, {
    // Rename the article
    trigger: '.o_breadcrumb_article_name > input',
    run: 'text Workspace Article',
}, {
    // Check that the name has been updated in the sidebar
    trigger: '.o_article_active:contains("Workspace Article")',
    run: () => {},
}, {
    // Add content to the article
    trigger: '.note-editable.odoo-editor-editable',
    run: 'text Content of Workspace Article',
},
// Create a private article
{
    // Force the create button to be visible (it's only visible on hover)
    trigger: 'section[data-section="private"]',
    run: () => {
        makeVisible('section[data-section="private"] .o_section_create');
    },
}, {
    // Create an article in the "Private" section
    trigger: 'section[data-section="private"] .o_section_create',
}, {
    // Check that the article is created inside the private section
    trigger: 'section[data-section="private"] .o_article .o_article_name:contains("Untitled")',
    run: () => {},
}, {
    // Rename the article
    trigger: '.o_breadcrumb_article_name > input',
    run: 'text Private Article',
},
// Create a shared article
{
    // Check that the shared section does not exists
    trigger: '.o_knowledge_tree:not(:has(section[data-section="shared"]))',
    extra_trigger: '.o_article_active:contains("Private Article")',
    run: () => {},
}, {
    // First create a private one
    trigger: 'section[data-section="private"] .o_section_create',
}, {
    // Rename the article
    trigger: '.o_breadcrumb_article_name > input',
    extra_trigger: '.o_article_active:contains("Untitled")',
    run: 'text Shared Article',
}, {
    // Open the share dropdown
    trigger: '.o_knowledge_header .btn:contains("Share")',
}, {
    // Click on 'Invite'
    trigger: '.o_knowledge_share_panel .btn:contains("Invite")',
}, {
    // Type the invited person's name
    trigger: '.o_field_many2many_tags_email[name=partner_ids] input',
    run: 'text henri@knowledge.com',
}, {
    // Create the partner
    trigger: '.ui-autocomplete.dropdown-menu a:contains("henri@knowledge.com")',
    in_modal: false,
}, {
    // Submit the invite wizard
    trigger: 'button:contains("Invite")',
    extra_trigger: '.o_field_tags span.o_badge_text',
}, {
    // Check that the article has been added to a new "Shared" section
    trigger: 'section[data-section="shared"]:contains("Shared Article")',
    run: () => {},
},
// Create a child of a workspace article
{
    // Force the create button to be visible (it's only visible on hover)
    trigger: '.o_article:contains("Workspace Article")',
    run: () => {
        $('.o_article:contains("Workspace Article") a.o_article_create').css('display', 'block');
    },
}, {
    // Create a child
    trigger: '.o_article:contains("Workspace Article") a.o_article_create',
}, {
    // Check that the child has been added
    trigger: '.o_article:contains("Workspace Article") .o_article:contains("Untitled")',
    run: () => {},
}, {
    // Rename the article
    trigger: '.o_breadcrumb_article_name > input',
    run: 'text Workspace Child',
},
// Create a child of a private article
{
    // Force the create button to be visible (it's only visible on hover)
    trigger: '.o_article:contains("Private Article")',
    run: () => {
        $('.o_article:contains("Private Article") a.o_article_create').css('display', 'block');
    },
}, {
    // Create a child
    trigger: '.o_article:contains("Private Article") a.o_article_create',
}, {
    // Check that the child has been added
    trigger: '.o_article:contains("Private Article") .o_article:contains("Untitled")',
    run: () => {},
}, {
    // Rename the article
    trigger: '.o_breadcrumb_article_name > input',
    run: 'text Private Child 1',
},
// Create a child of a shared article
{
    // Force the create button to be visible (it's only visible on hover)
    trigger: '.o_article:contains("Shared Article")',
    run: () => {
        $('.o_article:contains("Shared Article") a.o_article_create').css('display', 'block');
    },
}, {
    // Create a child
    trigger: '.o_article:contains("Shared Article") a.o_article_create',
}, {
    // Check that the child has been added
    trigger: '.o_article:contains("Shared Article") .o_article:contains("Untitled")',
    run: () => {},
}, {
    // Rename the article
    trigger: '.o_breadcrumb_article_name > input',
    run: 'text Shared Child',
},
// Open an article by clicking on it
{
    // Click in the sidebar
    trigger: '.o_article_name:contains("Workspace Article")',
}, {
    // Check that article is correctly opened
    trigger: '.note-editable.odoo-editor-editable:contains("Content of Workspace Article")',
    extra_trigger: '.o_article_active:contains("Workspace Article")',
    run: () => {},
},
// Open an article using the searchBox
{
    // Open the CP
    trigger: '#knowledge_search_bar',
}, {
    // Click on an article
    trigger: '.o_command_name:not(.small):contains("Private Article")',
}, {
    // Check article was opened
    trigger: '.o_article_active .o_article_name:contains("Private Article")',
    run: () => {},
}, 
// Open the trash
{
    trigger: '.o_knowledge_sidebar_trash > div[role="button"]',
}, {
    // Check that trash has been opened
    trigger: '.o_last_breadcrumb_item.active:contains("Trash")',
    run: () => {},
}, {
    // Come back to the form view
    trigger: '.breadcrumb-item.o_back_button',
},
// Add/remove an article to/from the favorites
{
    // Make sure the favorite section does not exists
    trigger: '.o_knowledge_tree:not(:has(section[data-section="favorites"]))',
    run: () => {},
}, {
    // Click on the toggleFavorite button
    trigger: 'a.o_knowledge_toggle_favorite',
}, {
    // Check that the article has been added to the added favorite section
    trigger: 'section[data-section="favorites"] .o_article:contains("Private Article")',
    run: () => {},
}, {
    // Click on the toggleFavorite button again
    trigger: 'a.o_knowledge_toggle_favorite',
}, {
    // Check that the favorite section has been removed
    trigger: '.o_knowledge_tree:not(:has(section[data-section="favorites"]))',
    extra_trigger: 'a.o_knowledge_toggle_favorite .fa-star-o',
},
// Unfold/Fold favorite article
{
    // Add article to favorite
    trigger: 'a.o_knowledge_toggle_favorite',
}, {
    // Check that favorite is initially folded, and unfold it
    trigger: 'section[data-section="favorites"] .o_article_caret .fa-caret-right',
    extra_trigger: 'section[data-section="favorites"] .o_article:not(:has(.o_article))',
}, {
    // Check that caret changed and that child is displayed
    trigger: 'section[data-section="favorites"] .o_article:contains("Private Article") .o_article_name:contains("Private Child 1")',
    extra_trigger: 'section[data-section="favorites"] .o_article_caret .fa-caret-down',
    run: () => {},
}, {
    // Click on the caret again to refold the article
    trigger: 'section[data-section="favorites"] .o_article_caret',
}, {
    // Check that caret changed and that child is hidden again
    trigger: 'section[data-section="favorites"] .o_article:not(:has(.o_article))',
    extra_trigger: 'section[data-section="favorites"] .o_article_caret .fa-caret-right',
    run: () => {},
}, {
    // Check that article in main tree is still unfolded
    trigger: 'section[data-section="private"] .o_article:contains("Private Child 1")',
    run: () => {},
},

// Create a child from the favorite tree
{
    // Force the create button to be visible (it's only visible on hover)
    trigger: 'section[data-section="favorites"] .o_article:contains("Private Article")',
    extra_trigger: 'section[data-section="favorites"] .o_article_caret .fa-caret-right',
    run: () => {
        $('section[data-section="favorites"] .o_article:contains("Private Article") a.o_article_create').css('display', 'block');
    },
}, {
    // Create a child
    trigger: 'section[data-section="favorites"] .o_article:contains("Private Article") a.o_article_create',
}, {
    // Check that article has been unfolded
    trigger: 'section[data-section="favorites"] .o_article:contains("Private Article") .fa-caret-down',
    run: () => {},
}, {
    // Check that previously existing child is displayed
    trigger: 'section[data-section="favorites"] .o_article:contains("Private Article") .o_article_name:contains("Private Child 1")',
    run: () => {},
}, {
    // Check that the child has been added in the favorite tree
    trigger: 'section[data-section="favorites"] .o_article:contains("Private Article") .o_article_name:contains("Untitled")',
    run: () => {},
}, {
    // Check that the child has been added in the private section
    trigger: 'section[data-section="private"] .o_article:contains("Private Article") .o_article_name:contains("Untitled")',
    run: () => {},
}, {
    // Rename the article
    trigger: '.o_breadcrumb_article_name > input',
    run: 'text Private Child 2',
}, {
    // Check that the article has been renamed in the favorite tree
    trigger: 'section[data-section="favorites"] .o_article_name:contains("Private Child 2")',
    run: () => {},
}, {
    // Check that the article has been renamed in the private section
    trigger: 'section[data-section="private"] .o_article_name:contains("Private Child 2")',
    run: () => {},
},
// Fold/unfold an article
{
    // Click on the caret (should be caret down)
    trigger: 'section[data-section="private"] .o_article_caret',
    extra_trigger: 'section[data-section="private"] .o_article_caret .fa-caret-down',
}, {
    // Check that caret changed, and that children are hidden, and that favorite has not been folded
    trigger: 'section[data-section="private"] .o_article:not(:has(.o_article))',
    extra_trigger: 'section[data-section="private"] .o_article_caret .fa-caret-right',
    run: () => {},
}, {
    // Check that favorite has not been folded
    trigger: 'section[data-section="favorites"] .o_article .o_article',
    extra_trigger: 'section[data-section="favorites"] .o_article_handle:contains("Private Article") .fa-caret-down',
}, {
    // Fold favorite article (to later check that unfolding article won't unfold favorite)
    trigger: 'section[data-section="favorites"] .o_article_caret',
}, {
    // Click on the caret again
    trigger: 'section[data-section="private"] .o_article_caret',
}, {
    // Check that articles are shown again
    trigger: 'section[data-section="private"] .o_article .o_article',
    extra_trigger: 'section[data-section="private"] .o_article_caret .fa-caret-down',
    run: () => {},
}, {
    // Check that favorite has not been unfolded
    trigger: 'section[data-section="favorites"] .o_article:not(:has(.o_article))',
    extra_trigger: 'section[data-section="favorites"] .o_article_handle:contains("Private Article") .fa-caret-right',
    run: () => {},
},
// Create a child of a folded article
{
    // Fold article again
    trigger: 'section[data-section="private"] .o_article_caret',
}, {
    trigger: 'section[data-section="private"] .o_article_caret .fa-caret-right',
    run: () => {
        $('section[data-section="private"] .o_article:contains("Private Article") .o_article_create').css('display', 'block');
    }
}, {
    // Click on the create button
    trigger: 'section[data-section="private"] .o_article:contains("Private Article") .o_article_create',
}, {
    // Check that article has been unfolded and that previously existing children are shown
    trigger: 'section[data-section="private"] .o_article .o_article:contains("Private Child 1")',
    extra_trigger: 'section[data-section="private"] .o_article_caret .fa-caret-down',
    run: () => {},
}, {
    // Check that article has been added in both trees
    trigger: 'section[data-section="private"] .o_article .o_article:contains("Untitled")',
    extra_trigger: 'section[data-section="favorites"] .o_article .o_article:contains("Untitled")',
    run: () => {},
}, {
    // Rename the article
    trigger: '.o_breadcrumb_article_name > input',
    run: 'text Private Child 3',
},
// Add a random icon
{
    // Force the add icon button to be visible (it's only visible on hover)
    trigger: '.o_knowledge_add_buttons',
    run: () => {
        makeVisible('.o_knowledge_add_icon');
    },
}, {
    // Click on the "add Icon" button
    trigger: '.o_knowledge_add_icon',
}, {
    // Check that the icon has been updated in the sidenar
    trigger: '.o_knowledge_body div[name="icon"]',
    run: () => {
        const bodyIcon = document.querySelector('.o_knowledge_body div[name="icon"]').innerText;
        const sidebarIcon = document.querySelector('.o_article_active .o_article_emoji').innerText;
        if (bodyIcon !== sidebarIcon) {
            console.error("Sidebar icon has not been updated.");
        }
    },
},
// Update icon of active article from sidebar
{
    // Click on the icon in the sidebar
    trigger: '.o_article_active .o_article_emoji',
}, {
    // Choose an icon
    trigger: '.o-Emoji[data-codepoints="🥶"]',
}, {
    // Check that the icon has been updated in both trees in the sidebar
    trigger: 'section[data-section="favorites"] .o_article_active .o_article_emoji:contains("🥶")',
    extra_trigger: 'section[data-section="private"] .o_article_active .o_article_emoji:contains("🥶")',
    run: () => {},
}, {
    // Check that the icon in the body has been updated
    trigger: '.o_knowledge_body div[name="icon"]:contains("🥶")',
    run: () => {},
},
// Update icon of non active article
{
    // Click on the icon in the sidebar
    trigger: '.o_article:contains("Workspace Article") .o_article_emoji',
}, {
    // Choose an icon
    trigger: '.o-Emoji[data-codepoints="🥵"]',
}, {
    // Check that the icon has been updated in the sidebar
    trigger: '.o_article:contains("Workspace Article") .o_article_emoji:contains("🥵")',
    run: () => {},
}, {
    // Check that the icon in the body has not been updated
    trigger: '.o_knowledge_body div[name="icon"]:contains("🥶")',
    run: () => {},
},
// Update icon of locked article (fails)
{
    // Open another article
    trigger: '.o_article_name:contains("Workspace Child")',
}, {
    // Lock the article
    trigger: '#dropdown_tools_panel',
    extra_trigger: '.o_article_active:contains("Workspace Child")',
}, {
    trigger: '.o_knowledge_more_options_panel .btn-lock',
}, {
    // Click on the icon of the active article in the sidebar
    trigger: '.o_article_active .o_article_emoji:contains("📄")',
    extra_trigger: '.breadcrumb-item.active .fa-lock',
}, {
    // Check that emoji picker did not show up
    trigger: 'body:not(:has(.o-EmojiPicker))',
    run: () => {},
},
// Update icon of unlocked article
{
    // Unlock the article
    trigger: '#dropdown_tools_panel',
}, {
    trigger: '.o_knowledge_more_options_panel .btn-lock .fa-unlock',
}, {
    // Click on the icon of the active article in the sidebar
    trigger: '.o_article_active .o_article_emoji',
    extra_trigger: '.breadcrumb-item.active:not(:has(.fa-lock))',
}, {
    // Choose an icon
    trigger: '.o-Emoji[data-codepoints="😬"]',
}, {
    // Check that the icon has been updated in the sidebar
    trigger: '.o_article:contains("Workspace Child") .o_article_emoji:contains("😬")',
    run: () => {},
},
// Convert article into item
{
    // Open the kebab menu
    trigger: '#dropdown_tools_panel',
}, {
    // Click on convert button
    trigger: '.dropdown-item .fa-tasks',
}, {
    // Check that article has been removed from the sidebar
    trigger: 'section[data-section="workspace"] .o_article:not(:has(.o_article))',
    extra_trigger: 'section[data-section="workspace"] .o_article:contains("Workspace Article"):not(.o_article_has_children)',
    run: () => {},
},
// Favorite an item
{
    // Click on the toggle favorite button
    trigger: '.o_knowledge_toggle_favorite',
}, {
    // Check that item has been added in the favorite section
    trigger: 'section[data-section="favorites"] .o_article:contains("Workspace Child")',
    run: () => {},
},
// Convert item into article
{
    // Open the kebab menu
    trigger: '#dropdown_tools_panel',
}, {
    // Click on convert button
    trigger: '.dropdown-item .fa-sitemap',
}, {
    // Check that article has been readded in the main tree
    trigger: 'section[data-section="workspace"] .o_article:contains("Workspace Child")',
    run: () => {},
},
// Convert a favorite article to an item
{
    // Open the kebab menu
    trigger: '#dropdown_tools_panel',
}, {
    // Click on the convert button
    trigger: '.dropdown-item .fa-tasks',
}, {
    // Check that article has been removed from the main tree but not from the favorite tree
    trigger: 'section[data-section="workspace"] .o_article:not(:has(.o_article))',
    extra_trigger: 'section[data-section="workspace"] .o_article:contains("Workspace Article"):not(.o_article_has_children)',
    run: () => {},
}, {
    // Check that article has not been removed from the favorite tree
    trigger: 'section[data-section="favorites"] .o_article:contains("Workspace Child")',
    run: () => {},
},
// Remove member of child of shared article
{
    // Open the shared child article
    trigger: '.o_article_name:contains("Shared Child")',
}, {
    // Open the share dropdown
    trigger: '.o_knowledge_header .btn:contains("Share")',
    extra_trigger: '.o_article_active:contains("Shared Child")',
}, {
    // Make remove member button visible
    trigger: '.o_knowledge_share_panel:not(:has(.fa-spin))',
    run: () => {
        document.querySelector('.o_knowledge_share_panel .o_delete.fa-times').style.display = 'block';
    },
}, {
    // Click on the delete member button
    trigger: '.o_knowledge_share_panel .o_delete.fa-times',
}, {
    // Confirm restriction
    trigger: '.modal-footer .btn-primary',
}, {
    // Check that the article did not move
    trigger: 'section[data-section="shared"] .o_article .o_article',
    extra_trigger: '.o_knowledge_share_panel_icon',
},
// Publish child of a shared article
{
    // Open the share dropdown
    trigger: '.o_knowledge_header .btn:contains("Share")',
}, {
    // Change permission
    trigger: '.o_knowledge_share_panel:not(:has(.fa-spin))',
    extra_trigger: '.o_permission[aria-label="Internal Permission"]',
    run: () => changeInternalPermission('write'),
}, {
    // Check that the article did not move
    trigger: 'section[data-section="shared"] .o_article .o_article',
    run: () => {},
},
// Publish shared article
{
    // Open shared article
    trigger: '.o_article_name:contains("Shared Article")',
}, {
    // Open the share dropdown
    trigger: '.o_knowledge_header .btn:contains("Share")',
    extra_trigger: '.o_article_active:contains("Shared Article")',
}, {
    // Change permission
    trigger: '.o_knowledge_share_panel:not(:has(.fa-spin))',
    run: () => changeInternalPermission('write'),
}, {
    // Check that the article moved to the workspace
    trigger: 'section[data-section="workspace"] .o_article:contains("Shared Article")',
    run: () => {},
}, 
// Restrict workspace article with member
{
    // Change permission
    trigger: '.o_knowledge_share_panel:not(:has(.fa-spin))',
    run: () => changeInternalPermission('none'),
}, {
    // Check that article moved to shared
    trigger: 'section[data-section="shared"] .o_article:contains("Shared Article")',
    run: () => {},
},
// Remove member of shared article
{
    // Make remove member button visible
    trigger: '.o_knowledge_share_panel:not(:has(.fa-spin))',
    run: () => {
        document.querySelector('.o_knowledge_share_panel .o_delete.fa-times').style.display = 'block';
    },
}, {
    // Remove member
    trigger: '.o_knowledge_share_panel .o_delete.fa-times',
}, {
    // Check that article moved to private
    trigger: 'section[data-section="private"] .o_article:contains("Shared Article")',
}, {
    // Readd the member to replace the article in the shared section
    trigger: '.o_knowledge_header .btn:contains("Share")',
}, {
    trigger: '.o_knowledge_share_panel .btn:contains("Invite")',
}, {
    trigger: '.o_field_many2many_tags_email[name=partner_ids] input',
    run: 'text henri@knowledge.com',
}, {
    trigger: '.o-autocomplete--dropdown-item:contains("henri@")',
    extra_trigger: '.o-autocomplete--dropdown-menu.show',
}, {
    trigger: 'button:contains("Invite")',
    extra_trigger: '.o_field_tags span.o_badge_text',
},
// Publish child of private article
{
    // Open private child
    trigger: '.o_article_name:contains("Private Child 2")',
}, {
    // Open the share dropown
    trigger: '.o_knowledge_header .btn:contains("Share")',
    extra_trigger: '.o_article_active:contains("Private Child 2")',
}, {
    // Change permission
    trigger: '.o_knowledge_share_panel:not(:has(.fa-spin))',
    run: () => changeInternalPermission('read'),
}, {
    // Check that article is still in private
    trigger: 'section[data-section="private"] .o_article .o_article:contains("Private Child 2")',
    run: () => {},
},
// Publish private article
{
    // Open private article
    trigger: '.o_article_name:contains("Private Article")',
}, {
    // Open the share dropdown
    trigger: '.o_knowledge_header .btn:contains("Share")',
    extra_trigger: '.o_article_active:contains("Private Article")',
}, {
    // Change permission
    trigger: '.o_knowledge_share_panel:not(:has(.fa-spin))',
    run: () => changeInternalPermission('read'),
}, {
    // Check that article moved to the workspace
    trigger: 'section[data-section="workspace"] .o_article:contains("Private Article")',
    run: () => {},
},
// Change permission of workspace article to write
{
    // Change permission
    trigger: '.o_knowledge_share_panel:not(:has(.fa-spin))',
    run: () => changeInternalPermission('write'),
}, {
    // Check that article did not move
    trigger: 'section[data-section="workspace"] .o_article:contains("Private Article")',
    run: () => {},
},
// Change permission of workspace article to read
{
    // Change permission
    trigger: '.o_knowledge_share_panel:not(:has(.fa-spin))',
    run: () => changeInternalPermission('read'),
}, {
    // Check that article did not move
    trigger: 'section[data-section="workspace"] .o_article:contains("Private Article")',
    run: () => {},
}, 
// Restrict workspace article
{
    // Change permission
    trigger: '.o_knowledge_share_panel:not(:has(.fa-spin))',
    run: () => changeInternalPermission('none'),
}, {
    // Check that the article moved to private
    trigger: 'section[data-section="private"] .o_article:contains("Private Article")',
    run: () => {},
},
// Drag and drop child above other child
{
    trigger: 'section[data-section="private"] .o_article .o_article:first:contains("Private Child 1")',
    run: () => {
        dragAndDropArticle(
            $('.o_section[data-section="private"] .o_article_name:contains("Private Child 3")'),
            $('.o_section[data-section="private"] .o_article_name:contains("Private Child 1")'),
        );
    },
}, {
    // Check that children have been reordered in both trees
    trigger: 'section[data-section="favorites"] .o_article .o_article:first:contains("Private Child 3")',
    extra_trigger: 'section[data-section="private"] .o_article .o_article:first:contains("Private Child 3")',
},
// Drag and drop child above root
{
    // Open child article
    trigger: '.o_article_name:contains("Private Child 2")',
}, {
    // Check that article shows "Add Properties" button
    trigger: '.o_knowledge_add_buttons',
    extra_trigger: '.o_article_active:contains("Private Child 2")',
    run: () => {
        if (!document.querySelector('.o_knowledge_add_buttons .o_knowledge_add_properties')) {
            console.error('Child articles should have properties.');
        }
    },
}, {
    trigger: 'section[data-section="private"] .o_article:first:contains("Private Article")',
    run: () => {
        dragAndDropArticle(
            $('.o_section[data-section="private"] .o_article_name:contains("Private Child 2")'),
            $('.o_section[data-section="private"] .o_article_name:contains("Private Article")'),
        );
    },
}, {
    // Check that child became the first private root article
    trigger: '.o_section[data-section="private"] .o_article:not(:has(.o_article:contains("Private Child 2")))',
    extra_trigger: '.o_section[data-section="private"] ul >:first:contains("Private Child 2")',
    run: () => {},
}, {
    // Check that article was removed from children in favorites
    trigger: '.o_section[data-section="favorites"]:not(:has(.o_article:contains("Private Child 2")))',
    run: () => {
        makeVisible('.o_knowledge_add_buttons');
    }
}, {
    // Check that article does not show "Add Properties" button anymore
    trigger: '.o_knowledge_add_buttons:not(:has(button.o_knowledge_add_properties))',
    run: () => {},
},
// Drag and drop root above root
{
    trigger: '.o_section[data-section="private"] .o_article:contains("Private Child 2") + .o_article:contains("Private Article")',
    run: () => {
        dragAndDropArticle(
            $('.o_section[data-section="private"] .o_article_name:contains("Private Article")'),
            $('.o_section[data-section="private"] .o_article_name:contains("Private Child 2")'),
        );
    },
}, {
    // Check that the articles have been reordered
    trigger: '.o_section[data-section="private"] .o_article:contains("Private Article") + .o_article:contains("Private Child 2")',
    run: () => {
        makeVisible('section[data-section="private"] .o_section_create');
    },
},
// Drag and drop root above child
{
    // Create a new article
    trigger: 'section[data-section="private"] .o_section_create',
}, {
    // Rename the article
    trigger: '.o_breadcrumb_article_name > input',
    extra_trigger: '.o_article_active:contains("Untitled")',
    run: 'text Private Child 4',
}, {
    trigger: '.o_article_active:contains("Private Child 4")',
    run: () => {
        dragAndDropArticle(
            $('section[data-section="private"] .o_article_name:contains("Private Child 4")'),
            $('section[data-section="private"] .o_article_name:contains("Private Child 1")'),
        );
    },
}, {
    // Check that the children are correclty ordered
    trigger: 'section[data-section="private"] .o_article:contains("Private Child 3") + .o_article:contains("Private Child 4")',
    extra_trigger: 'section[data-section="private"] .o_article:contains("Private Child 4") + .o_article:contains("Private Child 1")',
    run: () => {},
}, {
    // Check that the children are also ordered in the favorite tree
    trigger: 'section[data-section="favorites"] .o_article:contains("Private Child 3") + .o_article:contains("Private Child 4")',
    extra_trigger: 'section[data-section="favorites"] .o_article:contains("Private Child 4") + .o_article:contains("Private Child 1")',
    run: () => {},
},
// Drag and drop workspace to private
{
    trigger: 'section[data-section="workspace"] .o_article:contains("Workspace Article")',
    run: () => {
        dragAndDropArticle(
            $('section[data-section="workspace"] .o_article:contains("Workspace Article")'),
            $('section[data-section="private"]'),
        );
    },
}, {
    // Moving from section should ask for confirmation
    trigger: '.modal-footer .btn-primary',
}, {
    // Check that article moved to the private section
    trigger: 'section[data-section="private"] .o_article:contains("Workspace Article")',
    extra_trigger: 'section[data-section="workspace"]:not(:has(.o_article:contains("Workspace Article")))',
    run: () => {},
}, {
    // Show that empty section message is shown
    trigger: 'section[data-section="workspace"] .o_knowledge_empty_info',
    run: () => {},
},
// Cancel drag and drop
{
    trigger: '.o_knowledge_tree',
    run: () => {
        dragAndDropArticle(
            $('section[data-section="private"] .o_article_name:contains("Workspace Article")'),
            $('section[data-section="workspace"] .o_section_header'),
        );
    },
}, {
    // Cancel the move
    trigger: '.modal-footer .btn-secondary',
}, {
    // Check that the article did not move
    trigger: 'section[data-section="private"] .o_article:contains("Workspace Article")',
    extra_trigger: 'section[data-section="workspace"]:not(:has(.o_article:contains("Workspace Article")))',
    run: () => {},
},
// Drag and drop private to workspace
{
    trigger: '.o_knowledge_tree',
    run: () => {
        dragAndDropArticle(
            $('section[data-section="private"] .o_article_name:contains("Workspace Article")'),
            $('section[data-section="workspace"]'),
        );
    },
}, {
    // Moving from section should ask for confirmation
    trigger: '.modal-footer .btn-primary',
}, {
    // Check that article moved to the workspace section
    trigger: 'section[data-section="workspace"] .o_article:contains("Workspace Article")',
    extra_trigger: 'section[data-section="private"]:not(:has(.o_article:contains("Workspace Article")))',
    run: () => {},
}, {
    // Check that the empty section message disappeared
    trigger: 'section[data-section="workspace"]:not(:has(.o_knowledge_empty_info))',
    run: () => {},
},
// Drag and drop article to shared (fails)
{
    trigger: '.o_article:contains("Private Article")',
    run: () => {
        dragAndDropArticle(
            $('section[data-section="private"] .o_article:contains("Private Article")'),
            $('section[data-section="shared"]'),
        );
    },
}, {
    // Close the move cancelled modal
    trigger: '.modal-footer .btn-primary',
    extra_trigger: '.modal-title:contains("Move cancelled")',
},
// Resequence shared articles
{
    trigger: 'section[data-section="private"]',
    run: () => {
        makeVisible('section[data-section="private"] .o_section_create');
    },
}, {
    // Create a new shared article
    trigger: 'section[data-section="private"] .o_section_create',
}, {
    // Rename the article
    trigger: '.o_breadcrumb_article_name > input',
    extra_trigger: '.o_article_active:contains("Untitled")',
    run: 'text Shared 2',
}, {
    // Share the article
    trigger: '.o_knowledge_header .btn:contains("Share")',
}, {
    trigger: '.o_knowledge_share_panel .btn:contains("Invite")',
}, {
    trigger: '.o_field_many2many_tags_email[name=partner_ids] input',
    run: 'text henri@knowledge.com',
}, {
    trigger: '.o-autocomplete--dropdown-item:contains("henri@")',
    extra_trigger: '.o-autocomplete--dropdown-menu.show',
}, {
    trigger: 'button:contains("Invite")',
    extra_trigger: '.o_field_tags span.o_badge_text',
}, {
    trigger: 'section[data-section="shared"] .o_article:contains("Shared Article") + .o_article:contains("Shared 2")',
    run: () => {
        dragAndDropArticle(
            $('section[data-section="shared"] .o_article_name:contains("Shared 2")'),
            $('section[data-section="shared"] .o_article_name:contains("Shared Article")'),
        );
    },
}, {
    // Check that the articles have been resequenced
    trigger: 'section[data-section="shared"] .o_article:contains("Shared 2") + .o_article:contains("Shared Article")',
    run: () => {
        makeVisible('section[data-section="private"] .o_section_create');
    },
},
// Drag and drop article above shared child
{
    // Create a new article
    trigger: 'section[data-section="private"] .o_section_create',
}, {
    // Rename the article
    trigger: '.o_breadcrumb_article_name > input',
    extra_trigger: '.o_article_active:contains("Untitled")',
    run: 'text Moved to Share',
}, {
    trigger: '.o_article_active:contains("Moved to Share")',
    run: () => {
        dragAndDropArticle(
            $('section[data-section="private"] .o_article_name:contains("Moved to Share")'),
            $('section[data-section="shared"] .o_article_name:contains("Shared Child")'),
        );
    },
}, {
    // Moving under a shared article should ask for confirmation
    trigger: '.modal-footer .btn-primary',
}, {
    // Check that the article has been moved
    trigger: 'section[data-section="shared"] .o_article .o_article:contains("Moved to Share")',
    extra_trigger: 'section[data-section="private"]:not(:has(.o_article:contains("Moved to Share")))',
    run: () => {},
},
// Drag and drop shared child to shared
{
    trigger: '.o_knowledge_tree',
    run: () => {
        dragAndDropArticle(
            $('section[data-section="shared"] .o_article_name:contains("Moved to Share")'),
            $('section[data-section="shared"] .o_article_name:contains("Shared Article")'),
        );
    },
}, {
    // Close the move cancelled modal
    trigger: '.modal-footer .btn-primary',
    extra_trigger: '.modal-title:contains("Move cancelled")',
},
// Drag and drop article to trash
{
    trigger: '.o_knowledge_tree',
    run: () => {
        dragAndDropArticle(
            $('section[data-section="private"] .o_article_name:contains("Private Child 2")'),
            $('.o_section.o_knowledge_sidebar_trash'),
        );
    },
}, {
    // Check that article has been removed from the sidebar
    trigger: '.o_knowledge_tree:not(:has(.o_article:contains("Private Child 2")))',
    run: () => {},
},
// Drag and drop parent of active article to trash
{
    trigger: '.o_article_active:contains("Moved to Share")',
    run: () => {
        dragAndDropArticle(
            $('section[data-section="shared"] .o_article_name:contains("Shared Article")'),
            $('.o_section.o_knowledge_sidebar_trash'),
        );
    },
}, {
    // Check that article has been removed from the sidebar
    trigger: '.o_knowledge_tree:not(:has(.o_article:contains("Shared Article")))',
    run: () => {},
}, {
    // Check that user has been redirected to first accessible article
    trigger: '.o_knowledge_tree .o_article:first:has(.o_article_active)',
    run: () => {},
},
// Resequence favorites
{
    trigger: 'section[data-section="favorites"] .o_article:contains("Private Article") + .o_article:contains("Workspace Child")',
    run: () => {
        dragAndDropArticle(
            $('section[data-section="favorites"] .o_article_name:contains("Workspace Child")'),
            $('section[data-section="favorites"] .o_article_name:contains("Private Article")'),
        );
    },
}, {
    // Check that favorites have been resequenced
    trigger: 'section[data-section="favorites"] .o_article:contains("Workspace Child") + .o_article:contains("Private Article")',
    run: () => {},
}]});

return __exports;
});
;

/***********************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_template_tour.js  *
*  Lines: 40                                                           *
***********************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_template_tour', ['@knowledge/../tests/tours/knowledge_tour_utils', '@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { endKnowledgeTour } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");


registry.category("web_tour.tours").add("knowledge_load_template", {
    url: "/web",
    test: true,
    steps: () => [
        stepUtils.showAppsMenuItem(), {
            // open the Knowledge App
            trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
        }, { // click on the main "New" action
            trigger: '.o_knowledge_header .btn:contains("New")',
        }, { // open the template picker dialog
            trigger: '.o_knowledge_helper .o_knowledge_load_template',
        }, { // choose a template
            trigger: '.o_knowledge_template_selector div:contains("My Template")',
        }, { // insert the template
            trigger: 'button:contains("Load Template")'
        }, { // check that the icon has been changed
            trigger: '.o_knowledge_body .o_article_emoji:contains(📚)',
            run: () => {},
        }, { // check that the title of the article has changed
            trigger: '.o_breadcrumb_article_name_container:contains("My Template")',
            run: () => {},
        }, { // check that the body of the article has changed
            trigger: '.o_knowledge_body .note-editable:contains(Lorem ipsum dolor sit amet, consectetur adipisicing elit.)',
            run: () => {},
        }, ...endKnowledgeTour()
    ]
});

return __exports;
});
;

/********************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_tour_utils.js  *
*  Lines: 171                                                       *
********************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_tour_utils', ['@knowledge/components/sidebar/sidebar', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { SORTABLE_TOLERANCE } = require("@knowledge/components/sidebar/sidebar");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

const changeInternalPermission = __exports.changeInternalPermission = (permission) => {
    const target = document.querySelector('.o_permission[aria-label="Internal Permission"]');
    target.value = permission;
    target.dispatchEvent(new Event("change"));
};

/**
 * Drag&drop an article in the sidebar
 * @param {$.Element} element
 * @param {$.Element} target
 */
const dragAndDropArticle = __exports.dragAndDropArticle = ($element, $target) => {
    const elementCenter = $element.offset();
    elementCenter.left += $element.outerWidth() / 2;
    elementCenter.top += $element.outerHeight() / 2;
    const targetCenter = $target.offset();
    targetCenter.left += $target.outerWidth() / 2;
    targetCenter.top += $target.outerHeight() / 2;
    const sign = Math.sign(targetCenter.top - elementCenter.top);
    // The mouse needs to be above (or below) the target depending on element
    // position (below (or above)) to consistently trigger the correct move.
    const offsetY = sign * ($target.outerHeight() / 2 - 5);

    const element = $element[0].closest("li");
    const target = $target[0];
    element.dispatchEvent(
        new PointerEvent("pointerdown", {
            bubbles: true,
            which: 1,
            clientX: elementCenter.left,
            clientY: elementCenter.top,
        })
    );

    // Initial movement starting the drag sequence
    element.dispatchEvent(
        new PointerEvent("pointermove", {
            bubbles: true,
            which: 1,
            clientX: elementCenter.left,
            clientY: elementCenter.top + SORTABLE_TOLERANCE + 1,
        })
    );

    // Timeouts because sidebar onMove is debounced
    setTimeout(() => {
        target.dispatchEvent(
            new PointerEvent("pointermove", {
                bubbles: true,
                which: 1,
                clientX: targetCenter.left,
                clientY: targetCenter.top + offsetY,
            })
        );

        setTimeout(() => {
            element.dispatchEvent(
                new PointerEvent("pointerup", {
                    bubbles: true,
                    which: 1,
                    clientX: targetCenter.left,
                    clientY: targetCenter.top + offsetY,
                })
            );
        }, 200);
    }, 200);
};

/**
 * Steps to insert an articleLink for the given article, in the first editable
 * html_field found in the given container selector (should have a paragraph
 * as its last element, and the link will be inserted at the position at index
 * offset in the paragraph).
 *
 * @param {string} htmlFieldContainerSelector jquery selector for the container
 * @param {string} articleName name of the article to insert a link for
 * @param {integer} offset position of the command call in the paragraph
 * @returns {Array} tour steps
 */
__exports.appendArticleLink = appendArticleLink; function appendArticleLink(htmlFieldContainerSelector, articleName, offset=0) {
    return [{ // open the command bar
        trigger: `${htmlFieldContainerSelector} .odoo-editor-editable > p:last-child`,
        run: function () {
            openCommandBar(this.$anchor[0], offset);
        },
    }, { // click on the /article command
        trigger: '.oe-powerbox-commandName:contains(Article)',
        run: 'click',
        in_modal: false,
    }, { // select an article in the list
        trigger: `.o_select_menu_item:contains(${articleName})`,
        run: 'click',
        in_modal: false,
    }, { // wait for the choice to be registered
        trigger: `.o_select_menu_toggler_slot:contains(${articleName})`,
        run: () => {},
    }, { // click on the "Insert Link" button
        trigger: '.modal-dialog:contains(Link an Article) .modal-footer button.btn-primary',
        run: 'click'
    }];
}

/**
 * Ensure that the tour does not end on the Knowledge form view by returning to
 * the home menu.
 */
__exports.endKnowledgeTour = endKnowledgeTour; function endKnowledgeTour() {
    return [
        stepUtils.toggleHomeMenu(), {
            trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
            run: () => {},
        }
    ];
}

__exports.makeVisible = makeVisible; function makeVisible(selector) {
    const el = document.querySelector(selector);
    if (el) {
        el.style.setProperty("visibility", "visible", "important");
        el.style.setProperty("opacity", "1", "important");
        el.style.setProperty("display", "block", "important");
    }
}

/**
 * Opens the power box of the editor
 * @param {HTMLElement} paragraph
 * @param {integer} offset position of the command call in the paragraph
 */
__exports.openCommandBar = openCommandBar; function openCommandBar(paragraph, offset=0) {
    const sel = document.getSelection();
    sel.removeAllRanges();
    const range = document.createRange();
    range.setStart(paragraph, offset);
    range.setEnd(paragraph, offset);
    sel.addRange(range);
    paragraph.dispatchEvent(
        new KeyboardEvent("keydown", {
            key: "/",
        })
    );
    const slash = document.createTextNode("/");
    paragraph.prepend(slash);
    sel.removeAllRanges();
    range.setStart(slash, 1);
    range.setEnd(slash, 1);
    sel.addRange(range);
    paragraph.dispatchEvent(
        new InputEvent("input", {
            inputType: "insertText",
            data: "/",
            bubbles: true,
        })
    );
    paragraph.dispatchEvent(
        new KeyboardEvent("keyup", {
            key: "/",
        })
    );
}

return __exports;
});
;

/*******************************************************************
*  Filepath: /sign/static/tests/tours/sign_request_shared_tour.js  *
*  Lines: 87                                                       *
*******************************************************************/
odoo.define('@sign/../tests/tours/sign_request_shared_tour', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add("shared_sign_request_tour", {
    test: true,
    url: "/web",
    steps: () => [
        {
            content: "Open Sign APP",
            trigger: '.o_app[data-menu-xmlid="sign.menu_document"]',
            run: "click",
        },
        {
            content: "Remove My Favorites filter",
            trigger: ".o_cp_searchview .o_facet_remove",
            run: "click",
        },
        {
            content: 'Search template "template_1_role"',
            trigger: ".o_cp_searchview input",
            run: "text template_1_role",
        },
        {
            content: "Search Document Name",
            trigger: ".o_searchview_autocomplete .o_menu_item:first",
            run: "click",
        },
        {
            content: "Share the template",
            trigger: '.o_kanban_record_bottom:first button:contains("Share"):first',
            extra_trigger: '.oe_kanban_main:first span:contains("template_1_role")',
            run: "click",
        },
        {
            content: "Go on signing page",
            trigger: ".o_field_CopyClipboardChar",
            run: function () {
                const share_link = this.$anchor.contents()[0].firstChild.textContent;
                // Retrieve the link without the origin to avoid
                // mismatch between localhost:8069 and 127.0.0.1:8069
                // when running the tour with chrome headless
                const regex = "/sign/document/mail/.*";
                const url = share_link.match(regex)[0];
                window.location.href = window.location.origin + url;
            },
        },
        {
            content: "Fill the sign item",
            trigger: "iframe input.o_sign_sign_item",
            run: "text Mitchell Admin",
        },
        {
            content: "Validate & Send Completed Document",
            trigger: ".o_validate_button",
            run: "click",
        },
        {
            content: "Fill name",
            trigger: "#o_sign_public_signer_name_input",
            extra_trigger: '.modal-title:contains("Final Validation")',
            run: "text Mitchell Admin",
        },
        {
            content: "Fill email",
            trigger: "#o_sign_public_signer_mail_input",
            run: "text mitchell.admin@public.com",
        },
        {
            content: "Validate & Send",
            trigger: '.modal-footer button:contains("Validate & Send")',
            run: "click",
        },
        {
            content: "Download Document",
            trigger: "button.btn.btn-primary",
            extra_trigger: '.modal-title:contains("Thank you!")',
            run() {},
        },
    ],
});

return __exports;
});
;

/**********************************************************************
*  Filepath: /sign/static/tests/tours/sign_template_creation_tour.js  *
*  Lines: 140                                                         *
**********************************************************************/
odoo.define('@sign/../tests/tours/sign_template_creation_tour', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

function triggerDragEvent(element, type, data = {}) {
    const event = new DragEvent(type, { bubbles: true });
    for (const key in data) {
        Object.defineProperty(event, key, {
            value: data[key],
        });
    }
    element.dispatchEvent(event);
}

function dragAndDropSignItemAtHeight(type, page, height = 0.5, width = 0.5) {
    const iframe = document.querySelector("iframe");
    const iframeDocument = iframe.contentWindow.document;
    const signItemTypeButtons = iframeDocument.querySelectorAll(
        ".o_sign_field_type_toolbar_items .o_sign_field_type_button"
    );
    const from = Array.from(signItemTypeButtons).find((el) => el.innerText === type);

    const to = iframeDocument.querySelector(`.page[data-page-number="${page}"]`);
    const toPosition = to.getBoundingClientRect();
    toPosition.x += iframe.contentWindow.scrollX + to.clientWidth * width;
    toPosition.y += iframe.contentWindow.scrollY + to.clientHeight * height;

    const dataTransferObject = {};
    const dataTransferMock = {
        setData: (key, value) => {
            dataTransferObject[key] = value;
        },
        getData: (key) => {
            return dataTransferObject[key];
        },
        setDragImage: () => {},
    };

    triggerDragEvent(from, "dragstart", {
        dataTransfer: dataTransferMock,
    });

    triggerDragEvent(to, "drop", {
        pageX: toPosition.x,
        pageY: toPosition.y,
        dataTransfer: dataTransferMock,
    });

    triggerDragEvent(from, "dragend");
}

registry.category("web_tour.tours").add("sign_template_creation_tour", {
    test: true,
    url: "/web",
    steps: () => [
        stepUtils.showAppsMenuItem(),
        {
            content: "Open Sign App",
            trigger: '.o_app[data-menu-xmlid="sign.menu_document"]',
            run: "click",
        },
        {
            content: "Remove My Favorites filter",
            trigger: ".o_cp_searchview .o_facet_remove",
            run: "click",
        },
        {
            content: 'Search template "blank_template"',
            trigger: ".o_cp_searchview input",
            run: "text blank_template",
        },
        {
            content: "Search Document Name",
            trigger: ".o_searchview_autocomplete .o_menu_item:first",
            run: "click",
        },
        {
            content: "Enter Template Edit Mode",
            trigger: '.oe_kanban_main:first span:contains("blank_template")',
            run: "click",
        },
        {
            content: "Wait for iframe to load PDF",
            trigger: "iframe #viewerContainer",
            run: () => {},
        },
        {
            content: "Wait for page to be loaded",
            trigger: "iframe .page",
            run: () => {},
        },
        {
            content: "Drop Signature Item",
            trigger: "iframe body",
            run: function () {
                dragAndDropSignItemAtHeight("Signature", 1, 0.5, 0.25);
            },
        },
        {
            content: "Drop Name Sign Item",
            trigger: "iframe body",
            run: function () {
                dragAndDropSignItemAtHeight("Name", 1, 0.25, 0.25);
            },
        },
        {
            content: "Open popover on name sign item",
            trigger: 'iframe .o_sign_sign_item:contains("Name") .o_sign_item_display',
            run: "click",
        },
        {
            content: "Change responsible",
            trigger: ".o_popover .o_input_dropdown input",
            run: "text employee",
        },
        {
            content: "select employee",
            trigger: '.o_popover .o_input_dropdown .dropdown .dropdown-item:contains("Employee")',
        },
        {
            content: "Validate changes",
            trigger: ".o_popover .o_sign_validate_field_button",
        },
        {
            content: "Change template name",
            trigger: ".o_sign_template_name_input",
            run: "text filled_template",
        },
        {
            trigger: ".breadcrumb .o_back_button",
        },
    ],
});

return __exports;
});
;

/************************************************************
*  Filepath: /sign/static/tests/tours/sign_widgets_tour.js  *
*  Lines: 88                                                *
************************************************************/
odoo.define('@sign/../tests/tours/sign_widgets_tour', ['web.core', '@web/core/registry', '@web_tour/tour_service/tour_utils', 'web.legacy_tranlations_loaded'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const core = require("web.core");
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");
require("web.legacy_tranlations_loaded");

var _t = core._t;

registry.category("web_tour.tours").add("sign_widgets_tour", {
    test: true,
    url: "/web",
    steps: () => [
        stepUtils.showAppsMenuItem(),
        {
            content: "Settings",
            trigger: 'a[data-menu-xmlid="base.menu_administration"]',
            run: "click",
        },
        {
            content: "Users",
            trigger: "div#invite_users button.o_web_settings_access_rights",
            run: "click",
        },
        {
            content: "Mitchel",
            trigger: "table.o_list_table td.o_data_cell:contains(Admin)",
            run: "click",
        },

        {
            content: "Preference tab",
            trigger: 'a.nav-link:contains("' + _t("Preferences") + '")',
            run: "click",
        },
        {
            content: "Editor loaded",
            trigger: ".note-editable",
        },
        {
            content: "Click on widget sign",
            trigger: ".o_signature:first",
            run: "click",
        },
        {
            content: "Click on auto button",
            trigger: ".o_web_sign_auto_button",
            run: "click",
        },
        {
            content: "Click on style button",
            trigger: ".o_web_sign_auto_select_style > button",
            run: "click",
        },
        {
            content: "Select a style",
            trigger: ".o_web_sign_auto_select_style .dropdown-item:nth-child(3)",
            run: "click",
        },
        {
            content: "Click on style button",
            trigger: ".o_web_sign_auto_select_style > button",
            run: "click",
        },
        {
            content: "Select a style",
            trigger: ".o_web_sign_auto_select_style .dropdown-item:nth-child(2)",
            run: "click",
        },
        {
            content: "Sign",
            trigger: 'button.btn-primary:contains("Adopt & Sign")',
            extra_trigger: "canvas.jSignature",
            run: function () {
                setTimeout(() => {
                    this.$anchor.click();
                }, 1000);
            },
        },
        ...stepUtils.saveForm(),
    ],
});

return __exports;
});
;

/*****************************************************************
*  Filepath: /sign/static/tests/tours/test_report_modal_tour.js  *
*  Lines: 43                                                     *
*****************************************************************/
odoo.define('@sign/../tests/tours/test_report_modal_tour', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add("sign_report_modal_tour", {
    test: true,
    url: "/web",
    steps: () => [
        stepUtils.showAppsMenuItem(),
        {
            content: "Open Sign app",
            trigger: '.o_app[data-menu-xmlid="sign.menu_document"]',
            run: "click",
        },
        {
            content: "Open Reports menu",
            trigger: '.o_main_navbar button[data-menu-xmlid="sign.sign_reports"]',
            run: "click",
        },
        {
            content: "Open Green Savings Report",
            trigger: '.dropdown-item[data-menu-xmlid="sign.sign_report_green_savings"]',
            run: "click",
        },
        {
            content: "Open the modal",
            extra_trigger: 'iframe .green-savings-page a[data-bs-target=".modal_green_savings"]',
            trigger: 'iframe a:contains("How are these results calculated?")',
            run: "click",
        },
        {
            trigger: "iframe .modal_green_savings.show",
            run: () => {},
        },
    ],
});

return __exports;
});
;

/**************************************************************
*  Filepath: /sign/static/tests/tours/test_sign_flow_tour.js  *
*  Lines: 113                                                 *
**************************************************************/
odoo.define('@sign/../tests/tours/test_sign_flow_tour', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add("test_sign_flow_tour", {
    test: true,
    url: "/web",
    steps: () => [
        stepUtils.showAppsMenuItem(),
        {
            content: "Open Sign APP",
            trigger: '.o_app[data-menu-xmlid="sign.menu_document"]',
            run: "click",
        },
        {
            content: "Remove My Favorites filter",
            trigger: ".o_cp_searchview .o_facet_remove",
            run: "click",
        },
        {
            content: 'Search template "template_1_roles"',
            trigger: ".o_cp_searchview input",
            run: "text template_1_role(2)",
            position: "bottom",
        },
        {
            content: "Search Document Name",
            trigger: ".o_searchview_autocomplete .o_menu_item:first",
            run: "click",
        },
        {
            content: "list view",
            trigger: "button.o_list",
            run: "click",
        },
        {
            content: "Click Sign Now",
            extra_trigger: '.o_list_button button:contains("Sign Now")',
            trigger: "button:contains('Sign Now')",
            run: "click",
        },
        {
            content: "Click sign",
            trigger: "button[name='sign_directly']",
            run: "click",
        },
        {
            content: "Click to start",
            trigger: 'iframe .o_sign_sign_item_navigator:contains("Click to start")',
            position: "bottom",
        },
        {
            trigger: "iframe input.o_sign_sign_item:focus",
            auto: true,
            run() {},
        },
        {
            content: "Fill the sign item",
            trigger: "iframe input.o_sign_sign_item",
            run: "text Mitchell Admin",
        },
        {
            content: "Click next 1",
            trigger: 'iframe .o_sign_sign_item_navigator:contains("next")',
            run: "click",
        },
        {
            content: "Click sign it",
            trigger: 'iframe .o_sign_sign_item_navigator:contains("sign it")',
            run: "click",
        },
        {
            trigger: "iframe button.o_sign_sign_item:has(> img)",
            extra_trigger: "iframe :not(:has(.o_sign_sign_item_navigator))",
            auto: true,
        },
        {
            content: "Click on auto button",
            trigger: ".o_web_sign_auto_button",
            run: "click",
        },
        {
            content: "Sign",
            trigger: 'button.btn-primary:contains("Sign all")',
            extra_trigger: "canvas.jSignature",
            run() {
                setTimeout(() => {
                    this.$anchor.click();
                }, 1000);
            },
        },
        {
            content: "Validate & Send Completed Document",
            extra_trigger: ".o_sign_validate_banner",
            trigger: "button:contains('Validate & Send Completed Document')",
            run: "click",
        },
        {
            content: "view",
            extra_trigger: ".modal-dialog",
            trigger: ".modal-footer button.btn-primary",
            alt_trigger: ".modal-footer button.btn-secondary",
            run: "click",
        },
    ],
});

return __exports;
});
;

/***************************************************************************
*  Filepath: /sign/static/tests/tours/translate_sign_instructions_tour.js  *
*  Lines: 20                                                               *
***************************************************************************/
odoo.define('@sign/../tests/tours/translate_sign_instructions_tour', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add("translate_sign_instructions", {
    test: true,
    steps: () => [
        {
            content: "Translations must be loaded",
            trigger: 'iframe .o_sign_sign_item_navigator:contains("Cliquez pour commencer")',
            run: () => null, // it's a check
        },
    ],
});

return __exports;
});
;

/**********************************************************************
*  Filepath: /contacts/static/tests/tours/debug_menu_set_defaults.js  *
*  Lines: 77                                                          *
**********************************************************************/
odoo.define('@contacts/../tests/tours/debug_menu_set_defaults', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/
    
    const { registry } = require("@web/core/registry");
    const { stepUtils } = require("@web_tour/tour_service/tour_utils");

    registry.category("web_tour.tours").add('debug_menu_set_defaults', {
        test: true,
        url: '/web?debug=1',
        steps: () => [
            ...stepUtils.goToAppSteps('contacts.menu_contacts', "Open the contacts menu"),
            {
                content: "Create a new contact",
                trigger: '.o-kanban-button-new',
            },
            {
                content: "Check that Company is checked by default, and not Individual",
                trigger: '.o_field_widget[name="company_type"] input[data-value="company"]:checked',
                run: function () {},
            },
            {
                content: "Select the individual radio button",
                trigger: '.o_field_widget[name="company_type"] input[data-value="person"]',
            },
            {
                content: "Open the debug menu",
                trigger: '.o_debug_manager button',
            },
            {
                content: "Click the Set Defaults menu",
                trigger: '.o_debug_manager .dropdown-item:contains(Set Defaults)',
            },
            {
                content: "Choose Company Type = Individual",
                trigger: '#formview_default_fields',
                run: function () {
                    const element_field = document.querySelector('select#formview_default_fields');
                    element_field.value = 'company_type';
                    element_field.dispatchEvent(new Event("change"));
                },
            },
            {
                content: "Check that there are conditions",
                trigger: '#formview_default_conditions',
            },
            {
                content: "Save the new default",
                trigger: 'footer button:contains(Save default)',
            },
            {
                content: "Discard the contact creation",
                trigger: 'button.o_form_button_cancel',
            },
            {
                trigger: '.o_action_manager .o_kanban_view .o-kanban-button-new',
            },
            {
                content: "Check that Individual is checked instead of Company",
                trigger: '.o_field_widget[name="company_type"] input[data-value="person"]:checked',
                run: function () {},
            },
            {
                content: "Discard the contact creation",
                trigger: 'button.o_form_button_cancel',
            },
            {
                content: "Wait for discard",
                trigger: '.o_control_panel .o-kanban-button-new',
                run() {},
            },
        ]
    });

return __exports;
});
;

/************************************************************
*  Filepath: /calendar/static/tests/tours/calendar_tour.js  *
*  Lines: 159                                               *
************************************************************/
odoo.define('@calendar/../tests/tours/calendar_tour', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

    const { registry } = require("@web/core/registry");
    const { stepUtils } = require("@web_tour/tour_service/tour_utils");

    const todayDate = function() {
        let now = new Date();
        let year = now.getFullYear();
        let month = String(now.getMonth() + 1).padStart(2, '0');
        let day = String(now.getDate()).padStart(2, '0');

        return `${month}/${day}/${year} 10:00:00`;
    };

    registry.category("web_tour.tours").add('calendar_appointments_hour_tour', {
        url: '/web',
        test: true,
        steps: () => [stepUtils.showAppsMenuItem(),
        {
            trigger: '.o_app[data-menu-xmlid="calendar.mail_menu_calendar"]',
            content: 'Open Calendar',
            run: 'click',
        },
        {
            trigger: '.o-calendar-button-new',
            content: 'Create a new event',
            run: 'click',
        },
        {
            trigger: '#name_0',
            content: 'Give a name to the new event',
            run: 'text TEST EVENT',
        },
        {
            trigger: '#start_0',
            content: 'Give a date to the new event',
            run: `text ${todayDate()}`,
        },
        {
            trigger: '.fa-cloud-upload',
            content: 'Save the new event',
            run: 'click',
        },
        {
            trigger: '.o_back_button',
            content: 'Go back to Calendar view',
            run: 'click',
        },
        {
            trigger: '.dropdown-toggle:contains("Week")',
            content: 'Click to change calendar view',
            run: 'click',
        },
        {
            trigger: '.dropdown-item:contains("Month")',
            content: 'Change the calendar view to Month',
            run: 'click',
        },
        {
            trigger: '.fc-day-header:contains("Monday")',
            content: 'Change the calendar view to week',
        },
        {
            trigger: '.fc-time:contains("10:00")',
            content: 'Check the time is properly displayed',
        },
        {
            trigger: '.o_event_title:contains("TEST EVENT")',
            content: 'Check the event title',
        },
    ]});

    registry.category("web_tour.tours").add('test_calendar_delete_tour', {
        test: true,
        steps: () => [
        {
            content: 'Select filter (everybody)',
            trigger: 'div[data-value="all"] input',
        },
        {
            content: 'Click on the event (focus + waiting)',
            trigger: 'a .fc-content:contains("Test Event")',
            async run() {
                $('a .fc-content:contains("Test Event")').click();
                await new Promise((r) => setTimeout(r, 1000));
                $('a .fc-content:contains("Test Event")').click();
            }
        },
        {
            content: 'Delete the event',
            trigger: '.o_cw_popover_delete',
        },
        {
            content: 'Validate the deletion',
            trigger:'button:contains("Delete")',
            async run() {
                $('button:contains("Delete")').click();
                await new Promise((r) => setTimeout(r, 1000));
            }
        },
    ]});
    
    registry.category("web_tour.tours").add('test_calendar_decline_tour', {
        test: true,
        steps: () => [
        {
            content: 'Click on the event (focus + waiting)',
            trigger: 'a .fc-content:contains("Test Event")',
            async run() {
                $('a .fc-content:contains("Test Event")').click();
                await new Promise((r) => setTimeout(r, 1000));
                $('a .fc-content:contains("Test Event")').click();
            }
        },
        {
            content: 'Delete the event',
            trigger: '.o_cw_popover_delete',
        },
        {
            content: 'Wait declined status',
            trigger: '.o_attendee_status_declined',
        },
    ]});
    
    registry.category("web_tour.tours").add('test_calendar_decline_with_everybody_filter_tour', {
        test: true,
        steps: () => [
        {
            content: 'Select filter (everybody)',
            trigger: 'div[data-value="all"] input',
        },
        {
            content: 'Click on the event (focus + waiting)',
            trigger: 'a .fc-content:contains("Test Event")',
            async run() {
                $('a .fc-content:contains("Test Event")').click();
                await new Promise((r) => setTimeout(r, 1000));
                $('a .fc-content:contains("Test Event")').click();
            }
        },
        {
            content: 'Delete the event',
            trigger: '.o_cw_popover_delete',
        },
        {
            content: 'Select filter (everybody)',
            trigger: 'div[data-value="all"] input',
        },
        {
            content: 'Wait declined status',
            trigger: '.o_attendee_status_declined',
        },
    ]});

return __exports;
});
;

/*********************************************************************
*  Filepath: /account_reports/static/tests/tours/account_reports.js  *
*  Lines: 337                                                        *
*********************************************************************/
odoo.define('@account_reports/../tests/tours/account_reports', ['@account_reports/js/tours/asserts', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { Asserts } = require("@account_reports/js/tours/asserts");
const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('account_reports', {
    url: "/web?#action=account_reports.action_account_report_bs",
    steps: () => [
        //--------------------------------------------------------------------------------------------------------------
        // Foldable
        //--------------------------------------------------------------------------------------------------------------
        {
            content: "Initial foldable",
            trigger: ".o_content",
            run: () => {
                Asserts.DOMContainsNumber("tbody > tr:not(.d-none):not(.empty)", 28);
            }
        },
        {
            content: "Click to unfold line",
            trigger: "tr:nth-child(3) td:first()",
            run: "click",
        },
        {
            content: "Line is unfolded",
            trigger: "tr:nth-child(4) .name:contains('101401')",
            run: () => {
                Asserts.DOMContainsNumber("tbody > tr:not(.d-none):not(.empty)", 30);
            }
        },
        {
            content: "Click to fold line",
            trigger: "tr:nth-child(3) td:first()",
            run: "click",
        },
        {
            content: "Line is folded",
            trigger: ".o_content",
            run: () => {
                Asserts.DOMContainsNumber("tbody > tr:not(.d-none):not(.empty)", 28);
            }
        },
        //--------------------------------------------------------------------------------------------------------------
        // Footnotes
        //--------------------------------------------------------------------------------------------------------------
        // Test the initial status of footnotes - There is 2 footnotes to display
        {
            content: "Initial footnotes",
            trigger: ".o_content",
            run: () => {
                Asserts.DOMContainsNone(".footnotes");
            }
        },
        {
            content: "Unfold first line",
            trigger: "tr:nth-child(3) td:first()",
            run: "click",
        },
        {
            content: "Unfold second line",
            trigger: "tr:nth-child(6) td:first()",
            run: "click",
        },
        {
            content: "Unfold third line",
            trigger: "tr:nth-child(9) td:first()",
            run: "click",
        },
        {
            content: "Check order on lines and footnotes",
            trigger: ".o_content",
            extra_trigger: "tr:nth-child(11):not(.d-none) .name:contains('101404')",
            run: () => {
                // Check line number
                Asserts.isEqual(document.querySelector("tr:nth-child(4) sup a").textContent, "1");
                Asserts.isEqual(document.querySelector("tr:nth-child(11) sup a").textContent, "2");

                // Check line number href
                Asserts.isTrue(document.querySelector("tr:nth-child(4) sup a").href.endsWith("#footnote_1"));
                Asserts.isTrue(document.querySelector("tr:nth-child(11) sup a").href.endsWith("#footnote_2"));

                // Check footnotes
                const footnotes = document.querySelectorAll(".footnotes li");

                Asserts.isTrue(footnotes[0].textContent.includes("Footnote 101401"));
                Asserts.isTrue(footnotes[1].textContent.includes("Footnote 101404"));
            }
        },
        // Test that we can add a new footnote
        {
            content: "Click to show caret option",
            trigger: "tr:nth-child(7) .dropdown-toggle",
            run: "click",
        },
        {
            content: "Caret option is displayed",
            trigger: "tr:nth-child(7)",
            run: () => {
                Asserts.hasClass("tr:nth-child(7) .dropdown", "show");
            }
        },
        {
            content: "Click on annotate",
            trigger: "tr:nth-child(7) .dropdown-menu .dropdown-item:last-of-type:contains('Annotate')",
            run: "click"
        },
        {
            content: "Annotate is displayed",
            trigger: ".o_web_client",
            in_modal: false,
            run: () => {
                Asserts.hasClass(".o_web_client", "modal-open");
            }
        },
        {
            content: "Add text to annotate",
            trigger: "textarea",
            run: "text Footnote 121000"
        },
        {
            content: "Submit footnote",
            trigger: ".btn.btn-primary",
            run: "click"
        },
        {
            content: "Check order on lines and footnotes after new footnote added",
            trigger: ".o_content .footnotes #footnote_3",
            run: () => {
                // Check line number
                Asserts.isEqual(document.querySelector("tr:nth-child(4) sup a").textContent, "1");
                Asserts.isEqual(document.querySelector("tr:nth-child(7) sup a").textContent, "2");
                Asserts.isEqual(document.querySelector("tr:nth-child(11) sup a").textContent, "3");

                // Check line number href
                Asserts.isTrue(document.querySelector("tr:nth-child(4) sup a").href.endsWith("#footnote_1"));
                Asserts.isTrue(document.querySelector("tr:nth-child(7) sup a").href.endsWith("#footnote_2"));
                Asserts.isTrue(document.querySelector("tr:nth-child(11) sup a").href.endsWith("#footnote_3"));

                // Check footnotes
                const footnotes = document.querySelectorAll(".footnotes li");

                Asserts.isTrue(footnotes[0].textContent.includes("Footnote 101401"));
                Asserts.isTrue(footnotes[1].textContent.includes("Footnote 121000"));
                Asserts.isTrue(footnotes[2].textContent.includes("Footnote 101404"));
            }
        },
        // Test that we can edit a footnote
        {
            content: "Click to show caret option",
            trigger: "tr:nth-child(7) .dropdown-toggle",
            run: "click",
        },
        {
            content: "Click on annotate",
            trigger: "tr:nth-child(7) .dropdown-menu .dropdown-item:last-of-type:contains('Annotate')",
            run: "click"
        },
        {
            content: "Annotate contains previous text value",
            trigger: "textarea:contains('Footnote 121000')",
        },
        {
            content: "Add text to annotate",
            trigger: "textarea",
            run: "text Footnote 121000 edited"
        },
        {
            content: "Submit footnote",
            trigger: ".btn.btn-primary",
            run: "click"
        },
        {
            content: "Footnote is edited",
            trigger: "#footnote_2:contains('Footnote 121000 edited')",
        },
        // Test that we can delete a footnote by removing the text when editing
        {
            content: "Click to show caret option",
            trigger: "tr:nth-child(7) .dropdown-toggle",
            run: "click",
        },
        {
            content: "Click on annotate",
            trigger: "tr:nth-child(7) .dropdown-menu .dropdown-item:last-of-type:contains('Annotate')",
            run: "click"
        },
        {
            content: "Remove text from annotate",
            trigger: "textarea",
            run: () => {
                document.querySelector(".modal-body textarea").value = "";
            }
        },
        {
            content: "Submit footnote",
            trigger: ".btn.btn-primary",
            run: "click"
        },
        {
            content: "Check order on lines and footnotes after footnote is deleted",
            trigger: "#footnote_2:contains('Footnote 101404')",
            run: () => {
                // Check line number
                Asserts.isEqual(document.querySelector("tr:nth-child(4) sup a").textContent, "1");
                Asserts.isEqual(document.querySelector("tr:nth-child(11) sup a").textContent, "2");

                // Check line number href
                Asserts.isTrue(document.querySelector("tr:nth-child(4) sup a").href.endsWith("#footnote_1"));
                Asserts.isTrue(document.querySelector("tr:nth-child(11) sup a").href.endsWith("#footnote_2"));

                // Check footnotes
                const footnotes = document.querySelectorAll(".footnotes li");

                Asserts.isTrue(footnotes[0].textContent.includes("Footnote 101401"));
                Asserts.isTrue(footnotes[1].textContent.includes("Footnote 101404"));
            }
        },
        // Test that we can delete a footnote by clicking on the trash can next to it
        {
            content: "Click on trash can",
            trigger: "#footnote_1 .fa-trash-o",
            run: "click"
        },
        {
            content: "Check order on lines and footnotes after footnote is deleted",
            trigger: "#footnote_1:contains('Footnote 101404')",
            run: () => {
                // Check line number
                Asserts.isEqual(document.querySelector("tr:nth-child(11) sup a").textContent, "1");

                // Check line number href
                Asserts.isTrue(document.querySelector("tr:nth-child(11) sup a").href.endsWith("#footnote_1"));

                // Check footnotes
                const footnotes = document.querySelectorAll(".footnotes li");

                Asserts.isTrue(footnotes[0].textContent.includes("Footnote 101404"));
            }
        },
        //--------------------------------------------------------------------------------------------------------------
        // Sortable
        //--------------------------------------------------------------------------------------------------------------
        {
            content: "Initial sortable",
            trigger: ".o_content",
            run: () => {
                // Bank and Cash Accounts
                Asserts.isEqual(document.querySelector("tr:nth-child(4) td:nth-child(2)").textContent, "75.00");
                Asserts.isEqual(document.querySelector("tr:nth-child(5) td:nth-child(2)").textContent, "75.00");

                // Receivables
                Asserts.isEqual(document.querySelector("tr:nth-child(7) td:nth-child(2)").textContent, "25.00");
                Asserts.isEqual(document.querySelector("tr:nth-child(8) td:nth-child(2)").textContent, "25.00");

                // Current Assets
                Asserts.isEqual(document.querySelector("tr:nth-child(10) td:nth-child(2)").textContent, "100.00");
                Asserts.isEqual(document.querySelector("tr:nth-child(11) td:nth-child(2)").textContent, "50.00");
                Asserts.isEqual(document.querySelector("tr:nth-child(12) td:nth-child(2)").textContent, "150.00");
            }
        },
        {
            content: "Click sort",
            trigger: "th .btn_sortable",
            run: "click"
        },
        {
            content: "Sortable (asc)",
            trigger: "tr:nth-child(17) td:nth-child(2):contains('25.00')",
            run: () => {
                // Receivables
                Asserts.isEqual(document.querySelector("tr:nth-child(17) td:nth-child(2)").textContent, "25.00");
                Asserts.isEqual(document.querySelector("tr:nth-child(19) td:nth-child(2)").textContent, "25.00");

                // Bank and Cash Accounts
                Asserts.isEqual(document.querySelector("tr:nth-child(21) td:nth-child(2)").textContent, "75.00");
                Asserts.isEqual(document.querySelector("tr:nth-child(22) td:nth-child(2)").textContent, "75.00");

                // Current Assets
                Asserts.isEqual(document.querySelector("tr:nth-child(24) td:nth-child(2)").textContent, "50.00");
                Asserts.isEqual(document.querySelector("tr:nth-child(25) td:nth-child(2)").textContent, "100.00");
                Asserts.isEqual(document.querySelector("tr:nth-child(26) td:nth-child(2)").textContent, "150.00");
            }
        },
        {
            content: "Click sort",
            trigger: "th .btn_sortable",
            run: "click"
        },
        {
            content: "Sortable (desc)",
            trigger: "tr:nth-child(4) td:nth-child(2):contains('100.00')",
            run: () => {
                // Current Assets
                Asserts.isEqual(document.querySelector("tr:nth-child(4) td:nth-child(2)").textContent, "100.00");
                Asserts.isEqual(document.querySelector("tr:nth-child(5) td:nth-child(2)").textContent, "50.00");
                Asserts.isEqual(document.querySelector("tr:nth-child(6) td:nth-child(2)").textContent, "150.00");

                // Bank and Cash Accounts
                Asserts.isEqual(document.querySelector("tr:nth-child(8) td:nth-child(2)").textContent, "75.00");
                Asserts.isEqual(document.querySelector("tr:nth-child(9) td:nth-child(2)").textContent, "75.00");

                // Receivables
                Asserts.isEqual(document.querySelector("tr:nth-child(11) td:nth-child(2)").textContent, "25.00");
                Asserts.isEqual(document.querySelector("tr:nth-child(12) td:nth-child(2)").textContent, "25.00");
            }
        },
        {
            content: "Click sort",
            trigger: "th .btn_sortable",
            run: "click"
        },
        {
            content: "Sortable (reset)",
            trigger: "tr:nth-child(4) td:nth-child(2):contains('75.00')",
            run: () => {
                // Bank and Cash Accounts
                Asserts.isEqual(document.querySelector("tr:nth-child(4) td:nth-child(2)").textContent, "75.00");
                Asserts.isEqual(document.querySelector("tr:nth-child(5) td:nth-child(2)").textContent, "75.00");

                // Receivables
                Asserts.isEqual(document.querySelector("tr:nth-child(7) td:nth-child(2)").textContent, "25.00");
                Asserts.isEqual(document.querySelector("tr:nth-child(8) td:nth-child(2)").textContent, "25.00");

                // Current Assets
                Asserts.isEqual(document.querySelector("tr:nth-child(10) td:nth-child(2)").textContent, "100.00");
                Asserts.isEqual(document.querySelector("tr:nth-child(11) td:nth-child(2)").textContent, "50.00");
                Asserts.isEqual(document.querySelector("tr:nth-child(12) td:nth-child(2)").textContent, "150.00");
            }
        },
    ],
});

return __exports;
});
;

/****************************************************************************
*  Filepath: /account_reports/static/tests/tours/account_reports_search.js  *
*  Lines: 48                                                                *
****************************************************************************/
odoo.define('@account_reports/../tests/tours/account_reports_search', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('account_reports_search', {
    test: false,
    url: '/web?#action=account_reports.action_account_report_general_ledger',
    steps: () => [
        {
            content: "click search",
            trigger: '.o_searchview_input',
            run: 'click',
        },
        {
            content: 'insert text in the searchbar',
            trigger: '.o_searchview_input',
            run: 'text 40'
        },
        {
            content: 'test if the product sale line is present',
            trigger: '.line_name:contains("400000 Product Sales")',
        },
        {
            content: "click search",
            trigger: '.o_searchview_input',
            run: 'click',
        },
        {
            content: 'insert text in the search bar',
            trigger: '.o_searchview_input',
            run: 'text Account'
        },
        {
            content: 'test if the receivable line is present',
            trigger: '.line_name:contains("121000 Account Receivable")',
        },
        {
            content: 'check that the product sale line is not present',
            trigger: '.line_name:not(:contains("400000 Product Sales"))',
        },
    ]
});

return __exports;
});
;

/******************************************************************************
*  Filepath: /account_reports/static/tests/tours/account_reports_sections.js  *
*  Lines: 101                                                                 *
******************************************************************************/
odoo.define('@account_reports/../tests/tours/account_reports_sections', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('account_reports_sections', {
    test: true,
    url: "/web?#action=account_reports.action_account_report_gt",
    steps: () => [
        {
            content: "Open variant selector",
            trigger: "#filter_variant button",
            run: 'click',
        },
        {
            content: "Select the test variant using sections",
            trigger: ".dropdown-item:contains('Test Sections')",
            run: 'click',
        },
        {
            content: "Check the lines of section 1 are displayed",
            trigger: ".line_name:contains('Section 1 line')",
            run: function(){},
        },
        {
            content: "Check the columns of section 1 are displayed",
            trigger: "#table_header th:last():contains('Column 1')",
            run: function(){},
        },
        {
            content: "Check the export buttons belong to the composite report",
            trigger: ".btn:contains('composite_report_custom_button')",
            run: function(){},
        },
        {
            content: "Check the filters displayed belong to section 1 (journals filter is not enabled on section 2, nor the composite report)",
            trigger: "#filter_journal",
            run: function(){},
        },
        {
            content: "Check the date chosen by default",
            trigger: "#filter_date button:contains('2023')",
            run: function(){},
        },
        {
            content: "Switch to section 2",
            trigger: "#section_selector .btn:contains('Section 2')",
            run: 'click',
        },
        {
            content: "Check the lines of section 2 are displayed",
            trigger: ".line_name:contains('Section 2 line')",
            run: function(){},
        },
        {
            content: "Check the columns of section 2 are displayed",
            trigger: "#table_header th:last():contains('Column 2')",
            run: function(){},
        },
        {
            content: "Check the export buttons belong to the composite report",
            trigger: ".btn:contains('composite_report_custom_button')",
            run: function(){},
        },
        {
            content: "Check the filters displayed belong to section 2 (comparison filter is not enabled on section 1, nor the composite report)",
            trigger: "#filter_comparison",
            run: function(){},
        },
        {
            content: "Open date switcher",
            trigger: "#filter_date button",
            run: 'click',
        },
        {
            content: "Select another date",
            trigger: "#filter_date span:contains('Last Financial Year')",
            run: 'click'
        },
        {
            content: "Wait for refresh",
            trigger: "#filter_date button:contains('2022')",
            run: function(){},
        },
        {
            content: "Switch back to section 1",
            trigger: "#section_selector .btn:contains('Section 1')",
            run: 'click',
        },
        {
            content: "Check the date chosen on section 2 has been propagated to section 1",
            trigger: "#filter_date button:contains('2022')",
            run: function(){},
        },
    ]
});

return __exports;
});
;

/*****************************************************************************
*  Filepath: /account_reports/static/tests/tours/account_reports_widgets.js  *
*  Lines: 55                                                                 *
*****************************************************************************/
odoo.define('@account_reports/../tests/tours/account_reports_widgets', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('account_reports_widgets', {
    test: true,
    url: '/web?#action=account_reports.action_account_report_pl',
    steps: () => [
        {
            content: "change date filter",
            trigger: "#filter_date button",
            run: 'click',
        },
        {
            content: "change date filter",
            trigger: "#filter_date span:contains('Last Financial Year')",
            run: 'click'
        },
        {
            content: "wait refresh",
            trigger: "#filter_date button:contains('2019')",
        },
        {
            content: "change comparison filter",
            trigger: "#filter_comparison .btn:first()",
            run: 'click',
        },
        {
            content: "wait for Apply button and click on it",
            trigger: "#filter_comparison .dropdown-menu .btn:first()",
            run: 'click',
        },
        {
            content: "wait refresh, report should have 4 columns",
            trigger: "th + th + th + th",
            run: function(){},
        },
        {
            title: "open dropdown",
            trigger: ".o_control_panel_main_buttons .dropdown-toggle",
            run: 'click',
        },
        {
            title: "export xlsx",
            trigger: "button:contains('XLSX')",
            run: 'click'
        },
    ]
});

return __exports;
});
;

/******************************************************************
*  Filepath: /survey/static/tests/tours/certification_failure.js  *
*  Lines: 112                                                     *
******************************************************************/
odoo.define('@survey/../tests/tours/certification_failure', ['survey.form', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const SurveyFormWidget = require("survey.form");
/**
 * Speed up fade-in fade-out to avoid useless delay in tests.
 */
SurveyFormWidget.include({
    _submitForm: function () {
        this.fadeInOutDelay = 0;
        return this._super.apply(this, arguments);
    }
});

/**
 * This tour will test that, for the demo certification allowing 2 attempts, a user can
 * try and fail twice and will no longer be able to take the certification.
 */

const { registry } = require("@web/core/registry");

var failSteps = [{ // Page-1
    content: "Clicking on Start Certification",
    trigger: 'button.btn.btn-primary.btn-lg:contains("Start Certification")',
}, { // Question: Do we sell Acoustic Bloc Screens?
    content: "Selecting answer 'No'",
    trigger: 'div.js_question-wrapper:contains("Do we sell Acoustic Bloc Screens") label:contains("No")',
}, { // Question: Select all the existing products
    content: "Ticking answer 'Fanta'",
    trigger: 'div.js_question-wrapper:contains("Select all the existing products") label:contains("Fanta")'
}, {
    content: "Ticking answer 'Drawer'",
    trigger: 'div.js_question-wrapper:contains("Select all the existing products") label:contains("Drawer")'
}, {
    content: "Ticking answer 'Conference chair'",
    trigger: 'div.js_question-wrapper:contains("Select all the existing products") label:contains("Conference chair")'
}, { // Question: Select all the available customizations for our Customizable Desk
    content: "Ticking answer 'Color'",
    trigger: 'div.js_question-wrapper:contains("Select all the available customizations for our Customizable Desk") label:contains("Color")'
}, {
    content: "Ticking answer 'Height'",
    trigger: 'div.js_question-wrapper:contains("Select all the available customizations for our Customizable Desk") label:contains("Height")'
}, { // Question: How many versions of the Corner Desk do we have?
    content: "Selecting answer '2'",
    trigger: 'div.js_question-wrapper:contains("How many versions of the Corner Desk do we have") label:contains("2")',
}, { // Question: Do you think we have missing products in our catalog? (not rated)
    content: "Missing products",
    trigger: 'div.js_question-wrapper:contains("Do you think we have missing products in our catalog") textarea',
    run: "text I don't know products enough to be able to answer that",
}, { // Page-2 Question: How much do we sell our Cable Management Box?
    content: "Selecting answer '$80'",
    trigger: 'div.js_question-wrapper:contains("How much do we sell our Cable Management Box") label:contains("$80")',
}, { // Question: Select all the products that sell for $100 or more
    content: "Ticking answer 'Corner Desk Right Sit'",
    trigger: 'div.js_question-wrapper:contains("Select all the products that sell for $100 or more") label:contains("Corner Desk Right Sit")'
}, {
    content: "Ticking answer 'Desk Combination'",
    trigger: 'div.js_question-wrapper:contains("Select all the products that sell for $100 or more") label:contains("Desk Combination")'
}, {
    content: "Ticking answer 'Office Chair Black'",
    trigger: 'div.js_question-wrapper:contains("Select all the products that sell for $100 or more") label:contains("Office Chair Black")'
}, { // Question: What do you think about our prices (not rated)?
    trigger: 'div.js_question-wrapper:contains("What do you think about our prices") label:contains("Correctly priced")',
}, { // Page-3 Question: How many days is our money-back guarantee?
    content: "Inputting answer '60'",
    trigger: 'div.js_question-wrapper:contains("How many days is our money-back guarantee") input',
    run: 'text 60'
}, { // Question: If a customer purchases a product on 6 January 2020, what is the latest day we expect to ship it?
    content: "Inputting answer '01/06/2020'",
    trigger: 'div.js_question-wrapper:contains("If a customer purchases a product on 6 January 2020, what is the latest day we expect to ship it") input',
    run: 'text 01/06/2020'
}, { // Question: If a customer purchases a 1 year warranty on 6 January 2020, when do we expect the warranty to expire?
    content: "Inputting answer '01/06/2021 00:00:01'",
    trigger: 'div.js_question-wrapper:contains("If a customer purchases a 1 year warranty on 6 January 2020, when do we expect the warranty to expire") input',
    run: 'text 01/06/2021 00:00:01'
}, { // Question: What day to you think is best for us to start having an annual sale (not rated)?
    trigger: 'div.js_question-wrapper:contains("What day to you think is best for us to start having an annual sale (not rated)") input',
}, { // Question: What day and time do you think most customers are most likely to call customer service (not rated)?
    trigger: 'div.js_question-wrapper:contains("What day and time do you think most customers are most likely to call customer service (not rated)") input',
}, { // Question: How many chairs do you think we should aim to sell in a year (not rated)?
    content: "Inputting answer '0'",
    trigger: 'div.js_question-wrapper:contains("How many chairs do you think we should aim to sell in a year (not rated)") input',
    run: 'text 0'
}, {
    content: "Finish Survey",
    trigger: 'button[type="submit"]',
}];

var retrySteps = [{
    trigger: 'a:contains("Retry")'
}];

var lastSteps = [{
    trigger: 'h1:contains("Thank you!")',
    run: function () {
        if ($('a:contains("Retry")').length === 0) {
            $('h1:contains("Thank you!")').addClass('tour_success');
        }
    }
}, {
    trigger: 'h1.tour_success',
}];

registry.category("web_tour.tours").add('test_certification_failure', {
    test: true,
    url: '/survey/start/4ead4bc8-b8f2-4760-a682-1fde8daaaaac',
    steps: () => [].concat(failSteps, retrySteps, failSteps, lastSteps) });

return __exports;
});
;

/******************************************************************
*  Filepath: /survey/static/tests/tours/certification_success.js  *
*  Lines: 102                                                     *
******************************************************************/
odoo.define('@survey/../tests/tours/certification_success', ['survey.form', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const SurveyFormWidget = require("survey.form");
/**
 * Speed up fade-in fade-out to avoid useless delay in tests.
 */
SurveyFormWidget.include({
    _submitForm: function () {
        this.fadeInOutDelay = 0;
        return this._super.apply(this, arguments);
    }
});

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('test_certification_success', {
    test: true,
    url: '/survey/start/4ead4bc8-b8f2-4760-a682-1fde8daaaaac',
    steps: () => [{ // Page-1
        content: "Clicking on Start Certification",
        trigger: 'button.btn.btn-primary.btn-lg:contains("Start Certification")',
    }, { // Question: Do we sell Acoustic Bloc Screens?
        content: "Selecting answer 'Yes'",
        trigger: 'div.js_question-wrapper:contains("Do we sell Acoustic Bloc Screens") label:contains("Yes")',
    }, { // Question: Select all the existing products
        content: "Ticking answer 'Chair floor protection'",
        trigger: 'div.js_question-wrapper:contains("Select all the existing products") label:contains("Chair floor protection")'
    }, {
        content: "Ticking answer 'Drawer'",
        trigger: 'div.js_question-wrapper:contains("Select all the existing products") label:contains("Drawer")'
    }, {
        content: "Ticking answer 'Conference chair'",
        trigger: 'div.js_question-wrapper:contains("Select all the existing products") label:contains("Conference chair")'
    }, { // Question: Select all the available customizations for our Customizable Desk
        content: "Ticking answer 'Color'",
        trigger: 'div.js_question-wrapper:contains("Select all the available customizations for our Customizable Desk") label:contains("Color")'
    }, {
        content: "Ticking answer 'Legs'",
        trigger: 'div.js_question-wrapper:contains("Select all the available customizations for our Customizable Desk") label:contains("Legs")'
    }, { // Question: How many versions of the Corner Desk do we have?
        content: "Selecting answer '2'",
        trigger: 'div.js_question-wrapper:contains("How many versions of the Corner Desk do we have") label:contains("2")',
    }, { // Question: Do you think we have missing products in our catalog? (not rated)
        content: "Missing products",
        trigger: 'div.js_question-wrapper:contains("Do you think we have missing products in our catalog") textarea',
        run: "text I think we should make more versions of the customizable desk, it's such an amazing product!",
    }, { // Page-2 Question: How much do we sell our Cable Management Box?
        content: "Selecting answer '$80' (wrong one)",
        trigger: 'div.js_question-wrapper:contains("How much do we sell our Cable Management Box") label:contains("$80")',
    }, { // Question: Select all the products that sell for $100 or more
        content: "Ticking answer 'Corner Desk Right Sit'",
        trigger: 'div.js_question-wrapper:contains("Select all the products that sell for $100 or more") label:contains("Corner Desk Right Sit")'
    }, {
        content: "Ticking answer 'Desk Combination'",
        trigger: 'div.js_question-wrapper:contains("Select all the products that sell for $100 or more") label:contains("Desk Combination")'
    }, {
        content: "Ticking answer 'Large Desk'",
        trigger: 'div.js_question-wrapper:contains("Select all the products that sell for $100 or more") label:contains("Large Desk")'
    }, { // Question: What do you think about our prices (not rated)?
        content: "Selecting answer 'Underpriced'",
        trigger: 'div.js_question-wrapper:contains("What do you think about our prices") label:contains("Underpriced")',
    }, { // Page-3 Question: How many days is our money-back guarantee?
        content: "Inputting answer '30'",
        trigger: 'div.js_question-wrapper:contains("How many days is our money-back guarantee") input',
        run: 'text 30'
    }, { // Question: If a customer purchases a product on 6 January 2020, what is the latest day we expect to ship it?
        content: "Inputting answer '01/08/2020'",
        trigger: 'div.js_question-wrapper:contains("If a customer purchases a product on 6 January 2020, what is the latest day we expect to ship it") input',
        run: 'text 01/08/2020'
    }, { // Question: If a customer purchases a 1 year warranty on 6 January 2020, when do we expect the warranty to expire?
        content: "Inputting answer '01/07/2021 00:00:01'",
        trigger: 'div.js_question-wrapper:contains("If a customer purchases a 1 year warranty on 6 January 2020, when do we expect the warranty to expire") input',
        run: 'text 01/07/2021 00:00:01'
    }, { // Question: What day to you think is best for us to start having an annual sale (not rated)?
        content: "Inputting answer '01/01/2021'",
        trigger: 'div.js_question-wrapper:contains("What day to you think is best for us to start having an annual sale (not rated)") input',
        run: 'text 01/01/2021'
    }, { // Question: What day and time do you think most customers are most likely to call customer service (not rated)?
        content: "Inputting answer '01/01/2021 13:00:01'",
        trigger: 'div.js_question-wrapper:contains("What day and time do you think most customers are most likely to call customer service (not rated)") input',
        run: 'text 01/01/2021 13:00:01'
    }, { // Question: How many chairs do you think we should aim to sell in a year (not rated)?
        content: "Inputting answer '1000'",
        trigger: 'div.js_question-wrapper:contains("How many chairs do you think we should aim to sell in a year (not rated)") input',
        run: 'text 1000'
    }, {
        content: "Finish Survey",
        trigger: 'button[type="submit"]',
    }, {
        content: "Thank you",
        trigger: 'h1:contains("Thank you!")',
    }, {
        content: "test passed",
        trigger: 'div:contains("Congratulations, you have passed the test!")',
    }
]});

return __exports;
});
;

/***************************************************
*  Filepath: /survey/static/tests/tours/survey.js  *
*  Lines: 73                                       *
***************************************************/
odoo.define('@survey/../tests/tours/survey', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('test_survey', {
    test: true,
    url: '/survey/start/b137640d-14d4-4748-9ef6-344caaaaaae',
    steps: () => [
    // Page-1
    {
        content: 'Click on Start',
        trigger: 'button.btn:contains("Start")',
    }, {
        content: 'Answer Where do you live',
        trigger: 'div.js_question-wrapper:contains("Where do you live") input',
        run: 'text Mordor-les-bains',
    }, {
        content: 'Answer Where do you live',
        trigger: 'div.js_question-wrapper:contains("When is your date of birth") input',
        run: 'text 05/05/1980',
    }, {
        content: 'Answer How frequently do you buy products online',
        trigger: 'div.js_question-wrapper:contains("How frequently do you buy products online") label:contains("Once a month")',
    }, {
        content: 'Answer How many times did you order products on our website',
        trigger: 'div.js_question-wrapper:contains("How many times did you order products on our website") input',
        run: 'text 12',
    }, {
        content: 'Submit and go to Next Page',
        trigger: 'button[value="next"]',
    },
    // Page-2
    {
        content: 'Answer Which of the following words would you use to describe our products (High Quality)',
        trigger: 'div.js_question-wrapper:contains("Which of the following words would you use to describe our products") label:contains("High quality")',
    }, {
        content: 'Answer Which of the following words would you use to describe our products (Good value for money)',
        trigger: 'div.js_question-wrapper:contains("Which of the following words would you use to describe our products") label:contains("Good value for money")',
    }, {
        content: 'Answer What do your think about our new eCommerce (The new layout and design is fresh and up-to-date)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The new layout and design is fresh and up-to-date") td:first',
    }, {
        content: 'Answer What do your think about our new eCommerce (It is easy to find the product that I want)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("It is easy to find the product that I want") td:eq(2)',
    }, {
        content: 'Answer What do your think about our new eCommerce (The tool to compare the products is useful to make a choice)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The tool to compare the products is useful to make a choice") td:eq(3)',
    }, {
        content: 'Answer What do your think about our new eCommerce (The checkout process is clear and secure)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The checkout process is clear and secure") td:eq(2)',
    }, {
        content: 'Answer What do your think about our new eCommerce (I have added products to my wishlist)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("I have added products to my wishlist") td:last',
    }, {
        content: 'Answer Do you have any other comments, questions, or concerns',
        trigger: 'div.js_question-wrapper:contains("Do you have any other comments, questions, or concerns") textarea',
        run: 'text This is great. Really.',
    }, {
        content: 'Click Submit and finish the survey',
        trigger: 'button[value="finish"]',
    },
    // Final page
    {
        content: 'Thank you',
        trigger: 'h1:contains("Thank you!")',
    }
]});

return __exports;
});
;

/*********************************************************************************
*  Filepath: /survey/static/tests/tours/survey_chained_conditional_questions.js  *
*  Lines: 49                                                                     *
*********************************************************************************/
odoo.define('@survey/../tests/tours/survey_chained_conditional_questions', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('test_survey_chained_conditional_questions', {
    test: true,
    url: '/survey/start/3cfadce3-3f7e-41da-920d-10fa0eb19527',
    steps: () => [
    {
        content: 'Click on Start',
        trigger: 'button.btn:contains("Start")',
    }, {
        content: 'Answer Q1 with Answer 1',
        trigger: 'div.js_question-wrapper:contains("Q1") label:contains("Answer 1")',
    }, {
        content: 'Answer Q2 with Answer 1',
        trigger: 'div.js_question-wrapper:contains("Q2") label:contains("Answer 1")',
    }, {
        content: 'Answer Q3 with Answer 1',
        trigger: 'div.js_question-wrapper:contains("Q3") label:contains("Answer 1")',
    }, {
        content: 'Answer Q1 with Answer 2',  // This should hide all remaining questions.
        trigger: 'div.js_question-wrapper:contains("Q1") label:contains("Answer 2")',
    }, {
        content: 'Check that only question 1 is now visible',
        trigger: 'div.js_question-wrapper:contains("Q1")',
        run: () => {
            const selector = 'div.js_question-wrapper.d-none';
            if (document.querySelectorAll(selector).length !== 2) {
                throw new Error('Q2 and Q3 should have been hidden.');
            }
        }
    }, {
        content: 'Click Submit and finish the survey',
        trigger: 'button[value="finish"]',
    },
    // Final page
    {
        content: 'Thank you',
        trigger: 'h1:contains("Thank you!")',
    }

]});

return __exports;
});
;

/********************************************************
*  Filepath: /survey/static/tests/tours/survey_form.js  *
*  Lines: 286                                           *
********************************************************/
odoo.define('@survey/../tests/tours/survey_form', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('survey_tour_test_survey_form_triggers', {
    test: true,
    url: '/web',
    steps: () => [
    stepUtils.showAppsMenuItem(),
    {
        content: 'Go to Survey',
        trigger: '.o_app[data-menu-xmlid="survey.menu_surveys"]',
    }, {
        content: "Create a new survey",
        trigger: ".o-kanban-button-new",
    }, {
        content: "Set the Survey's title",
        trigger: ".o_field_widget[name=title] textarea",
        run: "text Test survey",
    }, {
        content: "Add a first question",
        trigger: "td.o_field_x2many_list_row_add a",
    }, {
        content: "Set the first question's title",
        trigger: ".modal-content .o_field_widget[name=title] input",
        run: "text Question 1",
    },
    ...addTwoAnswers(),
    ...saveAndNew(),
    {
        content: "Set the second question's title",
        trigger: ".o_field_widget[name=title] input",
        run: "text Question 2",
        in_modal: true,
    },
    ...addTwoAnswers(),
    ...toggleIsConditional(),
    {
        content: "Set a trigger question for the first question",
        trigger: ".o_field_widget[name=triggering_question_id] input",
        run: "click",
        in_modal: true,
    }, {
        content: "Set the first question as trigger",
        trigger: 'ul.ui-autocomplete a:contains("Question 1")',
        run: 'click',
        in_modal: true,
    }, {
        content: "Set a trigger answer for first question",
        trigger: ".modal-content .o_field_widget[name=triggering_answer_id] input",
        run: "click",
        in_modal: true,
    }, {
        content: "Set the first answer as trigger",
        trigger: 'ul.ui-autocomplete a:contains("Answer A")',
        run: 'click',
    },
    ...changeTab("answers"),
    ...saveAndNew(),
    {
        content: "Set the third question's title",
        trigger: ".o_field_widget[name=title] input",
        run: "text Question 3",
        in_modal: true,
    },
    ...addTwoAnswers(),
    ...toggleIsConditional(),
    {
        content: "Set a trigger question for the second question",
        trigger: ".o_field_widget[name=triggering_question_id] input",
        run: "click",
        in_modal: true,
    }, {
        content: "Set the second question as trigger",
        trigger: 'ul.ui-autocomplete a:contains("Question 2")',
        run: 'click',
        in_modal: true,
    }, {
        content: "Set a trigger answer for second question",
        trigger: ".modal-content .o_field_widget[name=triggering_answer_id] input",
        run: "click",
        in_modal: true,
    }, {
        content: "Set the second answer as trigger",
        trigger: 'ul.ui-autocomplete a:contains("Answer B")',
        run: 'click',
    },
    ...changeTab("answers"),
    ...stepUtils.saveForm(),
    // Q2 and Q3 should have fa-fork icons. Assumes that the Trigger widget's column is 2 places after the title's.
    {
        content: "Check that Question 2 has 'normal' trigger icon",
        trigger: "tr:contains('Question 2') button i.fa-code-fork",
        run: () => {}, // it's a check
    }, {
        content: "Check that Question 3 has 'normal' trigger icon",
        trigger: "tr:contains('Question 3') button i.fa-code-fork",
        run: () => {}, // it's a check
    }, {
        content: "Move Question 3 above its trigger (Question 2)",
        trigger: "tr.o_data_row:nth-child(3) td[name=sequence]",
        run: "drag_and_drop_native div[name=question_and_page_ids] table tbody tr:nth-child(2)",
    }, {
        content: "Check that Question 3 has 'warning' trigger icon",
        trigger: "tr:contains('Question 3') button i.fa-exclamation-triangle",
        run: () => {}, // it's a check
    }, {
        content: "Open that question to check the server's misplacement evaluation agrees",
        trigger: "tr.o_data_row td[data-tooltip='Question 3']",
        run: "click",
    }, {
        content: "Check that an alert is shown",
        trigger: ".o_form_sheet_bg div:first-child.alert-warning:contains('positioned before its trigger')",
        in_modal: true,
    },
    ...changeTab("options"),
    {
        content: "Change trigger question",
        trigger: ".o_field_widget[name=triggering_question_id] input",
        run: "click",
        in_modal: true,
    }, {
        content: "Set the first question as trigger instead",
        trigger: 'ul.ui-autocomplete a:contains("Question 1")',
        run: 'click',
        in_modal: true,
    }, {
        content: "Check that the alert is gone",
        trigger: `.o_form_sheet_bg div:first-child:not(.alert-warning).o_form_sheet`,
        in_modal: true,
        run: () => {}, // it's a check
    }, {
        content: "Change the trigger answer as well",
        trigger: ".modal-content .o_field_widget[name=triggering_answer_id] input",
        run: "click",
        in_modal: true,
    }, {
        content: "Set the second answer as trigger, then",
        trigger: 'ul.ui-autocomplete a:contains("Answer B")',
        run: 'click',
    },
    ...stepUtils.saveForm(),
     {
        content: "Check that Question 3 has its 'normal' trigger icon back",
        trigger: "tr:contains('Question 3') button i.fa-code-fork",
        run: () => {}, // it's a check
    }, {
        content: "Move Question 3 back below Question 2",
        trigger: "tr.o_data_row:nth-child(2) td[name=sequence]",
        run: "drag_and_drop_native div[name=question_and_page_ids] table tbody tr:nth-child(3)",
    }, {
        content: "Open that question again",
        trigger: "tr.o_data_row td[data-tooltip='Question 3']",
        run: "click",
    },
    ...changeTab("options"),
    {
        content: "Change trigger to confirm we can now use Question 2 again",
        trigger: ".modal-content .o_field_widget[name=triggering_question_id] input",
        run: "click",
        in_modal: true,
    }, {
        content: "Question 2 is allowed as trigger again",
        trigger: '.modal-content ul.ui-autocomplete a:contains("Question 2")',
        in_modal: true,
    }, {
        content: "Change the trigger answer back as well",
        trigger: ".modal-content .o_field_widget[name=triggering_answer_id] input",
        run: "text A",
        in_modal: true,
    }, {
        content: "Set the second answer as trigger, then",
        trigger: '.modal-content ul.ui-autocomplete a:contains("Answer B")',
        run: "click",
    },
    ...stepUtils.saveForm(),
    // Deleting trigger answers or whole question gracefully remove the trigger automatically
    {
        content: "Open Question 2 again",
        trigger: "tr.o_data_row td[data-tooltip='Question 2']",
        run: "click",
    }, {
        content: "Delete Answer B",
        trigger: "div[name=suggested_answer_ids] tr:contains('Answer B') button[name=delete]",
    },
    ...stepUtils.saveForm(),
    {
        content: "Check that Question 3 no longer has a trigger icon",
        trigger: "div[name=question_and_page_ids] tr:contains('Question 3') div.o_widget_survey_question_trigger:not(:has(button))",
        allowInvisible: true,
        run: () => {}, // it's a check
    }, {
        content: "Check that Question 2 however still has a trigger icon",
        trigger: "tr:contains('Question 2') button i.fa-code-fork",
        run: () => {}, // it's a check
    }, {
        content: "Delete Question 1",
        trigger: "tr:contains('Question 1') button[name=delete]",
        run: "click",
    }, {
        content: "Check that now Question 2 too does no longer have a trigger icon",
        trigger: "tr:contains('Question 2') div.o_widget_survey_question_trigger:not(:has(button))",
        allowInvisible: true,
        run: () => {}, // it's a check
    }, {
        content: 'Go back to Kanban View',
        trigger: '[data-menu-xmlid="survey.menu_survey_form"]',
    }, {
        content: "Check that we arrived on the kanban view",
        trigger: ".o-kanban-button-new",
        run: () => {}, // it's a check
    }
]});

function addTwoAnswers() {
    return [
        {
            content: "Add the first answer",
            trigger: "div[name=suggested_answer_ids] .o_field_x2many_list_row_add a",
            in_modal: true,
        }, {
            trigger: 'tr.o_selected_row div[name=value] input',
            run: 'text Answer A',
            in_modal: true,
        }, {
            content: "Add the second answer",
            trigger: "div[name=suggested_answer_ids] .o_field_x2many_list_row_add a",
            in_modal: true,
        }, {
            trigger: 'tr:nth-child(2).o_selected_row div[name=value] input',
            run: 'text Answer B',
            in_modal: true,
        }
    ];
}

function saveAndNew() {
    return [
        {
            content: "Click Save & New",
            trigger: "button.o_form_button_save_new",
            in_modal: true,
        }, {
            content: "Wait for the dialog to render new question form",
            // suggested_answer_ids required even though in_modal is specified...
            trigger: "div[name=suggested_answer_ids] .o_list_table tbody tr:first-child:not(.o_data_row)", // empty answers list
            in_modal: true,
            run: () => {}, // it's a check
        }
    ];
}

function toggleIsConditional() {
    return [
        ...changeTab("options"),
        {
            content: "Toggle is_conditional",
            trigger: "div[name=is_conditional] input",
            in_modal: true,
            run: "click",
        }
    ];
}

function changeTab(tabName) {
    // Currently, .modal-content is required even though "in_modal"
    return [
        {
            content: `Go to ${tabName} tab`,
            trigger: `.modal-content a[name=${tabName}].nav-link`,
            in_modal: true
        }, {
            content: `Wait for tab ${tabName} tab`,
            trigger: `.modal-content a[name=${tabName}].nav-link.active`,
            in_modal: true,
            run: () => {}, // it's a check
        }
    ];
}

return __exports;
});
;

/***********************************************************
*  Filepath: /survey/static/tests/tours/survey_prefill.js  *
*  Lines: 157                                              *
***********************************************************/
odoo.define('@survey/../tests/tours/survey_prefill', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('test_survey_prefill', {
    test: true,
    url: '/survey/start/b137640d-14d4-4748-9ef6-344caaaaaae',
    steps: () => [{      // Page-1
        trigger: 'button.btn.btn-primary.btn-lg:contains("Start Survey")',
    }, { // Question: Where do you live?
        trigger: 'div.js_question-wrapper:contains("Where do you live?") input',
        run: 'text Grand-Rosiere',
    }, { // Question: When is your date of birth?
        trigger: 'div.js_question-wrapper:contains("When is your date of birth?") input',
        run: 'text 05/05/1980',
    }, { // Question: How frequently do you buy products online?
        trigger: 'div.js_question-wrapper:contains("How frequently do you buy products online?") label:contains("Once a week")',
    }, { // Question: How many times did you order products on our website?
        trigger: 'div.js_question-wrapper:contains("How many times did you order products on our website?") input',
        run: 'text 42',
    }, {
        content: 'Click on Next Page',
        trigger: 'button[value="next"]',
    },
    // Page-2
    { // Question: Which of the following words would you use to describe our products?
        content: 'Answer Which of the following words would you use to describe our products (High Quality)',
        trigger: 'div.js_question-wrapper:contains("Which of the following words would you use to describe our products") label:contains("High quality")',
    }, {
        content: 'Answer Which of the following words would you use to describe our products (Good value for money)',
        trigger: 'div.js_question-wrapper:contains("Which of the following words would you use to describe our products") label:contains("Good value for money")',
    }, {
        content: 'Answer What do your think about our new eCommerce (The new layout and design is fresh and up-to-date)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The new layout and design is fresh and up-to-date") td:first',
    }, {
        content: 'Answer What do your think about our new eCommerce (It is easy to find the product that I want)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("It is easy to find the product that I want") td:eq(2)',
    }, {
        content: 'Answer What do your think about our new eCommerce (The tool to compare the products is useful to make a choice)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The tool to compare the products is useful to make a choice") td:eq(3)',
    }, {
        content: 'Answer What do your think about our new eCommerce (The checkout process is clear and secure)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The checkout process is clear and secure") td:eq(2)',
    }, {
        content: 'Answer What do your think about our new eCommerce (I have added products to my wishlist)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("I have added products to my wishlist") td:last',
    }, {
        content: 'Answer Do you have any other comments, questions, or concerns',
        trigger: 'div.js_question-wrapper:contains("Do you have any other comments, questions, or concerns") textarea',
        run: 'text Is the prefill working?',
    }, {
        // Go back to previous page
        content: 'Click on the previous page name in the breadcrumb',
        trigger: 'ol.breadcrumb a:first',
    }, {
        trigger: 'div.js_question-wrapper:contains("How many times did you order products on our website?") input',
        run: function () {
            var $inputQ3 = $('div.js_question-wrapper:contains("How many times did you order products on our website?") input');
            if ($inputQ3.val() === '42.0') {
                $('.o_survey_title').addClass('prefilled');
            }
        }
    }, {
        trigger: '.o_survey_title.prefilled',
        run: function () {
            // check that all the answers are prefilled in Page 1
            var $inputQ1 = $('div.js_question-wrapper:contains("Where do you live?") input');
            if ($inputQ1.val() !== 'Grand-Rosiere') {
                return;
            }

            var $inputQ2 = $('div.js_question-wrapper:contains("When is your date of birth?") input');
            if ($inputQ2.val() !== '05/05/1980') {
                return;
            }

            var $inputQ3 = $('div.js_question-wrapper:contains("How frequently do you buy products online?") label:contains("Once a week") input');
            if (!$inputQ3.is(':checked')) {
                return;
            }

            var $inputQ4 = $('div.js_question-wrapper:contains("How many times did you order products on our website?") input');
            if ($inputQ4.val() !== '42.0') {
                return;
            }

            $('.o_survey_title').addClass('tour_success');
        }
    }, {
        trigger: '.o_survey_title.tour_success'
    }, {
        content: 'Click on Next Page',
        trigger: 'button[value="next"]',
    }, {
        trigger: 'div.js_question-wrapper:contains("Do you have any other comments, questions, or concerns") textarea',
        run: function () {
            var $inputQ3 = $('div.js_question-wrapper:contains("Do you have any other comments, questions, or concerns") textarea');
            if ($inputQ3.val() === "Is the prefill working?") {
                $('.o_survey_title').addClass('prefilled2');
            }
        }
    }, {
        trigger: '.o_survey_title.prefilled2',
        run: function () {
            // check that all the answers are prefilled in Page 2
            var $input1Q1 = $('div.js_question-wrapper:contains("Which of the following words would you use to describe our products") label:contains("High quality") input');
            if (!$input1Q1.is(':checked')) {
                return;
            }

            var $input2Q1 = $('div.js_question-wrapper:contains("Which of the following words would you use to describe our products") label:contains("Good value for money") input');
            if (!$input2Q1.is(':checked')) {
                return;
            }

            var $input1Q2 = $('div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The new layout and design is fresh and up-to-date") input:first');
            if (!$input1Q2.is(':checked')) {
                return;
            }

            var $input2Q2 = $('div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("It is easy to find the product that I want") input:eq(2)');
            if (!$input2Q2.is(':checked')) {
                return;
            }

            var $input3Q2 = $('div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The tool to compare the products is useful to make a choice") input:eq(3)');
            if (!$input3Q2.is(':checked')) {
                return;
            }

            var $input4Q2 = $('div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The checkout process is clear and secure") input:eq(2)');
            if (!$input4Q2.is(':checked')) {
                return;
            }

            var $input5Q2 = $('div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("I have added products to my wishlist") input:last');
            if (!$input5Q2.is(':checked')) {
                return;
            }

            var $inputQ3 = $('div.js_question-wrapper:contains("Do you have any other comments, questions, or concerns") textarea');
            if ($inputQ3.val() !== "Is the prefill working?") {
                return;
            }

            $('.o_survey_title').addClass('tour_success_2');
        }
    }, {
        trigger: '.o_survey_title.tour_success_2'
    }
]});

return __exports;
});
;

/***********************************************************************
*  Filepath: /survey/static/tests/tours/survey_session_manage_test.js  *
*  Lines: 44                                                           *
***********************************************************************/
odoo.define('@survey/../tests/tours/survey_session_manage_test', ['survey.session_manage'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module alias=survey.session_manage_test **/

const SessionManager = require("survey.session_manage");
/**
 * Small override for test/tour purposes.
 */
SessionManager.include({
    /**
     * - Trigger the fetch of answer results immediately at the start.
     * (Instead of wasting 2 seconds waiting after the start).
     * - Set the fade in/out time to 1 ms to avoid unnecessary delays.
     * - Avoid refreshing the results every 2 seconds
     */
    start: function () {
        var self = this;
        return this._super.apply(this, arguments)
            .then(this._refreshResults.bind(this))
            .then(function () {
                self.fadeInOutTime = 1;
                clearInterval(self.resultsRefreshInterval);
            });
    },

    /**
     * Force the timer to "now" to avoid introducing potential test breaking
     * timely variables (rpc/small server delay/...) if the start_question_time flickers.
     */
    _startTimer: function () {
        this.$el.data('timer', moment.utc());
        return this._super.apply(this, arguments);
    }
});

__exports[Symbol.for("default")] = SessionManager;

return __exports;
});

odoo.define(`survey.session_manage_test`, ['@survey/../tests/tours/survey_session_manage_test'], function (require) {
                        return require('@survey/../tests/tours/survey_session_manage_test')[Symbol.for("default")];
                        });
;

/***********************************************************************
*  Filepath: /survey/static/tests/tours/survey_tour_session_create.js  *
*  Lines: 30                                                           *
***********************************************************************/
odoo.define('@survey/../tests/tours/survey_tour_session_create', ['@web/core/registry', '@survey/../tests/tours/survey_tour_session_tools'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { accessSurveysteps } = require("@survey/../tests/tours/survey_tour_session_tools");

/**
 * Small tour that will simply start the session and wait for attendees.
 */
registry.category("web_tour.tours").add("test_survey_session_create_tour", {
    url: "/web",
    test: true,
    steps: () => {
        return [
            ...accessSurveysteps,
            {
                trigger: 'button[name="action_start_session"]',
            },
            {
                trigger: '.o_survey_session_attendees_count:contains("0")',
                run: function () {}, // check session is correctly started
            },
        ];
    },
});

return __exports;
});
;

/***********************************************************************
*  Filepath: /survey/static/tests/tours/survey_tour_session_manage.js  *
*  Lines: 340                                                          *
***********************************************************************/
odoo.define('@survey/../tests/tours/survey_tour_session_manage', ['@web/core/registry', '@web/core/utils/arrays', '@web_tour/tour_service/tour_utils', '@survey/../tests/tours/survey_tour_session_tools'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { zip } = require("@web/core/utils/arrays");
const { TourError } = require("@web_tour/tour_service/tour_utils");
const { accessSurveysteps } = require("@survey/../tests/tours/survey_tour_session_tools");

/**
 * Since the chart is rendered using SVG, we can't use jQuery triggers to check if everything
 * is correctly rendered.
 * This helper method returns the chart data (Chartjs framework specific) in the following structure:
 * [{ value, backgroundColor, labelColor }]
 */
const getChartData = () => {
    const chartData = [];
    const rootWidget = odoo.__DEBUG__.services['root.widget'];
    const surveyManagePublicWidget = rootWidget.publicWidgets.find((widget) => {
        return widget.$el.hasClass('o_survey_session_manage');
    });

    if (!surveyManagePublicWidget) {
        return chartData;
    }

    surveyManagePublicWidget.resultsChart.chart.data.datasets[0].data.forEach((value, index)=> {
        chartData.push({
            value: value,
            backgroundColor: surveyManagePublicWidget.resultsChart._getBackgroundColor({dataIndex: index}),
            labelColor: surveyManagePublicWidget.resultsChart._getLabelColor({dataIndex: index}),
        });
    });

    return chartData;
};

const nextScreen = () => {
    const e = $.Event('keydown');
    e.keyCode = 39; // arrow-right
    $(document).trigger(e);
};

const previousScreen = () => {
    const e = $.Event('keydown');
    e.keyCode = 37; // arrow-left
    $(document).trigger(e);
};

const REGULAR_ANSWER_COLOR = '#212529';
const CORRECT_ANSWER_COLOR = '#2CBB70';
const WRONG_ANSWER_COLOR = '#D9534F';

const INDEX_TO_ORDINAL = {
    0: 'First',
    1: 'Second',
    2: 'Third',
    3: 'Fourth',
};

/**
 * Check answer appearance (opacity and color).
 *
 * @param {string} answerLabel
 * @param {{backgroundColor: string, labelColor: string, value?: number}} shownAnswer
 * @param {"correct"|"incorrect"|"regular"} expectedAnswerType
 */
const checkAnswerAppearance = (answerLabel, shownAnswer, expectedAnswerType) => {
    if (expectedAnswerType === 'correct') {
        if (!shownAnswer.backgroundColor.includes('0.8') || shownAnswer.labelColor !== CORRECT_ANSWER_COLOR) {
            throw new TourError(`${answerLabel} should be shown as "correct"!`);
        }
    } else if (expectedAnswerType === 'incorrect') {
        if (!shownAnswer.backgroundColor.includes('0.2') || shownAnswer.labelColor !== WRONG_ANSWER_COLOR) {
            throw new TourError(`${answerLabel} should be shown as "incorrect"!`);
        }
    } else if (expectedAnswerType === 'regular') {
        if (!shownAnswer.backgroundColor.includes('0.8') || shownAnswer.labelColor !== REGULAR_ANSWER_COLOR) {
            throw new TourError(`${answerLabel} should not be shown as "correct" or "incorrect"!`);
        }
    } else {
        throw new Error(`Unsupported answer type.`);
    }
};

const checkAnswerValue = (answerLabel, shownAnswerValue, expectedAnswerValue) => {
    if (shownAnswerValue !== expectedAnswerValue) {
        throw new TourError(expectedAnswerValue === 0 ?
            `${answerLabel} should not be picked by any user!` :
            `${answerLabel} should be picked by ${expectedAnswerValue} users!`
        );
    }
};

/**
 * Check the answers count, values and appearance.
 *
 * @param {{value: number, backgroundColor: string, color: string}[]} chartData Data returned by `getChartData`.
 * @param {{value: number, type: "correct" | "incorrect" | "regular"}[]} expectedAnswersData
 */
const checkAnswers = (chartData, expectedAnswersData) => {
    checkAnswersCount(chartData, expectedAnswersData.length);

    zip(chartData, expectedAnswersData).forEach(([shownAnswerData, expectedAnswerData], answerIndex) => {
        const answerLabel = `${INDEX_TO_ORDINAL[answerIndex]} answer`;
        checkAnswerValue(answerLabel, shownAnswerData.value, expectedAnswerData.value);
        checkAnswerAppearance(answerLabel, shownAnswerData, expectedAnswerData.type);
    });
};

const checkAnswersAllZeros = (chartData) => {
    if (chartData.find(answerData => answerData !== 0).length) {
        throw new TourError('Chart data should all be 0!');
    }
};

const checkAnswersCount = (chartData, expectedCount) => {
    if (chartData.length !== expectedCount) {
        throw new TourError(`Chart data should contain ${expectedCount} records!`);
    }
};

/**
 * Tour that will test the whole survey session from the host point of view.
 *
 * Break down of the main points:
 * - Open the 'session manager' (the session was already created by a previous tour)
 * - Display the nickname question, and move to the next one (as answers are not displayed)
 * - Check answers are correctly displayed for the 3 'simple' question types (text, date, datetime)
 * - Move to the choice question and check that answers are displayed
 *   (The check is rather complex, see 'getChartData' for details)
 * - If everything is correctly displayed, move to the next question
 * - On the scored choice question, check that the screens are correctly chained:
 *   no results displayed -> results displayed -> correct/incorrect answers -> leaderboard
 * - On the scored + timed multiple choice question, check the same than previous question,
 *   except that the results are supposed to be displayed automatically when the question timer runs out
 * - Test the 'back' behavior and check that screens are reversed correctly
 * - Check that our final leaderboard is correct based on attendees answers
 * - Close the survey session
 */
registry.category("web_tour.tours").add('test_survey_session_manage_tour', {
    url: "/web",
    test: true,
    steps: () => [].concat(accessSurveysteps, [{
    trigger: 'button[name="action_open_session_manager"]',
}, {
    trigger: 'h1:contains("Nickname")',
    isCheck: true // check nickname question is displayed
}, {
    trigger: 'h1',
    run: nextScreen
}, {
    trigger: 'h1:contains("Text Question")',
    isCheck: true // check text question is displayed
}, {
    trigger: '.o_survey_session_progress_small:contains("3 / 3")',
    isCheck: true // check we have 3 answers
}, {
    trigger: '.o_survey_session_text_answer_container:contains("Attendee 1 is the best")',
    isCheck: true // check attendee 1 answer is displayed
}, {
    trigger: '.o_survey_session_text_answer_container:contains("Attendee 2 rulez")',
    isCheck: true // check attendee 2 answer is displayed
}, {
    trigger: '.o_survey_session_text_answer_container:contains("Attendee 3 will crush you")',
    isCheck: true // check attendee 3 answer is displayed
}, {
    trigger: 'h1',
    run: nextScreen
}, {
    trigger: '.o_survey_session_progress_small:contains("2 / 3")',
    isCheck: true // check we have 2 answers
}, {
    trigger: '.o_survey_session_text_answer_container:contains("10/10/2010")',
    isCheck: true // check attendee 1 answer is displayed
}, {
    trigger: '.o_survey_session_text_answer_container:contains("11/11/2011")',
    isCheck: true // check attendee 2 answer is displayed
}, {
    trigger: 'h1',
    run: previousScreen
}, {
    trigger: 'h1:contains("Text Question")',
    isCheck: true // check text question is displayed
}, {
    trigger: '.o_survey_session_progress_small:contains("3 / 3")',
    isCheck: true // check we have 3 answers
}, {
    trigger: '.o_survey_session_text_answer_container:contains("Attendee 1 is the best")',
    isCheck: true // check attendee 1 answer is displayed
}, {
    trigger: '.o_survey_session_text_answer_container:contains("Attendee 2 rulez")',
    isCheck: true // check attendee 2 answer is displayed
}, {
    trigger: '.o_survey_session_text_answer_container:contains("Attendee 3 will crush you")',
    isCheck: true // check attendee 3 answer is displayed
}, {
    trigger: 'h1',
    run: nextScreen
}, {
    trigger: '.o_survey_session_progress_small:contains("2 / 3")',
    isCheck: true // check we have 2 answers
}, {
    trigger: '.o_survey_session_text_answer_container:contains("10/10/2010")',
    isCheck: true // check attendee 1 answer is displayed
}, {
    trigger: '.o_survey_session_text_answer_container:contains("11/11/2011")',
    isCheck: true // check attendee 2 answer is displayed
}, {
    trigger: 'h1',
    run: nextScreen
}, {
    trigger: '.o_survey_session_progress_small:contains("2 / 3")',
    isCheck: true // check we have 2 answers
}, {
    trigger: '.o_survey_session_text_answer_container:contains("10/10/2010 10:00:00")',
    isCheck: true // check attendee 2 answer is displayed
}, {
    trigger: '.o_survey_session_text_answer_container:contains("11/11/2011 15:55:55")',
    isCheck: true // check attendee 3 answer is displayed
}, {
    trigger: 'h1',
    run: nextScreen
}, {
    trigger: 'h1:contains("Regular Simple Choice")',
    // Wait for answers' data to be fetched (see commit message).
    extra_trigger: '.o_survey_session_progress_small[style*="width: 100%"]',
    run: () => {
        checkAnswers(getChartData(), [
            {value: 2, type: "regular"},
            {value: 1, type: "regular"},
            {value: 0, type: "regular"},
        ]);
        nextScreen();
    }
}, {
    trigger: 'h1:contains("Scored Simple Choice")',
    run: () => {
        const chartData = getChartData();
        checkAnswersCount(chartData, 4);
        checkAnswersAllZeros(chartData);

        nextScreen();
    }
}, {
    trigger: 'h1:contains("Scored Simple Choice")',
    // Wait for Button to be updated ("late" enough DOM change after onNext() is triggered).
    extra_trigger: '.o_survey_session_navigation_next_label:contains("Show Correct Answer(s)")',
    run: () => {
        checkAnswers(getChartData(), [
            {value: 1, type: "regular"},
            {value: 1, type: "regular"},
            {value: 1, type: "regular"},
            {value: 0, type: "regular"},
        ]);
        nextScreen();
    }
}, {
    trigger: 'h1:contains("Scored Simple Choice")',
    // Same as above
    extra_trigger: '.o_survey_session_navigation_next_label:contains("Show Leaderboard")',
    run: () => {
        checkAnswers(getChartData(), [
            {value: 1, type: "correct"},
            {value: 1, type: "incorrect"},
            {value: 1, type: "incorrect"},
            {value: 0, type: "incorrect"},
        ]);
        nextScreen();
        nextScreen();
    }
}, {
    trigger: 'h1:contains("Timed Scored Multiple Choice")',
    run: ()=> {
        const chartData = getChartData();
        checkAnswersCount(chartData, 3);
        checkAnswersAllZeros(chartData);

        // after 1 second, results are displayed automatically because question timer runs out
        // we add 1 extra second because of the way the timer works:
        // it only triggers the time_up event 1 second AFTER the delay is passed
        setTimeout(() => {
            checkAnswers(getChartData(), [
                {value: 2, type: "regular"},
                {value: 2, type: "regular"},
                {value: 1, type: "regular"},
            ]);

            nextScreen();
            checkAnswers(getChartData(), [
                {value: 2, type: "correct"},
                {value: 2, type: "correct"},
                {value: 1, type: "incorrect"},
            ]);

            nextScreen();
        }, 2100);
    }
}, {
    trigger: 'h1:contains("Final Leaderboard")',
    isCheck: true // Final Leaderboard is displayed
}, {
    trigger: 'h1',
    run: () => {
        // previous screen testing
        previousScreen();
        checkAnswers(getChartData(), [
            {value: 2, type: "correct"},
            {value: 2, type: "correct"},
            {value: 1, type: "incorrect"},
        ]);

        previousScreen();
        checkAnswers(getChartData(), [
            {value: 2, type: "regular"},
            {value: 2, type: "regular"},
            {value: 1, type: "regular"},
        ]);

        previousScreen();
        checkAnswersAllZeros(getChartData());

        // Now we go forward to the "Final Leaderboard" again (3 times)
        for (let i = 0; i < 3; i++) {
            nextScreen();
        }
    }
}, {
    trigger: 'h1:contains("Final Leaderboard")',
    isCheck: true // Final Leaderboard is displayed
}, {
    trigger: '.o_survey_session_close:has("i.fa-close")'
}, {
    trigger: 'button[name="action_start_session"]',
    isCheck: true // check that we can start another session
}])});

return __exports;
});
;

/**********************************************************************
*  Filepath: /survey/static/tests/tours/survey_tour_session_start.js  *
*  Lines: 35                                                          *
**********************************************************************/
odoo.define('@survey/../tests/tours/survey_tour_session_start', ['@web/core/registry', '@survey/../tests/tours/survey_tour_session_tools'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { accessSurveysteps } = require("@survey/../tests/tours/survey_tour_session_tools");

/**
 * Small tour that will open the session manager and check
 * that the attendees are accounted for, then start the session
 * by going to the first question.
 */
registry.category("web_tour.tours").add('test_survey_session_start_tour', {
    url: "/web",
    test: true,
    steps: () => [].concat(accessSurveysteps, [{
    trigger: 'button[name="action_open_session_manager"]',
}, {
    trigger: '.o_survey_session_attendees_count:contains("3")',
    run: function () {} // check attendees count
}, {
    trigger: 'h1',
    run: function () {
        var e = $.Event('keydown');
        e.keyCode = 39; // arrow-right
        $(document).trigger(e); // start session
    }
}, {
    trigger: 'h1:contains("Nickname")',
    run: function () {} // check first question is displayed
}])});

return __exports;
});
;

/**********************************************************************
*  Filepath: /survey/static/tests/tours/survey_tour_session_tools.js  *
*  Lines: 27                                                          *
**********************************************************************/
odoo.define('@survey/../tests/tours/survey_tour_session_tools', ['@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { stepUtils } = require("@web_tour/tour_service/tour_utils");

/**
 * Tool that gathers common steps to every 'survey session' tours.
 */
const accessSurveysteps = __exports.accessSurveysteps = [
    stepUtils.showAppsMenuItem(),
    {
        trigger: '.o_app[data-menu-xmlid="survey.menu_surveys"]',
        edition: "community",
    },
    {
        trigger: '.o_app[data-menu-xmlid="survey.menu_surveys"]',
        edition: "enterprise",
    },
    {
        trigger: '.oe_kanban_card:contains("User Session Survey")',
    },
];

return __exports;
});
;

/************************************************************************
*  Filepath: /pos_restaurant/static/tests/tours/ControlButtons.tour.js  *
*  Lines: 74                                                            *
************************************************************************/
odoo.define('@pos_restaurant/../tests/tours/ControlButtons.tour', ['@point_of_sale/../tests/tours/helpers/TextAreaPopupTourMethods', '@point_of_sale/../tests/tours/helpers/NumberPopupTourMethods', '@pos_restaurant/../tests/tours/helpers/ChromeTourMethods', '@pos_restaurant/../tests/tours/helpers/FloorScreenTourMethods', '@pos_restaurant/../tests/tours/helpers/ProductScreenTourMethods', '@pos_restaurant/../tests/tours/helpers/SplitBillScreenTourMethods', '@pos_restaurant/../tests/tours/helpers/BillScreenTourMethods', '@point_of_sale/../tests/tours/helpers/utils', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { TextAreaPopup } = require("@point_of_sale/../tests/tours/helpers/TextAreaPopupTourMethods");
const { NumberPopup } = require("@point_of_sale/../tests/tours/helpers/NumberPopupTourMethods");
const { Chrome } = require("@pos_restaurant/../tests/tours/helpers/ChromeTourMethods");
const { FloorScreen } = require("@pos_restaurant/../tests/tours/helpers/FloorScreenTourMethods");
const { ProductScreen } = require("@pos_restaurant/../tests/tours/helpers/ProductScreenTourMethods");
const { SplitBillScreen } = require("@pos_restaurant/../tests/tours/helpers/SplitBillScreenTourMethods");
const { BillScreen } = require("@pos_restaurant/../tests/tours/helpers/BillScreenTourMethods");
const { getSteps, startSteps } = require("@point_of_sale/../tests/tours/helpers/utils");
const { registry } = require("@web/core/registry");

registry
    .category("web_tour.tours")
    .add("ControlButtonsTour", { 
        test: true, 
        url: "/pos/ui", 
        steps: () => {
            // signal to start generating steps
            // when finished, steps can be taken from getSteps
            startSteps();
            
            // Test TransferOrderButton
            FloorScreen.do.clickTable("2");
            ProductScreen.exec.addOrderline("Water", "5", "2", "10.0");
            ProductScreen.do.clickTransferButton();
            FloorScreen.do.clickTable("4");
            ProductScreen.do.clickOrderline("Water", "5", "2");
            Chrome.do.backToFloor();
            FloorScreen.do.clickTable("2");
            ProductScreen.check.orderIsEmpty();
            Chrome.do.backToFloor();
            FloorScreen.do.clickTable("4");
            ProductScreen.do.clickOrderline("Water", "5", "2");
            
            // Test SplitBillButton
            ProductScreen.do.clickSplitBillButton();
            SplitBillScreen.do.clickBack();
            
            // Test OrderlineNoteButton
            ProductScreen.do.clickNoteButton();
            TextAreaPopup.check.isShown();
            TextAreaPopup.do.inputText("test note");
            TextAreaPopup.do.clickConfirm();
            ProductScreen.check.orderlineHasNote("Water", "5", "test note");
            ProductScreen.exec.addOrderline("Water", "8", "1", "8.0");
            
            // Test PrintBillButton
            ProductScreen.do.clickPrintBillButton();
            BillScreen.check.isShown();
            BillScreen.do.clickOk();
            
            // Test GuestButton
            ProductScreen.do.clickGuestButton();
            NumberPopup.do.enterValue("15");
            NumberPopup.check.inputShownIs("15");
            NumberPopup.do.clickConfirm();
            ProductScreen.check.guestNumberIs("15");
            
            ProductScreen.do.clickGuestButton();
            NumberPopup.do.enterValue("5");
            NumberPopup.check.inputShownIs("5");
            NumberPopup.do.clickConfirm();
            ProductScreen.check.guestNumberIs("5");

            return getSteps(); 
        }
    });

return __exports;
});
;

/*********************************************************************
*  Filepath: /pos_restaurant/static/tests/tours/FloorScreen.tour.js  *
*  Lines: 134                                                        *
*********************************************************************/
odoo.define('@pos_restaurant/../tests/tours/FloorScreen.tour', ['@pos_restaurant/../tests/tours/helpers/ChromeTourMethods', '@pos_restaurant/../tests/tours/helpers/FloorScreenTourMethods', '@point_of_sale/../tests/tours/helpers/TextInputPopupTourMethods', '@point_of_sale/../tests/tours/helpers/NumberPopupTourMethods', '@pos_restaurant/../tests/tours/helpers/ProductScreenTourMethods', '@point_of_sale/../tests/tours/helpers/utils', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { Chrome } = require("@pos_restaurant/../tests/tours/helpers/ChromeTourMethods");
const { FloorScreen } = require("@pos_restaurant/../tests/tours/helpers/FloorScreenTourMethods");
const { TextInputPopup } = require("@point_of_sale/../tests/tours/helpers/TextInputPopupTourMethods");
const { NumberPopup } = require("@point_of_sale/../tests/tours/helpers/NumberPopupTourMethods");
const { ProductScreen } = require("@pos_restaurant/../tests/tours/helpers/ProductScreenTourMethods");
const { getSteps, startSteps } = require("@point_of_sale/../tests/tours/helpers/utils");
const { registry } = require("@web/core/registry");

registry
    .category("web_tour.tours")
    .add("FloorScreenTour", { 
        test: true, 
        url: "/pos/ui", 
        steps: () => {
            // signal to start generating steps
            // when finished, steps can be taken from getSteps
            startSteps();
            
            // check floors if they contain their corresponding tables
            FloorScreen.check.selectedFloorIs("Main Floor");
            FloorScreen.check.hasTable("2");
            FloorScreen.check.hasTable("4");
            FloorScreen.check.hasTable("5");
            FloorScreen.do.clickFloor("Second Floor");
            FloorScreen.check.hasTable("3");
            FloorScreen.check.hasTable("1");
            
            // clicking table in active mode does not open product screen
            // instead, table is selected
            FloorScreen.do.clickEdit();
            FloorScreen.do.clickTable("3");
            FloorScreen.check.selectedTableIs("3");
            FloorScreen.do.clickTable("1");
            FloorScreen.check.selectedTableIs("1");
            
            // test add table
            FloorScreen.do.clickFloor("Main Floor");
            FloorScreen.do.clickAddTable();
            FloorScreen.check.selectedTableIs("1");
            FloorScreen.do.clickRename();
            TextInputPopup.check.isShown();
            TextInputPopup.do.inputText("100");
            TextInputPopup.do.clickConfirm();
            FloorScreen.do.clickTable("100");
            FloorScreen.check.selectedTableIs("100");
            
            // test duplicate table
            FloorScreen.do.clickDuplicate();
            // the name is the first number available on the floor
            FloorScreen.check.selectedTableIs("1");
            FloorScreen.do.clickRename();
            TextInputPopup.check.isShown();
            TextInputPopup.do.inputText("1111");
            TextInputPopup.do.clickConfirm();
            FloorScreen.do.clickTable("1111");
            FloorScreen.check.selectedTableIs("1111");
            
            // switch floor, switch back and check if
            // the new tables are still there
            FloorScreen.do.clickFloor("Second Floor");
            FloorScreen.check.hasTable("3");
            FloorScreen.check.hasTable("1");
            
            //test duplicate multiple tables
            FloorScreen.do.clickTable("1");
            FloorScreen.check.selectedTableIs("1");
            FloorScreen.do.ctrlClickTable("3");
            FloorScreen.check.selectedTableIs("3");
            FloorScreen.do.clickDuplicate();
            FloorScreen.check.selectedTableIs("2");
            FloorScreen.check.selectedTableIs("4");
            
            //test delete multiple tables
            FloorScreen.do.clickTrash();
            Chrome.do.confirmPopup();
            
            FloorScreen.do.clickFloor("Main Floor");
            FloorScreen.check.hasTable("2");
            FloorScreen.check.hasTable("4");
            FloorScreen.check.hasTable("5");
            FloorScreen.check.hasTable("100");
            FloorScreen.check.hasTable("1111");
            
            // test delete table
            FloorScreen.do.clickTable("2");
            FloorScreen.check.selectedTableIs("2");
            FloorScreen.do.clickTrash();
            Chrome.do.confirmPopup();
            
            // change number of seats
            FloorScreen.do.clickTable("4");
            FloorScreen.check.selectedTableIs("4");
            FloorScreen.do.clickSeats();
            NumberPopup.do.pressNumpad("Backspace 9");
            NumberPopup.do.fillPopupValue("9");
            NumberPopup.check.inputShownIs("9");
            NumberPopup.do.clickConfirm();
            FloorScreen.check.tableSeatIs("4", "9");
            
            // change number of seat when the input is already selected
            FloorScreen.do.clickTable("4");
            FloorScreen.check.selectedTableIs("4");
            FloorScreen.do.clickSeats();
            NumberPopup.do.enterValue("15");
            NumberPopup.check.inputShownIs("15");
            NumberPopup.do.clickConfirm();
            FloorScreen.check.tableSeatIs("4", "15");
            
            // change shape
            FloorScreen.do.clickTable("4");
            FloorScreen.do.changeShapeTo("round");
            
            // Opening product screen in main floor should go back to main floor
            FloorScreen.do.closeEdit();
            FloorScreen.check.tableIsNotSelected("4");
            FloorScreen.do.clickTable("4");
            ProductScreen.check.isShown();
            Chrome.do.backToFloor();
            
            // Opening product screen in second floor should go back to second floor
            FloorScreen.do.clickFloor("Second Floor");
            FloorScreen.check.hasTable("3");
            FloorScreen.do.clickTable("3");
            return getSteps(); 
        } 
    });

return __exports;
});
;

/****************************************************************
*  Filepath: /pos_restaurant/static/tests/tours/Refund.tour.js  *
*  Lines: 57                                                    *
****************************************************************/
odoo.define('@pos_restaurant/../tests/tours/Refund.tour', ['@point_of_sale/../tests/tours/helpers/ProductScreenTourMethods', '@point_of_sale/../tests/tours/helpers/PaymentScreenTourMethods', '@point_of_sale/../tests/tours/helpers/ReceiptScreenTourMethods', '@pos_restaurant/../tests/tours/helpers/FloorScreenTourMethods', '@point_of_sale/../tests/tours/helpers/TicketScreenTourMethods', '@point_of_sale/../tests/tours/helpers/utils', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { ProductScreen } = require("@point_of_sale/../tests/tours/helpers/ProductScreenTourMethods");
const { PaymentScreen } = require("@point_of_sale/../tests/tours/helpers/PaymentScreenTourMethods");
const { ReceiptScreen } = require("@point_of_sale/../tests/tours/helpers/ReceiptScreenTourMethods");
const { FloorScreen } = require("@pos_restaurant/../tests/tours/helpers/FloorScreenTourMethods");
const { TicketScreen } = require("@point_of_sale/../tests/tours/helpers/TicketScreenTourMethods");
const { getSteps, startSteps } = require("@point_of_sale/../tests/tours/helpers/utils");
const { registry } = require("@web/core/registry");

registry
    .category("web_tour.tours")
    .add("RefundStayCurrentTableTour", { 
        test: true, 
        url: "/pos/ui", 
        steps: () => {
            // signal to start generating steps
            // when finished, steps can be taken from getSteps
            startSteps();
            
            // Create first order and pay it
            FloorScreen.do.clickTable("2");
            ProductScreen.do.confirmOpeningPopup();
            ProductScreen.do.clickDisplayedProduct("Coca-Cola");
            ProductScreen.check.selectedOrderlineHas("Coca-Cola");
            ProductScreen.do.clickDisplayedProduct("Coca-Cola");
            ProductScreen.check.selectedOrderlineHas("Coca-Cola");
            ProductScreen.do.clickDisplayedProduct("Water");
            ProductScreen.check.selectedOrderlineHas("Water");
            ProductScreen.check.totalAmountIs("6.60");
            ProductScreen.do.clickPayButton();
            PaymentScreen.do.clickPaymentMethod("Cash");
            PaymentScreen.do.clickValidate();
            ReceiptScreen.do.clickNextOrder();
            
            // Go to another table and refund one of the product
            FloorScreen.do.clickTable("4");
            ProductScreen.check.orderIsEmpty();
            ProductScreen.do.clickRefund();
            TicketScreen.do.selectOrder("-0001");
            TicketScreen.do.clickOrderline("Coca-Cola");
            TicketScreen.do.pressNumpad("2");
            TicketScreen.check.toRefundTextContains("To Refund: 2.00");
            TicketScreen.do.confirmRefund();
            ProductScreen.check.isShown();
            ProductScreen.check.selectedOrderlineHas("Coca-Cola");
            ProductScreen.check.totalAmountIs("-4.40");

            return getSteps(); 
        } 
    });

return __exports;
});
;

/*************************************************************************
*  Filepath: /pos_restaurant/static/tests/tours/SplitBillScreen.tour.js  *
*  Lines: 145                                                            *
*************************************************************************/
odoo.define('@pos_restaurant/../tests/tours/SplitBillScreen.tour', ['@point_of_sale/../tests/tours/helpers/PaymentScreenTourMethods', '@point_of_sale/../tests/tours/helpers/ReceiptScreenTourMethods', '@pos_restaurant/../tests/tours/helpers/ChromeTourMethods', '@pos_restaurant/../tests/tours/helpers/FloorScreenTourMethods', '@pos_restaurant/../tests/tours/helpers/ProductScreenTourMethods', '@pos_restaurant/../tests/tours/helpers/SplitBillScreenTourMethods', '@point_of_sale/../tests/tours/helpers/TicketScreenTourMethods', '@point_of_sale/../tests/tours/helpers/utils', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { PaymentScreen } = require("@point_of_sale/../tests/tours/helpers/PaymentScreenTourMethods");
const { ReceiptScreen } = require("@point_of_sale/../tests/tours/helpers/ReceiptScreenTourMethods");
const { Chrome } = require("@pos_restaurant/../tests/tours/helpers/ChromeTourMethods");
const { FloorScreen } = require("@pos_restaurant/../tests/tours/helpers/FloorScreenTourMethods");
const { ProductScreen } = require("@pos_restaurant/../tests/tours/helpers/ProductScreenTourMethods");
const { SplitBillScreen } = require("@pos_restaurant/../tests/tours/helpers/SplitBillScreenTourMethods");
const { TicketScreen } = require("@point_of_sale/../tests/tours/helpers/TicketScreenTourMethods");
const { getSteps, startSteps } = require("@point_of_sale/../tests/tours/helpers/utils");
const { registry } = require("@web/core/registry");

registry
    .category("web_tour.tours")
    .add("SplitBillScreenTour", { 
        test: true, 
        url: "/pos/ui", 
        steps: () =>  {
            // signal to start generating steps
            // when finished, steps can be taken from getSteps
            startSteps();
            
            FloorScreen.do.clickTable("2");
            ProductScreen.do.confirmOpeningPopup();
            ProductScreen.exec.addOrderline("Water", "5", "2", "10.0");
            ProductScreen.exec.addOrderline("Minute Maid", "3", "2", "6.0");
            ProductScreen.exec.addOrderline("Coca-Cola", "1", "2", "2.0");
            ProductScreen.do.clickSplitBillButton();
            
            // Check if the screen contains all the orderlines
            SplitBillScreen.check.orderlineHas("Water", "5", "0");
            SplitBillScreen.check.orderlineHas("Minute Maid", "3", "0");
            SplitBillScreen.check.orderlineHas("Coca-Cola", "1", "0");
            
            // split 3 water and 1 coca-cola
            SplitBillScreen.do.clickOrderline("Water");
            SplitBillScreen.check.orderlineHas("Water", "5", "1");
            SplitBillScreen.do.clickOrderline("Water");
            SplitBillScreen.do.clickOrderline("Water");
            SplitBillScreen.check.orderlineHas("Water", "5", "3");
            SplitBillScreen.check.subtotalIs("6.0");
            SplitBillScreen.do.clickOrderline("Coca-Cola");
            SplitBillScreen.check.orderlineHas("Coca-Cola", "1", "1");
            SplitBillScreen.check.subtotalIs("8.0");
            
            // click pay to split, go back to check the lines
            SplitBillScreen.do.clickPay();
            PaymentScreen.do.clickBack();
            ProductScreen.do.clickOrderline("Water", "3.0");
            ProductScreen.do.clickOrderline("Coca-Cola", "1.0");
            
            // go back to the original order and see if the order is changed
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.do.selectOrder("-0001");
            ProductScreen.check.isShown();
            ProductScreen.do.clickOrderline("Water", "2.0");
            ProductScreen.do.clickOrderline("Minute Maid", "3.0");
            return getSteps(); 
        }
    });

registry
    .category("web_tour.tours")
    .add("SplitBillScreenTour2", { 
        test: true, 
        url: "/pos/ui", 
        steps: () => {
            startSteps();
            
            ProductScreen.do.confirmOpeningPopup();
            FloorScreen.do.clickTable("2");
            ProductScreen.exec.addOrderline("Water", "1", "2.0");
            ProductScreen.exec.addOrderline("Minute Maid", "1", "2.0");
            ProductScreen.exec.addOrderline("Coca-Cola", "1", "2.0");
            Chrome.do.backToFloor();
            FloorScreen.do.clickTable("2");
            ProductScreen.do.clickSplitBillButton();
            
            SplitBillScreen.do.clickOrderline("Water");
            SplitBillScreen.check.orderlineHas("Water", "1", "1");
            SplitBillScreen.do.clickOrderline("Coca-Cola");
            SplitBillScreen.check.orderlineHas("Coca-Cola", "1", "1");
            SplitBillScreen.do.clickPay();
            PaymentScreen.do.clickBack();
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.do.selectOrder("-0002");
            ProductScreen.do.clickOrderline("Water", "1.0");
            ProductScreen.do.clickOrderline("Coca-Cola", "1.0");
            ProductScreen.check.totalAmountIs("4.00");
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.do.selectOrder("-0001");
            ProductScreen.do.clickOrderline("Minute Maid", "1.0");
            ProductScreen.check.totalAmountIs("2.00");
            return getSteps(); 
        } 
    });

registry
    .category("web_tour.tours")
    .add("SplitBillScreenTour3", { 
        test: true, 
        url: "/pos/ui", 
        steps: () => {
            startSteps();
            FloorScreen.do.clickTable("2");
            ProductScreen.do.confirmOpeningPopup();
            ProductScreen.exec.addOrderline("Water", "2", "2", "4.00");
            ProductScreen.do.clickSplitBillButton();
            
            // Check if the screen contains all the orderlines
            SplitBillScreen.check.orderlineHas("Water", "2", "0");
            
            // split 1 water
            SplitBillScreen.do.clickOrderline("Water");
            SplitBillScreen.check.orderlineHas("Water", "2", "1");
            SplitBillScreen.check.subtotalIs("2.0");
            
            // click pay to split, and pay
            SplitBillScreen.do.clickPay();
            PaymentScreen.do.clickPaymentMethod("Bank");
            PaymentScreen.do.clickValidate();
            // Check if the receiptscreen suggests us to continue the order
            ReceiptScreen.do.clickContinueOrder();
            
            // Check if there is still water in the order
            ProductScreen.check.isShown();
            ProductScreen.do.clickOrderline("Water", "1.0");
            ProductScreen.do.clickPayButton(true);
            PaymentScreen.do.clickPaymentMethod("Bank");
            PaymentScreen.do.clickValidate();
            // Check if there is no more order to continue
            ReceiptScreen.do.clickNextOrder();

            return getSteps(); 
        } 
    });

return __exports;
});
;

/**********************************************************************
*  Filepath: /pos_restaurant/static/tests/tours/TicketScreen.tour.js  *
*  Lines: 77                                                          *
**********************************************************************/
odoo.define('@pos_restaurant/../tests/tours/TicketScreen.tour', ['@point_of_sale/../tests/tours/helpers/ProductScreenTourMethods', '@pos_restaurant/../tests/tours/helpers/FloorScreenTourMethods', '@point_of_sale/../tests/tours/helpers/TicketScreenTourMethods', '@pos_restaurant/../tests/tours/helpers/ChromeTourMethods', '@point_of_sale/../tests/tours/helpers/utils', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { ProductScreen } = require("@point_of_sale/../tests/tours/helpers/ProductScreenTourMethods");
const { FloorScreen } = require("@pos_restaurant/../tests/tours/helpers/FloorScreenTourMethods");
const { TicketScreen } = require("@point_of_sale/../tests/tours/helpers/TicketScreenTourMethods");
const { Chrome } = require("@pos_restaurant/../tests/tours/helpers/ChromeTourMethods");
const { getSteps, startSteps } = require("@point_of_sale/../tests/tours/helpers/utils");
const { registry } = require("@web/core/registry");

registry
    .category("web_tour.tours")
    .add("PosResTicketScreenTour", { 
        test: true, 
        url: "/pos/ui", 
        steps: () => {
            startSteps();

            ProductScreen.do.confirmOpeningPopup();
            // New Ticket button should not be in the ticket screen if no table is selected.
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.check.noNewTicketButton();
            TicketScreen.do.clickDiscard();
            
            // Deleting the last order in the table brings back to floorscreen
            FloorScreen.do.clickTable("4");
            ProductScreen.check.isShown();
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.check.nthRowContains(2, "-0001");
            TicketScreen.do.deleteOrder("-0001");
            TicketScreen.do.clickDiscard();
            
            // Create 2 items in a table. From floorscreen, delete 1 item. Then select the other item.
            // Correct order and screen should be displayed and the BackToFloorButton is shown.
            FloorScreen.do.clickTable("2");
            ProductScreen.exec.addOrderline("Minute Maid", "1", "2");
            ProductScreen.check.totalAmountIs("2.0");
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.do.clickNewTicket();
            ProductScreen.exec.addOrderline("Coca-Cola", "2", "2");
            ProductScreen.check.totalAmountIs("4.0");
            Chrome.do.backToFloor();
            FloorScreen.check.orderCountSyncedInTableIs("2", "3");
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.do.deleteOrder("-0003");
            Chrome.do.confirmPopup();
            TicketScreen.do.selectOrder("-0002");
            ProductScreen.check.isShown();
            ProductScreen.check.totalAmountIs("2.0");
            Chrome.do.backToFloor();
            
            // Make sure that order is deleted properly.
            FloorScreen.do.clickTable("5");
            ProductScreen.exec.addOrderline("Minute Maid", "1", "3");
            ProductScreen.check.totalAmountIs("3.0");
            Chrome.do.backToFloor();
            FloorScreen.check.orderCountSyncedInTableIs("5", "1");
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.do.deleteOrder("-0004");
            Chrome.do.confirmPopup();
            TicketScreen.do.clickDiscard();
            FloorScreen.check.isShown();
            FloorScreen.do.clickTable("5");
            ProductScreen.check.orderIsEmpty();
            return getSteps(); 
        }
    });

return __exports;
});
;

/*******************************************************************
*  Filepath: /pos_restaurant/static/tests/tours/TipScreen.tour.js  *
*  Lines: 162                                                      *
*******************************************************************/
odoo.define('@pos_restaurant/../tests/tours/TipScreen.tour', ['@point_of_sale/../tests/tours/helpers/ProductScreenTourMethods', '@point_of_sale/../tests/tours/helpers/PaymentScreenTourMethods', '@point_of_sale/../tests/tours/helpers/ReceiptScreenTourMethods', '@pos_restaurant/../tests/tours/helpers/FloorScreenTourMethods', '@point_of_sale/../tests/tours/helpers/TicketScreenTourMethods', '@pos_restaurant/../tests/tours/helpers/TipScreenTourMethods', '@point_of_sale/../tests/tours/helpers/NumberPopupTourMethods', '@pos_restaurant/../tests/tours/helpers/ChromeTourMethods', '@point_of_sale/../tests/tours/helpers/utils', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { ProductScreen } = require("@point_of_sale/../tests/tours/helpers/ProductScreenTourMethods");
const { PaymentScreen } = require("@point_of_sale/../tests/tours/helpers/PaymentScreenTourMethods");
const { ReceiptScreen } = require("@point_of_sale/../tests/tours/helpers/ReceiptScreenTourMethods");
const { FloorScreen } = require("@pos_restaurant/../tests/tours/helpers/FloorScreenTourMethods");
const { TicketScreen } = require("@point_of_sale/../tests/tours/helpers/TicketScreenTourMethods");
const { TipScreen } = require("@pos_restaurant/../tests/tours/helpers/TipScreenTourMethods");
const { NumberPopup } = require("@point_of_sale/../tests/tours/helpers/NumberPopupTourMethods");
const { Chrome } = require("@pos_restaurant/../tests/tours/helpers/ChromeTourMethods");
const { getSteps, startSteps } = require("@point_of_sale/../tests/tours/helpers/utils");
const { registry } = require("@web/core/registry");


registry
    .category("web_tour.tours")
    .add("PosResTipScreenTour", { 
        test: true, 
        url: "/pos/ui", 
        steps: () => {
            startSteps();
            
            // Create order that is synced when draft.
            // order 1
            ProductScreen.do.confirmOpeningPopup();
            FloorScreen.do.clickTable("2");
            ProductScreen.exec.addOrderline("Minute Maid", "1", "2");
            ProductScreen.check.totalAmountIs("2.0");
            Chrome.do.backToFloor();
            FloorScreen.check.orderCountSyncedInTableIs("2", "1");
            FloorScreen.do.clickTable("2");
            ProductScreen.check.totalAmountIs("2.0");
            ProductScreen.do.clickPayButton();
            PaymentScreen.do.clickPaymentMethod("Bank");
            PaymentScreen.do.clickValidate();
            TipScreen.check.isShown();
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.do.clickNewTicket();
            // order 2
            ProductScreen.exec.addOrderline("Coca-Cola", "2", "2");
            ProductScreen.check.totalAmountIs("4.0");
            Chrome.do.backToFloor();
            FloorScreen.check.orderCountSyncedInTableIs("2", "2");
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.check.nthRowContains("2", "Tipping");
            TicketScreen.do.clickDiscard();
            
            // Create without syncing the draft.
            // order 3
            FloorScreen.do.clickTable("5");
            ProductScreen.exec.addOrderline("Minute Maid", "3", "2");
            ProductScreen.check.totalAmountIs("6.0");
            ProductScreen.do.clickPayButton();
            PaymentScreen.do.clickPaymentMethod("Bank");
            PaymentScreen.do.clickValidate();
            TipScreen.check.isShown();
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.do.clickNewTicket();
            // order 4
            ProductScreen.exec.addOrderline("Coca-Cola", "4", "2");
            ProductScreen.check.totalAmountIs("8.0");
            Chrome.do.backToFloor();
            FloorScreen.check.orderCountSyncedInTableIs("5", "4");
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.check.nthRowContains("4", "Tipping");

            // Tip 20% on order1
            TicketScreen.do.selectOrder("-0001");
            TipScreen.check.isShown();
            TipScreen.check.totalAmountIs("2.0");
            TipScreen.check.percentAmountIs("15%", "0.30");
            TipScreen.check.percentAmountIs("20%", "0.40");
            TipScreen.check.percentAmountIs("25%", "0.50");
            TipScreen.do.clickPercentTip("20%");
            TipScreen.check.inputAmountIs("0.40");
            Chrome.do.backToFloor();
            FloorScreen.check.isShown();
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();

            // Tip 25% on order3
            TicketScreen.do.selectOrder("-0003");
            TipScreen.check.isShown();
            TipScreen.check.totalAmountIs("6.0");
            TipScreen.check.percentAmountIs("15%", "0.90");
            TipScreen.check.percentAmountIs("20%", "1.20");
            TipScreen.check.percentAmountIs("25%", "1.50");
            TipScreen.do.clickPercentTip("25%");
            TipScreen.check.inputAmountIs("1.50");
            Chrome.do.backToFloor();
            FloorScreen.check.isShown();
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();

            // finalize order 4 then tip custom amount
            TicketScreen.do.selectOrder("-0004");
            ProductScreen.check.isShown();
            ProductScreen.check.totalAmountIs("8.0");
            ProductScreen.do.clickPayButton();
            PaymentScreen.do.clickPaymentMethod("Bank");
            PaymentScreen.do.clickValidate();
            TipScreen.check.isShown();
            TipScreen.check.totalAmountIs("8.0");
            TipScreen.check.percentAmountIs("15%", "1.20");
            TipScreen.check.percentAmountIs("20%", "1.60");
            TipScreen.check.percentAmountIs("25%", "2.00");
            TipScreen.do.setCustomTip("1.00");
            TipScreen.check.inputAmountIs("1.00");
            Chrome.do.backToFloor();
            FloorScreen.check.isShown();

            // settle tips here
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.do.selectFilter("Tipping");
            TicketScreen.check.tipContains("1.00");
            TicketScreen.do.settleTips();
            TicketScreen.do.selectFilter("All active orders");
            TicketScreen.check.nthRowContains(2, "Ongoing");
            
            // tip order2 during payment
            // tip screen should not show after validating payment screen
            TicketScreen.do.selectOrder("-0002");
            ProductScreen.check.isShown();
            ProductScreen.do.clickPayButton();
            PaymentScreen.do.clickTipButton();
            NumberPopup.check.isShown();
            NumberPopup.do.enterValue("1");
            NumberPopup.check.inputShownIs("1");
            NumberPopup.do.clickConfirm();
            PaymentScreen.check.emptyPaymentlines("5.0");
            PaymentScreen.do.clickPaymentMethod("Cash");
            PaymentScreen.do.clickValidate();
            ReceiptScreen.check.isShown();

            // order 5
            // Click directly on "settle" without selecting a Tip
            ReceiptScreen.do.clickNextOrder();
            FloorScreen.do.clickTable("2");
            ProductScreen.exec.addOrderline("Minute Maid", "3", "2");
            ProductScreen.check.totalAmountIs("6.0");
            ProductScreen.do.clickPayButton();
            PaymentScreen.do.clickPaymentMethod("Bank");
            PaymentScreen.do.clickValidate();
            TipScreen.check.isShown();
            TipScreen.do.clickSettle();
            ReceiptScreen.check.isShown();
            ReceiptScreen.do.clickNextOrder();
            FloorScreen.check.isShown();
            return getSteps(); 
        } 
    });

return __exports;
});
;

/**********************************************************************************
*  Filepath: /pos_restaurant/static/tests/tours/helpers/BillScreenTourMethods.js  *
*  Lines: 36                                                                      *
**********************************************************************************/
odoo.define('@pos_restaurant/../tests/tours/helpers/BillScreenTourMethods', ['@point_of_sale/../tests/tours/helpers/utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { createTourMethods } = require("@point_of_sale/../tests/tours/helpers/utils");

class Do {
    clickOk() {
        return [
            {
                content: `go back`,
                trigger: `.receipt-screen .button.next`,
            },
        ];
    }
}

class Check {
    isShown() {
        return [
            {
                content: "Bill screen is shown",
                trigger: '.receipt-screen h1:contains("Bill Printing")',
                run: () => {},
            },
        ];
    }
}

// FIXME: this is a horrible hack to export an object as named exports.
// eslint-disable-next-line no-undef
Object.assign(__exports, createTourMethods("BillScreen", Do, Check));

return __exports;
});
;

/******************************************************************************
*  Filepath: /pos_restaurant/static/tests/tours/helpers/ChromeTourMethods.js  *
*  Lines: 47                                                                  *
******************************************************************************/
odoo.define('@pos_restaurant/../tests/tours/helpers/ChromeTourMethods', ['@point_of_sale/../tests/tours/helpers/utils', '@point_of_sale/../tests/tours/helpers/ChromeTourMethods'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { createTourMethods } = require("@point_of_sale/../tests/tours/helpers/utils");
const { Do } = require("@point_of_sale/../tests/tours/helpers/ChromeTourMethods");

class DoExt extends Do {
    backToFloor() {
        return [
            {
                content: "back to floor",
                trigger: ".floor-button",
            },
        ];
    }
}

class Check {
    isSyncStatusPending() {
        return [
            {
                trigger: ".pos-topheader .pos-rightheader .status-buttons .oe_status:has(.js_msg)",
                run: () => {},
            },
        ];
    }
    isSyncStatusConnected() {
        return [
            {
                trigger:
                    ".pos-topheader .pos-rightheader .status-buttons .oe_status:has(.js_connected)",
                run: () => {},
            },
        ];
    }
}

class Execute {}

// FIXME: this is a horrible hack to export an object as named exports.
// eslint-disable-next-line no-undef
Object.assign(__exports, createTourMethods("Chrome", DoExt, Check, Execute));

return __exports;
});
;

/***********************************************************************************
*  Filepath: /pos_restaurant/static/tests/tours/helpers/FloorScreenTourMethods.js  *
*  Lines: 186                                                                      *
***********************************************************************************/
odoo.define('@pos_restaurant/../tests/tours/helpers/FloorScreenTourMethods', ['@point_of_sale/../tests/tours/helpers/utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { createTourMethods } = require("@point_of_sale/../tests/tours/helpers/utils");

class Do {
    clickTable(name) {
        return [
            {
                content: `click table '${name}'`,
                trigger: `.floor-map .table .label:contains("${name}")`,
            },
        ];
    }
    clickFloor(name) {
        return [
            {
                content: `click '${name}' floor`,
                trigger: `.floor-selector .button-floor:contains("${name}")`,
            },
        ];
    }
    clickEdit() {
        return [
            {
                content: 'Click Menu button',
                trigger: '.menu-button',
            },
            {
                content: `click edit button`,
                trigger: `.edit-button`,
            },
        ];
    }
    clickAddTable() {
        return [
            {
                content: "add table",
                trigger: `.edit-button i[aria-label=Add]`,
            },
        ];
    }
    clickDuplicate() {
        return [
            {
                content: "duplicate table",
                trigger: `.edit-button i[aria-label=Copy]`,
            },
        ];
    }
    clickRename() {
        return [
            {
                content: "rename table",
                trigger: `.edit-button i[aria-label=Rename]`,
            },
        ];
    }
    clickSeats() {
        return [
            {
                content: "change number of seats",
                trigger: `.edit-button i[aria-label=Seats]`,
            },
        ];
    }
    clickTrash() {
        return [
            {
                content: "trash table",
                trigger: `.edit-button.trash`,
            },
        ];
    }
    closeEdit() {
        return [
            {
                content: 'Close edit mode',
                trigger: '.edit-button .close-edit-button',
            }
        ];
    }
    changeShapeTo(shape) {
        return [
            {
                content: `change shape to '${shape}'`,
                trigger: `.edit-button .button-option${shape === "round" ? ".round" : ".square"}`,
            },
        ];
    }
    ctrlClickTable(name) {
        return [
            {
                content: `ctrl click table '${name}'`,
                trigger: `.floor-map .table .label:contains("${name}")`,
                run() {
                    const el = this.$anchor[0];
                    el.dispatchEvent(new MouseEvent("click", {bubbles: true, ctrlKey: true}));
                }
            },
        ];
    }
}

class Check {
    selectedFloorIs(name) {
        return [
            {
                content: `selected floor is '${name}'`,
                trigger: `.floor-selector .button-floor.active:contains("${name}")`,
                run: () => {},
            },
        ];
    }
    selectedTableIs(name) {
        return [
            {
                content: `selected table is '${name}'`,
                trigger: `.floor-map .table.selected .label:contains("${name}")`,
                run: () => {},
            },
        ];
    }
    hasTable(name) {
        return [
            {
                content: `selected floor has '${name}' table`,
                trigger: `.floor-map .table .label:contains("${name}")`,
                run: () => {},
            },
        ];
    }
    tableSeatIs(table, val) {
        return [
            {
                content: `Unselect table`,
                trigger: `.floor-map`,
            },
            {
                content: `number of seats in table '${table}' is '${val}'`,
                trigger: `.floor-map .table .infos:has(.label:contains("${table}")) ~ .table-seats:contains("${val}")`,
                run: function () {},
            },
            {
                content: `click table '${table}'`,
                trigger: `.floor-map .table .label:contains("${table}")`,
            },
        ];
    }
    orderCountSyncedInTableIs(table, count) {
        return [
            {
                trigger: `.floor-map .table .label:contains("${table}") ~ .order-count:contains("${count}")`,
                run: function () {},
            },
        ];
    }
    isShown() {
        return [
            {
                trigger: ".floor-map",
                run: function () {},
            },
        ];
    }
    tableIsNotSelected(name) {
        return [
            {
                content: `table '${name}' is not selected`,
                trigger: `.floor-map .table:not(.selected) .label:contains("${name}")`,
                run: function () {},
            },
        ];
    }
}

class Execute {}

// FIXME: this is a horrible hack to export an object as named exports.
// eslint-disable-next-line no-undef
Object.assign(__exports, createTourMethods("FloorScreen", Do, Check, Execute));

return __exports;
});
;

/*************************************************************************************
*  Filepath: /pos_restaurant/static/tests/tours/helpers/ProductScreenTourMethods.js  *
*  Lines: 159                                                                        *
*************************************************************************************/
odoo.define('@pos_restaurant/../tests/tours/helpers/ProductScreenTourMethods', ['@point_of_sale/../tests/tours/helpers/utils', '@point_of_sale/../tests/tours/helpers/ProductScreenTourMethods'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { createTourMethods } = require("@point_of_sale/../tests/tours/helpers/utils");
const { Do, Check, Execute } = require("@point_of_sale/../tests/tours/helpers/ProductScreenTourMethods");

class DoExt extends Do {
    clickSplitBillButton() {
        return [
            {
                content: "click split bill button",
                trigger: ".control-buttons .control-button.order-split",
            },
        ];
    }
    doubleClickOrderline(name) {
        return [
            {
                content: "first click orderline",
                trigger: `.order .orderline .product-name:contains("${name}")`,
                run: "dblclick"
            },
        ];
    }
    clickTransferButton() {
        return [
            {
                content: "click transfer button",
                trigger: '.control-buttons .control-button span:contains("Transfer")',
            },
        ];
    }
    clickNoteButton() {
        return [
            {
                content: "click note button",
                trigger: '.control-buttons .control-button span:contains("Internal Note")',
            },
        ];
    }
    clickPrintBillButton() {
        return [
            {
                content: "click print bill button",
                trigger: ".control-buttons .control-button.order-printbill",
            },
            {
                content: "Close printing error",
                trigger: ".popup-error .cancel",
            },
        ];
    }
    clickSubmitButton() {
        return [
            {
                content: "click print bill button",
                trigger: '.control-buttons .control-button span:contains("Order")',
            },
        ];
    }
    clickGuestButton() {
        return [
            {
                content: "click guest button",
                trigger: '.control-buttons .control-button span:contains("Guests")',
            },
        ];
    }
    clickOrderButton() {
        return [
            {
                content: "click order button",
                trigger: ".actionpad .submit-order",
            },
        ];
    }
}

class CheckExt extends Check {
    orderlinesHaveNoChange() {
        return [
            {
                content: "Orderlines have no change",
                trigger: ".orderlines .orderline:not(.has-change)",
                run: function () {},
            },
        ];
    }
    isPrintingError() {
        // because we don't have printer in the test.
        return [
            {
                content: "Cancel printing changes",
                trigger: ".modal-dialog .cancel",
            },
        ];
    }
    orderlineIsToOrder(name) {
        return [
            {
                content: `Line is to order`,
                trigger: `.order .orderline.has-change .product-name:contains("${name}")`,
                run: function () {}, // it's a check
            },
        ];
    }
    orderlineIsToSkip(name) {
        return [
            {
                content: `Line is to order`,
                trigger: `.order .orderline.skip-change .product-name:contains("${name}")`,
                run: function () {}, // it's a check
            },
        ];
    }
    orderlineHasNote(name, quantity, note) {
        return [
            {
                content: `line has ${quantity} quantity`,
                trigger: `.order .orderline .product-name:contains("${name}") ~ .info-list em:contains("${quantity}")`,
                run: function () {}, // it's a check
            },
            {
                content: `line has '${note}' note`,
                trigger: `.order .orderline .info-list .orderline-note:contains("${note}")`,
                run: function () {}, // it's a check
            },
        ];
    }
    guestNumberIs(numberInString) {
        return [
            {
                content: `guest number is ${numberInString}`,
                trigger: `.control-buttons .control-button span.control-button-number:contains(${numberInString})`,
                run: function () {}, // it's a check
            },
        ];
    }
    orderBtnIsPresent() {
        return [
            {
                content: "Order button is here",
                trigger: ".actionpad .button.submit-order",
                run: function () {}, // it's a check
            },
        ];
    }
}

class ExecuteExt extends Execute {}

// FIXME: this is a horrible hack to export an object as named exports.
// eslint-disable-next-line no-undef
Object.assign(__exports, createTourMethods("ProductScreen", DoExt, CheckExt, ExecuteExt));

return __exports;
});
;

/***************************************************************************************
*  Filepath: /pos_restaurant/static/tests/tours/helpers/SplitBillScreenTourMethods.js  *
*  Lines: 71                                                                           *
***************************************************************************************/
odoo.define('@pos_restaurant/../tests/tours/helpers/SplitBillScreenTourMethods', ['@point_of_sale/../tests/tours/helpers/utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { createTourMethods } = require("@point_of_sale/../tests/tours/helpers/utils");

class Do {
    clickOrderline(name, totalQuantity) {
        let trigger = `.splitbill-screen li.orderline .product-name:contains("${name}")`;
        if (totalQuantity) {
            trigger += ` ~ .info-list .info:contains("${totalQuantity}")`;
        }
        return [
            {
                content: `click '${name}' orderline with total quantity of '${totalQuantity}'`,
                trigger,
            },
        ];
    }
    clickBack() {
        return [
            {
                content: "click back button",
                trigger: `.splitbill-screen .button.back`,
            },
        ];
    }
    clickPay() {
        return [
            {
                content: "click pay button",
                trigger: `.splitbill-screen .pay-button .button`,
            },
        ];
    }
}

class Check {
    orderlineHas(name, totalQuantity, splitQuantity) {
        return [
            {
                content: `'${name}' orderline has total quantity of '${totalQuantity}'`,
                trigger: `.splitbill-screen li.orderline .product-name:contains("${name}") ~ .info-list .info:contains("${totalQuantity}")`,
                run: () => {},
            },
            {
                content: `'${name}' orderline has '${splitQuantity}' quantity to split`,
                trigger: `.splitbill-screen li.orderline .product-name:contains("${name}") ~ .info-list .info em:contains("${splitQuantity}")`,
                run: () => {},
            },
        ];
    }
    subtotalIs(amount) {
        return [
            {
                content: `total amount of split is '${amount}'`,
                trigger: `.splitbill-screen .order-info .subtotal:contains("${amount}")`,
            },
        ];
    }
}

class Execute {}

// FIXME: this is a horrible hack to export an object as named exports.
// eslint-disable-next-line no-undef
Object.assign(__exports, createTourMethods("SplitBillScreen", Do, Check, Execute));

return __exports;
});
;

/*********************************************************************************
*  Filepath: /pos_restaurant/static/tests/tours/helpers/TipScreenTourMethods.js  *
*  Lines: 73                                                                     *
*********************************************************************************/
odoo.define('@pos_restaurant/../tests/tours/helpers/TipScreenTourMethods', ['@point_of_sale/../tests/tours/helpers/utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { createTourMethods } = require("@point_of_sale/../tests/tours/helpers/utils");

class Do {
    clickPercentTip(percent) {
        return [
            {
                trigger: `.tip-screen .percentage:contains("${percent}")`,
            },
        ];
    }
    setCustomTip(amount) {
        return [
            {
                trigger: `.tip-screen .custom-amount-form input`,
                run: `text ${amount}`,
            },
        ];
    }
    clickSettle() {
        return [
            {
                trigger: `.button.highlight.next`,
            },
        ];
    }
}

class Check {
    isShown() {
        return [
            {
                trigger: ".pos .tip-screen",
                run: () => {},
            },
        ];
    }
    totalAmountIs(amount) {
        return [
            {
                trigger: `.tip-screen .total-amount:contains("${amount}")`,
                run: () => {},
            },
        ];
    }
    percentAmountIs(percent, amount) {
        return [
            {
                trigger: `.tip-screen .percentage:contains("${percent}") ~ .amount:contains("${amount}")`,
                run: () => {},
            },
        ];
    }
    inputAmountIs(amount) {
        return [
            {
                trigger: `.tip-screen .custom-amount-form input[data-amount="${amount}"]`,
                run: () => {},
            },
        ];
    }
}

// FIXME: this is a horrible hack to export an object as named exports.
// eslint-disable-next-line no-undef
Object.assign(__exports, createTourMethods("TipScreen", Do, Check));

return __exports;
});
;

/*******************************************************************
*  Filepath: /pos_restaurant/static/tests/tours/pos_restaurant.js  *
*  Lines: 140                                                      *
*******************************************************************/
odoo.define('@pos_restaurant/../tests/tours/pos_restaurant', ['@point_of_sale/../tests/tours/helpers/PaymentScreenTourMethods', '@point_of_sale/../tests/tours/helpers/ReceiptScreenTourMethods', '@pos_restaurant/../tests/tours/helpers/ChromeTourMethods', '@pos_restaurant/../tests/tours/helpers/FloorScreenTourMethods', '@pos_restaurant/../tests/tours/helpers/ProductScreenTourMethods', '@point_of_sale/../tests/tours/helpers/TicketScreenTourMethods', '@point_of_sale/../tests/tours/helpers/utils', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { PaymentScreen } = require("@point_of_sale/../tests/tours/helpers/PaymentScreenTourMethods");
const { ReceiptScreen } = require("@point_of_sale/../tests/tours/helpers/ReceiptScreenTourMethods");
const { Chrome } = require("@pos_restaurant/../tests/tours/helpers/ChromeTourMethods");
const { FloorScreen } = require("@pos_restaurant/../tests/tours/helpers/FloorScreenTourMethods");
const { ProductScreen } = require("@pos_restaurant/../tests/tours/helpers/ProductScreenTourMethods");
const { TicketScreen } = require("@point_of_sale/../tests/tours/helpers/TicketScreenTourMethods");
const { getSteps, startSteps } = require("@point_of_sale/../tests/tours/helpers/utils");
const { registry } = require("@web/core/registry");

registry
    .category("web_tour.tours")
    .add("pos_restaurant_sync", { 
        test: true, 
        url: "/pos/ui", 
        steps: () => {

            startSteps();
            
            ProductScreen.do.confirmOpeningPopup();
            
            // Create first order
            FloorScreen.do.clickTable("5");
            ProductScreen.check.orderBtnIsPresent();
            ProductScreen.do.clickDisplayedProduct("Coca-Cola");
            ProductScreen.check.selectedOrderlineHas("Coca-Cola");
            ProductScreen.do.doubleClickOrderline("Coca-Cola");
            ProductScreen.do.clickDisplayedProduct("Water");
            ProductScreen.check.selectedOrderlineHas("Water");
            ProductScreen.check.orderlineIsToOrder("Water");
            ProductScreen.check.orderlineIsToSkip("Coca-Cola");
            ProductScreen.do.clickOrderButton();
            ProductScreen.check.orderlinesHaveNoChange();
            ProductScreen.check.isPrintingError();
            ProductScreen.check.totalAmountIs("4.40");
            
            // Create 2nd order (paid)
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.do.clickNewTicket();
            ProductScreen.do.clickDisplayedProduct("Coca-Cola");
            ProductScreen.check.selectedOrderlineHas("Coca-Cola");
            ProductScreen.do.clickDisplayedProduct("Minute Maid");
            ProductScreen.check.selectedOrderlineHas("Minute Maid");
            ProductScreen.check.totalAmountIs("4.40");
            ProductScreen.do.clickPayButton();
            PaymentScreen.do.clickPaymentMethod("Cash");
            PaymentScreen.do.clickValidate();
            ReceiptScreen.do.clickNextOrder();
            
            // After clicking next order, floor screen is shown.
            // It should have 1 as number of draft synced order.
            FloorScreen.check.orderCountSyncedInTableIs("5", "1");
            FloorScreen.do.clickTable("5");
            ProductScreen.check.totalAmountIs("4.40");
            
            // Create another draft order and go back to floor
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.do.clickNewTicket();
            ProductScreen.do.clickDisplayedProduct("Coca-Cola");
            ProductScreen.check.selectedOrderlineHas("Coca-Cola");
            ProductScreen.do.clickDisplayedProduct("Minute Maid");
            ProductScreen.check.selectedOrderlineHas("Minute Maid");
            Chrome.do.backToFloor();
            
            // At floor screen, there should be 2 synced draft orders
            FloorScreen.check.orderCountSyncedInTableIs("5", "2");
            
            // Delete the first order then go back to floor
            FloorScreen.do.clickTable("5");
            ProductScreen.check.isShown();
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.do.deleteOrder("-0001");
            Chrome.do.confirmPopup();
            Chrome.check.isSyncStatusPending();
            Chrome.check.isSyncStatusConnected();
            TicketScreen.do.selectOrder("-0003");
            Chrome.do.backToFloor();
            
            // There should be 1 synced draft order.
            FloorScreen.check.orderCountSyncedInTableIs("5", "2");
            return getSteps(); 
        } 
    });
    
/* pos_restaurant_sync_second_login
*
* This tour should be run after the first tour is done.
*/
registry
    .category("web_tour.tours")
    .add("pos_restaurant_sync_second_login", { 
        test: true, 
        url: "/pos/ui", 
        steps: () => {
        
            startSteps();
            
            
            // There is one draft synced order from the previous tour
            FloorScreen.do.clickTable("5");
            ProductScreen.check.totalAmountIs("4.40");
            
            // Test transfering an order
            ProductScreen.do.clickTransferButton();
            FloorScreen.do.clickTable("4");
            
            // Test if products still get merged after transfering the order
            ProductScreen.do.clickDisplayedProduct("Coca-Cola");
            ProductScreen.check.selectedOrderlineHas("Coca-Cola", "2.0");
            ProductScreen.check.totalAmountIs("6.60");
            ProductScreen.do.pressNumpad("1");
            ProductScreen.check.totalAmountIs("4.40");
            ProductScreen.do.clickPayButton();
            PaymentScreen.do.clickPaymentMethod("Cash");
            PaymentScreen.do.clickValidate();
            ReceiptScreen.do.clickNextOrder();
            // At this point, there are no draft orders.
            
            FloorScreen.do.clickTable("2");
            ProductScreen.check.isShown();
            ProductScreen.check.orderIsEmpty();
            ProductScreen.do.clickTransferButton();
            FloorScreen.do.clickTable("4");
            ProductScreen.do.clickDisplayedProduct("Coca-Cola");
            ProductScreen.check.totalAmountIs("2.20");
            Chrome.do.backToFloor();
            FloorScreen.check.orderCountSyncedInTableIs("4", "1");
            return getSteps(); 
        } 
    });

return __exports;
});
;

/*************************************************************************
*  Filepath: /pos_sale/static/tests/helpers/ProductScreenTourMethods.js  *
*  Lines: 74                                                             *
*************************************************************************/
odoo.define('@pos_sale/../tests/helpers/ProductScreenTourMethods', ['@point_of_sale/../tests/tours/helpers/utils', '@point_of_sale/../tests/tours/helpers/ProductScreenTourMethods'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { createTourMethods } = require("@point_of_sale/../tests/tours/helpers/utils");
const { Do, Check, Execute } = require("@point_of_sale/../tests/tours/helpers/ProductScreenTourMethods");

class DoExt extends Do {
    clickQuotationButton() {
        return [
            {
                content: 'click quotation button',
                trigger: '.o_sale_order_button',
            }
        ];
    }

    selectFirstOrder() {
        return [
            {
                content: `select order`,
                trigger: `.order-row .col.name:first`,
            },
            {
                content: `click on select the order`,
                trigger: `.selection-item:contains('Settle the order')`,
            }
        ];
    }
    selectNthOrder(n) {
        return [
            {
                content: `select order`,
                trigger: `.order-list .order-row:nth-child(${n})`,
            },
            {
                content: `click on select the order`,
                trigger: `.selection-item:contains('Settle the order')`,
            }
        ];
    }

    downPaymentFirstOrder() {
        return [
            {
                content: `select order`,
                trigger: `.order-row .col.name:first`,
            },
            {
                content: `click on select the order`,
                trigger: `.selection-item:contains('Apply a down payment')`,
            },
            {
                content: `click on +10 button`,
                trigger: `.mode-button.add:contains('+10')`,
            },
            {
                content: `click on ok button`,
                trigger: `.button.confirm`,
            }
        ];
    }
}
class CheckExt extends Check {}

class ExecuteExt extends Execute {}

// FIXME: this is a horrible hack to export an object as named exports.
// eslint-disable-next-line no-undef
Object.assign(__exports, createTourMethods("ProductScreen", DoExt, CheckExt, ExecuteExt));

return __exports;
});
;

/**********************************************************
*  Filepath: /pos_sale/static/tests/tours/PosSaleTour.js  *
*  Lines: 169                                             *
**********************************************************/
odoo.define('@pos_sale/../tests/tours/PosSaleTour', ['@point_of_sale/../tests/tours/helpers/ChromeTourMethods', '@point_of_sale/../tests/tours/helpers/PaymentScreenTourMethods', '@point_of_sale/../tests/tours/helpers/ReceiptScreenTourMethods', '@pos_sale/../tests/helpers/ProductScreenTourMethods', '@point_of_sale/../tests/tours/helpers/TicketScreenTourMethods', '@point_of_sale/../tests/tours/helpers/utils', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { Chrome } = require("@point_of_sale/../tests/tours/helpers/ChromeTourMethods");
const { PaymentScreen } = require("@point_of_sale/../tests/tours/helpers/PaymentScreenTourMethods");
const { ReceiptScreen } = require("@point_of_sale/../tests/tours/helpers/ReceiptScreenTourMethods");
const { ProductScreen } = require("@pos_sale/../tests/helpers/ProductScreenTourMethods");
const { TicketScreen } = require("@point_of_sale/../tests/tours/helpers/TicketScreenTourMethods");
const { getSteps, startSteps } = require("@point_of_sale/../tests/tours/helpers/utils");
const { registry } = require("@web/core/registry");

registry
    .category("web_tour.tours")
    .add('PosSettleOrder', { 
        test: true, 
        url: '/pos/ui', 
        steps: () => {
            // signal to start generating steps
            // when finished, steps can be taken from getSteps
            startSteps();
            
            ProductScreen.do.confirmOpeningPopup();
            ProductScreen.do.clickQuotationButton();
            ProductScreen.do.selectFirstOrder();
            ProductScreen.check.selectedOrderlineHas('Pizza Chicken', 9);
            ProductScreen.do.pressNumpad('Qty 2'); // Change the quantity of the product to 2
            ProductScreen.check.selectedOrderlineHas('Pizza Chicken', 2);
            ProductScreen.do.clickPayButton();
            PaymentScreen.do.clickPaymentMethod('Bank');
            PaymentScreen.do.clickValidate();
            ReceiptScreen.check.isShown();
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            return getSteps();
        }
    });
    
registry
    .category("web_tour.tours")
    .add('PosSettleOrderIncompatiblePartner', { 
        test: true, 
        url: '/pos/ui', 
        steps: () => {
            
            startSteps();
            
            ProductScreen.do.confirmOpeningPopup();
            ProductScreen.do.clickQuotationButton();
            // The second item in the list is the first sale.order.
            ProductScreen.do.selectNthOrder(2);
            ProductScreen.check.selectedOrderlineHas('product1', 1);
            ProductScreen.check.totalAmountIs("10.00");
            
            ProductScreen.do.clickQuotationButton();
            // The first item in the list is the second sale.order.
            // Selecting the 2nd sale.order should use a new order,
            // therefore, the total amount will change.
            ProductScreen.do.selectNthOrder(1);
            ProductScreen.check.selectedOrderlineHas('product2', 1);
            ProductScreen.check.totalAmountIs("11.00");
            return getSteps(); 
        } 
    });

registry
    .category("web_tour.tours")
    .add('PosSettleOrder2', { 
        test: true, 
        url: '/pos/ui', 
        steps: () => {
                
            startSteps();
            
            ProductScreen.do.confirmOpeningPopup();
            ProductScreen.do.clickQuotationButton();
            ProductScreen.do.selectFirstOrder();
            ProductScreen.do.clickOrderline("Product A", "1");
            ProductScreen.check.selectedOrderlineHas('Product A', '1.00');
            ProductScreen.do.clickOrderline("Product B", "1");
            ProductScreen.do.pressNumpad('Qty 0');
            ProductScreen.check.selectedOrderlineHas('Product B', '0.00');
            ProductScreen.do.clickPayButton();
            PaymentScreen.do.clickPaymentMethod('Bank');
            PaymentScreen.check.remainingIs('0.0');
            PaymentScreen.do.clickValidate();
            ReceiptScreen.check.isShown();
            return getSteps(); 
        } 
    });

registry
    .category("web_tour.tours")
    .add('PosRefundDownpayment', { 
        test: true, 
        url: '/pos/ui', 
        steps: () => {
            startSteps();
            
            ProductScreen.do.clickQuotationButton();
            ProductScreen.do.downPaymentFirstOrder();
            ProductScreen.do.clickPayButton();
            PaymentScreen.do.clickPaymentMethod('Cash');
            PaymentScreen.do.clickValidate();
            ReceiptScreen.do.clickNextOrder();
            ProductScreen.do.clickRefund();
            // Filter should be automatically 'Paid'.
            TicketScreen.check.filterIs('Paid');
            TicketScreen.do.selectOrder('-0001');
            TicketScreen.do.clickOrderline('Down Payment');
            TicketScreen.do.pressNumpad('1');
            TicketScreen.do.confirmRefund();
            ProductScreen.do.clickPayButton();
            PaymentScreen.do.clickPaymentMethod('Cash');
            PaymentScreen.do.clickValidate();
            ReceiptScreen.do.clickNextOrder();
            
            return getSteps(); 
        } 
    });

registry
    .category("web_tour.tours")
    .add('PosSettleOrderRealTime', { 
        test: true, 
        url: '/pos/ui', 
        steps: () => {

            startSteps();

            ProductScreen.do.confirmOpeningPopup();
            ProductScreen.do.clickQuotationButton();
            ProductScreen.do.selectFirstOrder();
            ProductScreen.check.totalAmountIs(40);
            ProductScreen.do.clickPayButton();
            PaymentScreen.do.clickPaymentMethod('Bank');
            PaymentScreen.do.clickValidate();
            ReceiptScreen.check.isShown();

            return getSteps(); 
        }
    });

registry
    .category("web_tour.tours")
    .add('PosSettleOrder3', {
        test: true,
        url: '/pos/ui',
        steps: () => {
            startSteps();

            ProductScreen.do.confirmOpeningPopup();
            ProductScreen.do.clickQuotationButton();
            ProductScreen.do.selectFirstOrder();
            ProductScreen.do.clickOrderline("Product A", "1");
            ProductScreen.check.selectedOrderlineHas('Product A', '1.00');
            ProductScreen.do.clickPayButton();
            PaymentScreen.do.clickPaymentMethod('Bank');
            PaymentScreen.check.remainingIs('0.0');
            PaymentScreen.do.clickValidate();
            ReceiptScreen.check.isShown();

            return getSteps();
        }
    });

return __exports;
});
;

/**************************************************************************************
*  Filepath: /pos_preparation_display/static/tests/tours/preparation_display_tour.js  *
*  Lines: 59                                                                          *
**************************************************************************************/
odoo.define('@pos_preparation_display/../tests/tours/preparation_display_tour', ['@point_of_sale/../tests/tours/helpers/ProductScreenTourMethods', '@point_of_sale/../tests/tours/helpers/PaymentScreenTourMethods', '@point_of_sale/../tests/tours/helpers/ReceiptScreenTourMethods', '@point_of_sale/../tests/tours/helpers/utils', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { ProductScreen } = require("@point_of_sale/../tests/tours/helpers/ProductScreenTourMethods");
const { PaymentScreen } = require("@point_of_sale/../tests/tours/helpers/PaymentScreenTourMethods");
const { ReceiptScreen } = require("@point_of_sale/../tests/tours/helpers/ReceiptScreenTourMethods");
const { getSteps, startSteps } = require("@point_of_sale/../tests/tours/helpers/utils");
const { registry } = require("@web/core/registry");


registry
    .category("web_tour.tours")
    .add("PreparationDisplayTour", { 
        test: true, 
        url: "/pos/ui", 
        steps: () => {
            startSteps();
            
            // First order should send these orderlines to preparation:
            // - Letter Tray x10
            ProductScreen.do.confirmOpeningPopup();
            
            ProductScreen.exec.addOrderline("Letter Tray", "10");
            ProductScreen.check.selectedOrderlineHas("Letter Tray", "10.0");
            ProductScreen.exec.addOrderline("Magnetic Board", "5");
            ProductScreen.check.selectedOrderlineHas("Magnetic Board", "5.0");
            ProductScreen.exec.addOrderline("Monitor Stand", "1");
            ProductScreen.check.selectedOrderlineHas("Monitor Stand", "1.0");
            ProductScreen.do.clickPayButton();
            
            PaymentScreen.do.clickPaymentMethod("Bank");
            PaymentScreen.check.changeIs("0.0");
            PaymentScreen.check.validateButtonIsHighlighted(true);
            PaymentScreen.do.clickValidate();
            
            ReceiptScreen.do.clickNextOrder();
            
            // Should not send anything to preparation
            ProductScreen.exec.addOrderline("Magnetic Board", "5");
            ProductScreen.check.selectedOrderlineHas("Magnetic Board", "5.0");
            ProductScreen.exec.addOrderline("Monitor Stand", "1");
            ProductScreen.check.selectedOrderlineHas("Monitor Stand", "1.0");
            ProductScreen.do.clickPayButton();
            
            PaymentScreen.do.clickPaymentMethod("Bank");
            PaymentScreen.check.changeIs("0.0");
            PaymentScreen.check.validateButtonIsHighlighted(true);
            PaymentScreen.do.clickValidate();
            
            ReceiptScreen.do.clickNextOrder();

            return getSteps();
        } 
    });

return __exports;
});
;

/*************************************************************************************************
*  Filepath: /pos_restaurant_preparation_display/static/tests/tours/preparation_display_tour.js  *
*  Lines: 79                                                                                     *
*************************************************************************************************/
odoo.define('@pos_restaurant_preparation_display/../tests/tours/preparation_display_tour', ['@point_of_sale/../tests/tours/helpers/PaymentScreenTourMethods', '@point_of_sale/../tests/tours/helpers/ReceiptScreenTourMethods', '@pos_restaurant/../tests/tours/helpers/FloorScreenTourMethods', '@pos_restaurant/../tests/tours/helpers/ProductScreenTourMethods', '@point_of_sale/../tests/tours/helpers/utils', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { PaymentScreen } = require("@point_of_sale/../tests/tours/helpers/PaymentScreenTourMethods");
const { ReceiptScreen } = require("@point_of_sale/../tests/tours/helpers/ReceiptScreenTourMethods");
const { FloorScreen } = require("@pos_restaurant/../tests/tours/helpers/FloorScreenTourMethods");
const { ProductScreen } = require("@pos_restaurant/../tests/tours/helpers/ProductScreenTourMethods");
const { getSteps, startSteps } = require("@point_of_sale/../tests/tours/helpers/utils");
const { registry } = require("@web/core/registry");


registry
    .category("web_tour.tours")
    .add("PreparationDisplayTourResto", { 
        test: true, 
        url: "/pos/ui", 
        steps: () => {
            startSteps();
            
            ProductScreen.do.confirmOpeningPopup();
            
            // Create first order
            FloorScreen.do.clickTable("5");
            ProductScreen.check.orderBtnIsPresent();
            ProductScreen.do.clickDisplayedProduct("Coca-Cola");
            ProductScreen.do.clickDisplayedProduct("Water");
            ProductScreen.check.orderlineIsToOrder("Water");
            ProductScreen.check.orderlineIsToOrder("Coca-Cola");
            ProductScreen.do.clickOrderButton();
            ProductScreen.check.orderlinesHaveNoChange();
            ProductScreen.do.clickPayButton();
            PaymentScreen.do.clickPaymentMethod("Cash");
            PaymentScreen.do.clickValidate();
            ReceiptScreen.check.isShown();
            ReceiptScreen.do.clickNextOrder();
            
            // Create second order
            FloorScreen.check.isShown();
            FloorScreen.do.clickTable("4");
            ProductScreen.check.orderBtnIsPresent();
            ProductScreen.do.clickDisplayedProduct("Coca-Cola");
            ProductScreen.check.orderlineIsToOrder("Coca-Cola");
            ProductScreen.do.clickOrderButton();
            ProductScreen.check.orderlinesHaveNoChange();
            ProductScreen.do.clickPayButton();
            PaymentScreen.do.clickPaymentMethod("Cash");
            PaymentScreen.do.clickValidate();
            ReceiptScreen.check.isShown();
            ReceiptScreen.do.clickNextOrder();
            
            // Create third order
            FloorScreen.check.isShown();
            FloorScreen.do.clickTable("4");
            ProductScreen.check.orderBtnIsPresent();
            ProductScreen.do.clickDisplayedProduct("Coca-Cola");
            ProductScreen.do.clickDisplayedProduct("Water");
            ProductScreen.do.clickDisplayedProduct("Minute Maid");
            ProductScreen.check.orderlineIsToOrder("Coca-Cola");
            ProductScreen.check.orderlineIsToOrder("Water");
            ProductScreen.check.orderlineIsToOrder("Minute Maid");
            ProductScreen.do.clickOrderButton();
            ProductScreen.check.orderlinesHaveNoChange();
            ProductScreen.check.selectedOrderlineHas("Minute Maid", "1.00");
            ProductScreen.do.pressNumpad("Backspace");
            ProductScreen.check.selectedOrderlineHas("Minute Maid", "0.00");
            ProductScreen.do.clickPayButton();
            PaymentScreen.do.clickPaymentMethod("Cash");
            PaymentScreen.do.clickValidate();
            ReceiptScreen.check.isShown();
            ReceiptScreen.do.clickNextOrder();

            return getSteps(); 
        } 
    });

return __exports;
});
;

/***************************************************
*  Filepath: /auth_totp/static/tests/totp_flow.js  *
*  Lines: 344                                      *
***************************************************/
odoo.define('@auth_totp/../tests/totp_flow', ['web.ajax', '@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const ajax = require("web.ajax");
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

function openRoot() {
    return [{
        content: "return to client root to avoid race condition",
        trigger: 'body',
        run() {
            $('body').addClass('wait');
            window.location = '/web';
        }
    }, {
        content: "wait for client reload",
        trigger: 'body:not(.wait)',
        run() {}
    }];
}
function openUserProfileAtSecurityTab() {
    return [{
        content: 'Open user account menu',
        trigger: '.o_user_menu .dropdown-toggle',
        run: 'click',
    }, {
        content: "Open preferences / profile screen",
        trigger: '[data-menu=settings]',
        run: 'click',
    }, {
        content: "Switch to security tab",
        trigger: 'a[role=tab]:contains("Account Security")',
        run: 'click',
    }];
}

/**
 * Checks that the TOTP button is in the specified state (true = enabled =
 * can disable, false = disabled = can enable), then closes the profile dialog
 * if it's one (= hr not installed).
 *
 * If no totp state is provided, just checks that the toggle exists.
 */
function closeProfileDialog({content, totp_state}) {
    let trigger;
    switch (totp_state) {
    case true: trigger = 'button[name=action_totp_disable]'; break;
    case false: trigger = 'button[name=action_totp_enable_wizard]'; break;
    case undefined: trigger = 'button.o_auth_2fa_btn'; break;
    default: throw new Error(`Invalid totp state ${totp_state}`)
    }

    return [{
        content,
        trigger,
        run() {
            const $modal = this.$anchor.parents('.o_dialog');
            if ($modal.length) {
                $modal.find('button[name=preference_cancel]').click()
            }
        }
    }, {
        trigger: 'body',
        async run() {
            while (document.querySelector('.o_dialog')) {
                await Promise.resolve();
            }
            this.$anchor.addClass('dialog-closed');
        },
    }, {
        trigger: 'body.dialog-closed',
        run() {},
    }];
}

registry.category("web_tour.tours").add('totp_tour_setup', {
    test: true,
    url: '/web',
    steps: () => [...openUserProfileAtSecurityTab(), {
    content: "Open totp wizard",
    trigger: 'button[name=action_totp_enable_wizard]',
}, {
    content: "Check that we have to enter enhanced security mode and input password",
    extra_trigger: 'div:contains("enter your password")',
    trigger: '[name=password] input',
    run: 'text demo',
}, {
    content: "Confirm",
    trigger: "button:contains(Confirm Password)",
}, {
    content: "Check the wizard has opened",
    trigger: 'li:contains("When requested to do so")',
    run() {}
}, {
    content: "Get secret from collapsed div",
    trigger: 'a:contains("Cannot scan it?")',
    async run(helpers) {
        const $secret = this.$anchor.closest('div').find('[name=secret] span:first-child');
        const $copyBtn = $secret.find('button');
        $copyBtn.remove();
        const token = await ajax.jsonRpc('/totphook', 'call', {
            secret: $secret.text()
        });
        helpers.text(token, '[name=code] input');
        helpers.click('button.btn-primary:contains(Activate)');
        $('body').addClass('got-token')
    }
}, {
    content: 'wait for rpc',
    trigger: 'body.got-token',
    run() {}
},
...openRoot(),
...openUserProfileAtSecurityTab(),
...closeProfileDialog({
    content: "Check that the button has changed",
    totp_state: true,
}),
]});

registry.category("web_tour.tours").add('totp_login_enabled', {
    test: true,
    url: '/',
    steps: () => [{
    content: "check that we're on the login page or go to it",
    trigger: 'input#login, a:contains(Sign in)'
}, {
    content: "input login",
    trigger: 'input#login',
    run: 'text demo',
}, {
    content: 'input password',
    trigger: 'input#password',
    run: 'text demo',
}, {
    content: "click da button",
    trigger: 'button:contains("Log in")',
}, {
    content: "expect totp screen",
    trigger: 'label:contains(Authentication Code)',
}, {
    content: "input code",
    trigger: 'input[name=totp_token]',
    async run(helpers) {
        // TODO: if tours are ever async-aware the click should get moved out,
        //       but currently there's no great way to make the tour wait until
        //       we've retrieved and set the token: `:empty()` is aboutthe text
        //       content of the HTML element, not the JS value property. We
        //       could set a class but that's really no better than
        //       procedurally clicking the button after we've set the input.
        const token = await ajax.jsonRpc('/totphook', 'call', {});
        helpers.text(token);
        helpers.click('button:contains("Log in")');
    }
}, {
    content: "check we're logged in",
    trigger: ".o_user_menu .dropdown-toggle",
    run() {}
}]});

registry.category("web_tour.tours").add('totp_login_device', {
    test: true,
    url: '/',
    steps: () => [{
    content: "check that we're on the login page or go to it",
    trigger: 'input#login, a:contains(Sign in)'
}, {
    content: "input login",
    trigger: 'input#login',
    run: 'text demo',
}, {
    content: 'input password',
    trigger: 'input#password',
    run: 'text demo',
}, {
    content: "click da button",
    trigger: 'button:contains("Log in")',
}, {
    content: "expect totp screen",
    trigger: 'label:contains(Authentication Code)',
}, {
    content: "check remember device box",
    trigger: 'label[for=switch-remember]',
}, {
    content: "input code",
    trigger: 'input[name=totp_token]',
    async run(helpers) {
        const token = await ajax.jsonRpc('/totphook', 'call', {})
        helpers.text(token);
        helpers.click('button:contains("Log in")');
    }
}, {
    content: "check we're logged in",
    trigger: ".o_user_menu .dropdown-toggle",
    run: 'click',
}, {
    content: "click the Log out button",
    trigger: '.dropdown-item[data-menu=logout]',
}, {
    content: "check that we're back on the login page or go to it",
    trigger: 'input#login, a:contains(Log in)'
}, {
    content: "input login again",
    trigger: 'input#login',
    run: 'text demo',
}, {
    content: 'input password again',
    trigger: 'input#password',
    run: 'text demo',
}, {
    content: "click da button again",
    trigger: 'button:contains("Log in")',
},  {
    content: "check we're logged in without 2FA",
    trigger: ".o_user_menu .dropdown-toggle",
    run() {}
},
// now go and disable two-factor authentication would be annoying to do in a separate tour
// because we'd need to login & totp again as HttpCase.authenticate can't
// succeed w/ totp enabled
...openUserProfileAtSecurityTab(),
{
    content: "Open totp wizard",
    trigger: 'button[name=action_totp_disable]',
}, {
    content: "Check that we have to enter enhanced security mode and input password",
    extra_trigger: 'div:contains("enter your password")',
    trigger: '[name=password] input',
    run: 'text demo',
}, {
    content: "Confirm",
    trigger: "button:contains(Confirm Password)",
},
...openRoot(),
...openUserProfileAtSecurityTab(),
...closeProfileDialog({
    content: "Check that the button has changed",
    totp_state: false
}),
]});

registry.category("web_tour.tours").add('totp_login_disabled', {
    test: true,
    url: '/',
    steps: () => [{
    content: "check that we're on the login page or go to it",
    trigger: 'input#login, a:contains(Sign in)'
}, {
    content: "input login",
    trigger: 'input#login',
    run: 'text demo',
}, {
    content: 'input password',
    trigger: 'input#password',
    run: 'text demo',
}, {
    content: "click da button",
    trigger: 'button:contains("Log in")',
},
// normally we'd end the tour here as it's all we care about but there are a
// bunch of ongoing queries from the loading of the web client which cause
// issues, so go and open the preferences / profile screen to make sure
// everything settles down
...openUserProfileAtSecurityTab(),
// close the dialog if that makes sense
...closeProfileDialog({})
]});

const columns = {};
registry.category("web_tour.tours").add('totp_admin_disables', {
    test: true,
    url: '/web',
    steps: () => [stepUtils.showAppsMenuItem(), {
    content: 'Go to settings',
    trigger: '[data-menu-xmlid="base.menu_administration"]'
}, {
    content: 'Wait for page',
    trigger: '.o_menu_brand:contains("Settings")',
    run() {}
}, {
    content: "Open Users menu",
    trigger: '[data-menu-xmlid="base.menu_users"]'
}, {
    content: "Open Users view",
    trigger: '[data-menu-xmlid="base.menu_action_res_users"]',
    run(helpers) {
        // funny story: the users view we're trying to reach, sometimes we're
        // already there, but if we re-click the next step executes before the
        // action has the time to re-load, the one after that doesn't, and our
        // selection get discarded by the action reloading, so here try to
        // see if we're already on the users action through the breadcrumb and
        // just close the menu if so
        const $crumb = $('.breadcrumb');
        if ($crumb.text().indexOf('Users') === -1) {
            // on general settings page, click menu
            helpers.click();
        } else {
            // else close menu
            helpers.click($('[data-menu-xmlid="base.menu_users"]'));
        }
    }
}, {
    content: "Find Demo User",
    trigger: 'td.o_data_cell:contains("demo")',
    run(helpers) {
        const $titles = this.$anchor.closest('table').find('tr:first th');
        for (let i=0; i<$titles.length; ++i) {
            columns[$titles[i].getAttribute('data-name')] = i;
        }
        const $row = this.$anchor.closest('tr');
        const sel = $row.find('.o_list_record_selector input[type=checkbox]');
        helpers.click(sel);
    }
}, {
    content: "Open Actions menu",
    trigger: 'button.dropdown-toggle:contains("Action")'
}, {
    content: "Select totp remover",
    trigger: 'span.dropdown-item:contains(Disable two-factor authentication)'
}, { // enhanced security yo
    content: "Check that we have to enter enhanced security mode & input password",
    extra_trigger: 'div:contains("enter your password")',
    trigger: '[name=password] input',
    run: 'text admin',
}, {
    content: "Confirm",
    trigger: "button:contains(Confirm Password)",
}, {
    content: "open the user's form",
    trigger: "td.o_data_cell:contains(demo)",
}, {
    content: "go to Account security Tab",
    trigger: "a.nav-link:contains(Account Security)",
}, ...closeProfileDialog({
    content: "check that demo user has been de-totp'd",
    totp_state: false,
}),
]})

return __exports;
});
;

/********************************************************
*  Filepath: /auth_totp_mail/static/tests/totp_flow.js  *
*  Lines: 80                                            *
********************************************************/
odoo.define('@auth_totp_mail/../tests/totp_flow', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

function openAccountSettingsTab() {
    return [{
        content: 'Go to settings',
        trigger: '[data-menu-xmlid="base.menu_administration"]'
    }, {
        content: 'Wait for page',
        trigger: '.o_menu_brand:contains("Settings")',
        run: () => {}
    }, {
        content: "Open Users menu",
        trigger: '[data-menu-xmlid="base.menu_users"]'
    }, {
        content: "Open Users view",
        trigger: '[data-menu-xmlid="base.menu_action_res_users"]',
        run: function (helpers) {
            // funny story: the users view we're trying to reach, sometimes we're
            // already there, but if we re-click the next step executes before the
            // action has the time to re-load, the one after that doesn't, and our
            // selection get discarded by the action reloading, so here try to
            // see if we're already on the users action through the breadcrumb and
            // just close the menu if so
            const $crumb = $('.breadcrumb');
            if ($crumb.text().indexOf('Users') === -1) {
                // on general settings page, click menu
                helpers.click();
            } else {
                // else close menu
                helpers.click($('[data-menu-xmlid="base.menu_users"]'));
            }
        }
    }];
}

registry.category("web_tour.tours").add('totp_admin_self_invite', {
    test: true,
    url: '/web',
    steps: () => [stepUtils.showAppsMenuItem(), ...openAccountSettingsTab(), {
    content: "open the user's form",
    trigger: "td.o_data_cell:contains(admin)",
}, {
    content: "go to Account security Tab",
    trigger: "a.nav-link:contains(Account Security)",
}, {
    content: "check that user cannot invite themselves to use 2FA.",
    trigger: "body",
    run: function () {
        const inviteBtn = $('button:contains(Invite to use 2FA)')[0];
        if (!inviteBtn) {
            $('body').addClass('CannotInviteYourself');
        }
    }
}, {
    content: "check that user cannot invite themself.",
    trigger: "body.CannotInviteYourself"
}]});

registry.category("web_tour.tours").add('totp_admin_invite', {
    test: true,
    url: '/web',
    steps: () => [stepUtils.showAppsMenuItem(), ...openAccountSettingsTab(), {
    content: "open the user's form",
    trigger: "td.o_data_cell:contains(demo)",
}, {
    content: "go to Account security Tab",
    trigger: "a.nav-link:contains(Account Security)",
}, {
    content: "check that demo user can be invited to use 2FA.",
    trigger: "button:contains(Invite to use 2FA)",
}]});

return __exports;
});
;

/************************************************************
*  Filepath: /auth_totp_portal/static/tests/totp_portal.js  *
*  Lines: 128                                               *
************************************************************/
odoo.define('@auth_totp_portal/../tests/totp_portal', ['web.ajax', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const ajax = require("web.ajax");
const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('totportal_tour_setup', {
    test: true,
    url: '/my/security',
    steps: () => [{
    content: "Open totp wizard",
    trigger: 'button#auth_totp_portal_enable',
}, {
    content: "Check that we have to enter enhanced security mode",
    trigger: 'div:contains("enter your password")',
    run: () => {},
}, {
    content: "Input password",
    trigger: '[name=password]',
    run: 'text portal', // FIXME: better way to do this?
}, {
    content: "Confirm",
    trigger: "button:contains(Confirm Password)",
}, {
    content: "Check the wizard has opened",
    trigger: 'li:contains("scan the barcode below")',
    run: () => {}
}, {
    content: "Get secret from collapsed div",
    trigger: 'a:contains("Cannot scan it?")',
    run: async function(helpers) {
        const secret = this.$anchor.closest('div').find('span[name="secret"]').text();
        const token = await ajax.jsonRpc('/totphook', 'call', {
            secret
        });
        helpers._text(helpers._get_action_values('input[name=code]'), token);
        helpers._click(helpers._get_action_values('button.btn-primary:contains(Activate)'));
    }
}, {
    content: "Check that the button has changed",
    trigger: 'button:contains(Disable two-factor authentication)',
    run: () => {}
}]});

registry.category("web_tour.tours").add('totportal_login_enabled', {
    test: true,
    url: '/',
    steps: () => [{
    content: "check that we're on the login page or go to it",
    trigger: 'input#login, a:contains(Sign in)'
}, {
    content: "input login",
    trigger: 'input#login',
    run: 'text portal',
}, {
    content: 'input password',
    trigger: 'input#password',
    run: 'text portal',
}, {
    content: "click da button",
    trigger: 'button:contains("Log in")',
}, {
    content: "expect totp screen",
    trigger: 'label:contains(Authentication Code)',
}, {
    content: "input code",
    trigger: 'input[name=totp_token]',
    run: async function (helpers) {
        const token = await ajax.jsonRpc('/totphook', 'call', {});
        helpers._text(helpers._get_action_values(), token);
        // FIXME: is there a way to put the button as its own step trigger without
        //        the tour straight blowing through and not waiting for this?
        helpers._click(helpers._get_action_values('button:contains("Log in")'));
    }
}, {
    content: "check we're logged in",
    trigger: "h3:contains(Documents)",
    run: () => {}
}, {
    content: "go back to security",
    trigger: "a:contains(Security)",
},{
    content: "Open totp wizard",
    trigger: 'button#auth_totp_portal_disable',
}, {
    content: "Check that we have to enter enhanced security mode",
    trigger: 'div:contains("enter your password")',
    run: () => {},
}, {
    content: "Input password",
    trigger: '[name=password]',
    run: 'text portal', // FIXME: better way to do this?
}, {
    content: "Confirm",
    trigger: "button:contains(Confirm Password)",
}, {
    content: "Check that the button has changed",
    trigger: 'button:contains(Enable two-factor authentication)',
    run: () => {}
}]});

registry.category("web_tour.tours").add('totportal_login_disabled', {
    test: true,
    url: '/',
    steps: () => [{
    content: "check that we're on the login page or go to it",
    trigger: 'input#login, a:contains(Sign in)'
}, {
    content: "input login",
    trigger: 'input#login',
    run: 'text portal',
}, {
    content: 'input password',
    trigger: 'input#password',
    run: 'text portal',
}, {
    content: "click da button",
    trigger: 'button:contains("Log in")',
}, {
    content: "check we're logged in",
    trigger: "h3:contains(Documents)",
    run: () => {}
}]});

return __exports;
});
;

/***************************************************************
*  Filepath: /sale_project/static/tests/tours/project_tour.js  *
*  Lines: 27                                                   *
***************************************************************/
odoo.define('@sale_project/../tests/tours/project_tour', ['@web/core/registry', '@project/../tests/tours/project_tour', '@web/core/utils/patch'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

/**
 * Add custom step to check allow_billable during project creation
 * to be able to set a partner on project/tasks.
 */
const { registry } = require("@web/core/registry");
require("@project/../tests/tours/project_tour");
const { patch } = require("@web/core/utils/patch");

patch(registry.category("web_tour.tours").get("project_test_tour"), "patch_sale_project_tour", {
    steps() {
        const originalSteps = this._super();
        const projectCreationStepIndex = originalSteps.findIndex((step) => step.id === "project_creation");
        originalSteps.splice(projectCreationStepIndex, 0, {
            trigger: "div[name='allow_billable'] input",
        });

        return originalSteps;
    }
})

return __exports;
});
;

/****************************************************************
*  Filepath: /documents_spreadsheet/static/tests/utils/tour.js  *
*  Lines: 68                                                    *
****************************************************************/
odoo.define('@documents_spreadsheet/../tests/utils/tour', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");

/**
 * @param {string} tourName
 * @param {string} templateName
 */
__exports.registerTemplateTour = registerTemplateTour; function registerTemplateTour(tourName, templateName) {
    registry.category("web_tour.tours").add(
        tourName,
        {
            test: true,
            url: "/web",
            steps: () => [
            {
                trigger: '.o_app[data-menu-xmlid="documents.menu_root"]',
                content: "Open document app",
                run: "click",
            },
            {
                trigger: 'button[data-menu-xmlid="documents.Config"]',
                content: "Open Configuration menu",
                run: "click",
            },
            {
                trigger:
                    '.dropdown-item[data-menu-xmlid="documents_spreadsheet.menu_technical_spreadsheet_template"]',
                content: "Open Configuration menu",
                run: "click",
            },
            {
                trigger: ".o_searchview .o_facet_remove",
                content: 'Remove "My templates" filter',
                run: "click",
            },
            {
                trigger: "input.o_searchview_input",
                content: "Search the template",
                run: `text ${templateName}`,
            },
            {
                trigger: ".o_menu_item.focus",
                content: "Validate search",
                run: "click",
            },
            {
                trigger: `tr.o_data_row:first-child td[data-tooltip="${templateName}"]`,
                content: "Wait search to complete",
            },
            {
                trigger: "button.o-new-spreadsheet",
                content: "Create spreadsheet from template",
                run: "click",
            },
            {
                trigger: ".o-spreadsheet",
                content: "Redirected to spreadsheet",
            },
        ]
    });
}

return __exports;
});
;

/**********************************************************************
*  Filepath: /documents_spreadsheet/static/tests/tours/clone_xlsx.js  *
*  Lines: 104                                                         *
**********************************************************************/
odoo.define('@documents_spreadsheet/../tests/tours/clone_xlsx', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module**/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add("spreadsheet_clone_xlsx", {
    test: true,
    steps: () => [
        stepUtils.showAppsMenuItem(),
        {
            trigger: '.o_app[data-menu-xmlid="documents.menu_root"]',
            content: "Open document app",
        },
        {
            trigger: '.o_search_panel_label_title:contains("Test folder")',
            content: "Open Test folder workspace",
        },
        {
            trigger: '.o_search_panel_field header.active:contains("Test folder")',
            extra_trigger: '.o_inspector_value:contains("1")',
            content: "Make sure we start with one card",
        },
        {
            trigger: ".o_document_xlsx",
            content: "Open xlsx card",
        },
        {
            trigger: "input#willArchive",
            content: "Uncheck sending to trash",
        },
        {
            trigger: ".modal-dialog footer button.btn-primary",
            content: "Open with Odoo Spreadsheet",
        },
        {
            trigger: ".o-spreadsheet-topbar",
            content: "Check that we are now in Spreadsheet",
            isCheck: true,
        },
        {
            trigger: '[data-menu-xmlid="documents.dashboard"]',
            content: "Go back to Document App",
        },
        {
            trigger: ".o_kanban_renderer .o_kanban_record:first:has('.o_document_spreadsheet')",
            content: "Check a spreadsheet document was created",
            isCheck: true,
        },
        {
            trigger: ".o_document_xlsx",
            content: "Re-open the xlsx card",
        },
        {
            trigger: ".modal-dialog footer button.btn-primary",
            content: "Open with Odoo Spreadsheet without unchecking the box",
        },
        {
            trigger: ".o-spreadsheet-topbar",
            content: "Check that we are now in Spreadsheet",
            isCheck: true,
        },
        {
            trigger: '[data-menu-xmlid="documents.dashboard"]',
            content: "Go back to Document App",
        },
        {
            trigger: ".o_kanban_renderer:not(:has(.o_kanban_record .o_document_xlsx))",
            content: "Check that XLSX is no longer visible",
            isCheck: true,
        },
        {
            trigger: ".o_control_panel .o_searchview_dropdown_toggler",
            content: "Open Filters",
        },
        {
            trigger: '.dropdown-item:contains("Archived")',
            content: "Show Archived",
        },
        {
            trigger: ".o_document_xlsx",
            content: "Re-open the xlsx card",
        },
        {
            trigger: ".modal-dialog footer button.btn-primary",
            content: "Restore xlsx",
        },
        {
            trigger: '.o_searchview_input_container:not(:contains("Archived"))',
            content: 'Wait for the "Archived" filter to be removed',
            isCheck: true,
        },
        {
            trigger: ".o_kanban_renderer .o_kanban_record",
            extra_trigger: '.o_inspector_value:contains("3")',
            content: "Check all records are now visible.",
        },
    ],
});

return __exports;
});
;

/***********************************************************************************
*  Filepath: /documents_spreadsheet/static/tests/tours/create_empty_sheet_tour.js  *
*  Lines: 108                                                                      *
***********************************************************************************/
odoo.define('@documents_spreadsheet/../tests/tours/create_empty_sheet_tour', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add("spreadsheet_create_empty_sheet", {
    test: true,
    steps: () => [
        stepUtils.showAppsMenuItem(),
        {
            trigger: '.o_app[data-menu-xmlid="documents.menu_root"]',
            content: "Open document app",
            run: "click",
        },
        {
            trigger: ".o_cp_buttons:contains('Upload') .dropdown-toggle.dropdown-toggle-split",
            content: "Open dropdown",
        },
        {
            trigger: ".o_documents_kanban_spreadsheet",
            content: "Open template dialog",
            run: "click",
        },
        {
            trigger: ".o-spreadsheet-create",
            content: "Create new spreadsheet",
            run: "click",
        },
        {
            trigger: 'span[title="Fill Color"]',
            content: "Choose a color",
            run: "click",
        },
        {
            trigger: '.o-color-picker-line-item[data-color="#990000"]',
            content: "Choose a color",
            run: "click",
        },
        {
            trigger: '[data-menu-xmlid="documents.dashboard"]',
            content: "Go back to Document App",
        },
        {
            trigger: ".o_document_spreadsheet:first",
            content: "Reopen the sheet",
            run: "click",
        },
    ],
});
registry.category("web_tour.tours").add("spreadsheet_create_list_view", {
    test: true,
    steps: () => [
        stepUtils.showAppsMenuItem(),
        {
            trigger: '.o_app[data-menu-xmlid="documents.menu_root"]',
            content: "Open document app",
            run: "click",
        },
        {
            trigger: "button.o_switch_view.o_list",
            content: "Switch to list view",
            run: "click",
        },
        {
            trigger: ".o_control_panel .o_cp_action_menus .dropdown-toggle",
            extra_trigger: ".o_list_view",
            content: "Open the cog menu",
            run: "click",
        },
        {
            trigger: ".o_control_panel .o_cp_action_menus .dropdown-toggle:contains(Spreadsheet)",
            run: function () {
                this.$anchor[0].dispatchEvent(new MouseEvent("mouseenter"));
            },
        },
        {
            trigger: ".o_insert_list_spreadsheet_menu",
            content: "Insert in spreadsheet",
            run: "click",
        },
        {
            trigger: ".modal-footer .btn-primary",
            content: "Confirm",
            run: "click",
        },
        {
            trigger: ".o-topbar-topleft .o-topbar-menu[data-id='data']",
            content: "Open Data menu",
            run: "click",
        },
        {
            trigger: ".o-menu-item[data-name='item_list_1']",
            content: "Open List Side Panel",
            run: "click",
        },
        {
            trigger: ".o_pivot_cancel",
            content: "Go back to the list of lists",
            run: "click",
        },
    ],
});

return __exports;
});
;

/********************************************************************************
*  Filepath: /documents_spreadsheet/static/tests/tours/create_template_tour.js  *
*  Lines: 92                                                                    *
********************************************************************************/
odoo.define('@documents_spreadsheet/../tests/tours/create_template_tour', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

const SHEET_NAME = "Partner Spreadsheet Test";
const TEMPLATE_NAME = `${SHEET_NAME} - Template`;

registry.category("web_tour.tours").add(
    "documents_spreadsheet_create_template_tour",
    {
        test: true,
        url: "/web",
        steps: () => [
        ...stepUtils.goToAppSteps("documents.menu_root", "Open Document app"),
        {
            trigger: `div[title="${SHEET_NAME}"]`,
            content: "Select Test Sheet",
            run: "click",
        },
        {
            trigger: `button.o_switch_view.o_list`,
            content: "Switch to list view",
            run: "click",
        },
        {
            trigger: `img[title="${SHEET_NAME}"]`,
            content: "Open the sheet",
            run: "click",
        },
        {
            trigger: `.o-topbar-menu[data-id="file"]`,
            content: "Open the file menu",
            run: "click",
        },
        {
            trigger: `.o-menu-item[data-name="save_as_template"]`,
            content: "Save as template",
            run: "click",
        },
        {
            trigger: `button[name="save_template"]`,
            content: "Save as template",
            run: "click",
        },
        {
            trigger: 'button[data-menu-xmlid="documents.Config"]',
            content: "Open Configuration menu",
            run: "click",
        },
        {
            trigger:
                '.dropdown-item[data-menu-xmlid="documents_spreadsheet.menu_technical_spreadsheet_template"]',
            content: "Open Templates menu",
            run: "click",
        },
        {
            trigger: ".o_searchview .o_facet_remove",
            content: 'Remove "My templates" filter',
            run: "click",
        },
        {
            trigger: "input.o_searchview_input",
            content: "Search the template",
            run: `text ${TEMPLATE_NAME}`,
        },
        {
            trigger: ".o_menu_item.focus",
            content: "Validate search",
            run: "click",
        },
        {
            trigger: `tr.o_data_row:first-child td[data-tooltip="${TEMPLATE_NAME}"]`,
            content: "Wait search to complete",
        },
        {
            trigger: "button.o-new-spreadsheet",
            content: "Create spreadsheet from template",
            run: "click",
        },
        {
            trigger: ".o-spreadsheet",
            content: "Redirected to spreadsheet",
        },
    ]
});

return __exports;
});
;

/*********************************************************************************
*  Filepath: /documents_spreadsheet/static/tests/tours/open_pivot_sheet_tour.js  *
*  Lines: 108                                                                    *
*********************************************************************************/
odoo.define('@documents_spreadsheet/../tests/tours/open_pivot_sheet_tour', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { TourError } = require("@web_tour/tour_service/tour_utils");

function assert(current, expected, info) {
    if (current !== expected) {
        fail(info + ': "' + current + '" instead of "' + expected + '".');
    }
}

function fail(errorMessage) {
    throw new TourError(errorMessage);
}

const SHEETNAME = "Partner Spreadsheet Test";
registry.category("web_tour.tours").add("spreadsheet_open_pivot_sheet", {
    test: true,
    steps: () => [
        {
            trigger: '.o_app[data-menu-xmlid="documents.menu_root"]',
            content: "Open document app",
            run: "click",
        },
        {
            trigger: `div[title="${SHEETNAME}"]`,
            content: "Select Test Sheet",
            run: "click",
        },
        {
            trigger: `button.o_switch_view.o_list`,
            content: "Switch to list view",
            run: "click",
        },
        {
            trigger: `img[title="${SHEETNAME}"]`,
            content: "Open the sheet",
            run: "click",
        },
        {
            trigger: "div.o_topbar_filter_icon",
            content: "Open Filters",
            run: "click",
        },
        {
            trigger: "div.pivot_filter",
            content: "",
            run: function (actions) {
                const pivots = document.querySelectorAll("div.pivot_filter");
                assert(pivots.length, 1, "There should be one filter");
                const pivot = pivots[0];
                assert(
                    pivot.querySelector("div.o_side_panel_title").textContent,
                    "MyFilter1",
                    "Invalid filter name"
                );
                assert(
                    Boolean(
                        pivot.querySelector(
                            'div.o_field_many2many_tags span.badge[title="Azure Interior"]'
                        )
                    ),
                    true,
                    "Wrong default filter value"
                );
                actions.click(pivot.querySelector(".o_side_panel_filter_icon.fa-cog"));
            },
        },
        {
            trigger: ".o_spreadsheet_filter_editor_side_panel",
            content: "Check filter values",
            run: function () {
                const defaultFilterValue = document.querySelectorAll(
                    'div.o_field_many2many_tags span.badge[title="Azure Interior"]'
                );
                assert(
                    defaultFilterValue.length,
                    1,
                    "There should be a default value in the filter..."
                );
                assert(
                    document.querySelector(".o_side_panel_related_model input").value,
                    "Contact",
                    "Wrong model selected"
                );

                const fieldsValue = document.querySelector(
                    "div.o_model_field_selector_value span.o_model_field_selector_chain_part"
                );
                assert(fieldsValue.textContent.trim(), "Related Company");
            },
        },
        {
            trigger: '[data-menu-xmlid="documents.dashboard"]',
            content: "Go back to Document App",
        },
        {
            trigger: ".o_document_spreadsheet:first",
            content: "Sheet is visible in Documents",
        },
    ],
});

return __exports;
});
;

/**************************************************************************
*  Filepath: /documents_spreadsheet/static/tests/tours/save_multipage.js  *
*  Lines: 83                                                              *
**************************************************************************/
odoo.define('@documents_spreadsheet/../tests/tours/save_multipage', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils, TourError } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add("spreadsheet_save_multipage", {
    test: true,
    steps: () => [
        stepUtils.showAppsMenuItem(),
        {
            trigger: '.o_app[data-menu-xmlid="documents.menu_root"]',
            content: "Open document app",
        },
        {
            trigger: ".o_cp_buttons:contains('Upload') .dropdown-toggle.dropdown-toggle-split",
            content: "Open dropdown",
        },
        {
            trigger: ".o_documents_kanban_spreadsheet",
            content: "Open template dialog",
        },
        {
            trigger: ".o-spreadsheet-create",
            content: "Create new spreadsheet",
        },
        {
            trigger: ".o-add-sheet",
            content: "Add a sheet",
        },
        {
            trigger: ".o-sheet-list .o-ripple-container:nth-child(2)",
            content: "Check that there are now two sheets",
            isCheck: true,
        },
        {
            trigger: '[data-menu-xmlid="documents.dashboard"]',
            content: "Go back to Document App",
        },
        {
            trigger: ".o_kanban_renderer .o_kanban_record:first .o_kanban_stack ",
            content: "Check is rendered as multipage",
            isCheck: true,
        },
        {
            trigger: ".o_document_spreadsheet:first",
            content: "Reopen the sheet",
        },
        {
            trigger: ".o-sheet .o-sheet-icon",
            content: "Open sheet dropdown",
        },
        {
            trigger: '.o-popover .o-menu-item[title="Delete"]',
            content: "Delete sheet",
        },
        {
            trigger: ".modal-dialog footer button.btn-primary",
            content: "Confirm delete sheet",
        },
        {
            trigger: '[data-menu-xmlid="documents.dashboard"]',
            content: "Go back to Document App",
        },
        {
            trigger: ".o_kanban_renderer .o_kanban_record:first",
            content: "Check is rendered as single page",
            run: () => {
                const card = document.querySelectorAll(
                    ".o_kanban_renderer .o_kanban_record:first-child > div.o_kanban_stack"
                );
                if (card.length > 1) {
                    throw new TourError("The card should not be rendered as multipage.");
                }
            },
        },
    ],
});

return __exports;
});
;

/*********************************************************************************************
*  Filepath: /documents_spreadsheet_account/static/tests/tours/spreadsheet_account_tours.js  *
*  Lines: 11                                                                                 *
*********************************************************************************************/
odoo.define('@documents_spreadsheet_account/../tests/tours/spreadsheet_account_tours', ['@documents_spreadsheet/../tests/utils/tour'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registerTemplateTour } = require("@documents_spreadsheet/../tests/utils/tour");

registerTemplateTour("spreadsheet_template_features", "Template with special characters");

return __exports;
});
;

/******************************************************
*  Filepath: /pos_hr/static/tests/tours/PosHrTour.js  *
*  Lines: 104                                         *
******************************************************/
odoo.define('@pos_hr/../tests/tours/PosHrTour', ['@pos_hr/../tests/tours/PosHrTourMethods', '@point_of_sale/../tests/tours/helpers/ProductScreenTourMethods', '@point_of_sale/../tests/tours/helpers/TicketScreenTourMethods', '@point_of_sale/../tests/tours/helpers/ChromeTourMethods', '@point_of_sale/../tests/tours/helpers/ErrorPopupTourMethods', '@point_of_sale/../tests/tours/helpers/NumberPopupTourMethods', '@point_of_sale/../tests/tours/helpers/SelectionPopupTourMethods', '@point_of_sale/../tests/tours/helpers/utils', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { PosHr } = require("@pos_hr/../tests/tours/PosHrTourMethods");
const { ProductScreen } = require("@point_of_sale/../tests/tours/helpers/ProductScreenTourMethods");
const { TicketScreen } = require("@point_of_sale/../tests/tours/helpers/TicketScreenTourMethods");
const { Chrome } = require("@point_of_sale/../tests/tours/helpers/ChromeTourMethods");
const { ErrorPopup } = require("@point_of_sale/../tests/tours/helpers/ErrorPopupTourMethods");
const { NumberPopup } = require("@point_of_sale/../tests/tours/helpers/NumberPopupTourMethods");
const { SelectionPopup } = require("@point_of_sale/../tests/tours/helpers/SelectionPopupTourMethods");
const { getSteps, startSteps } = require("@point_of_sale/../tests/tours/helpers/utils");
const { registry } = require("@web/core/registry");

registry
    .category("web_tour.tours")
    .add("PosHrTour", { 
        test: true, 
        url: "/pos/ui", 
        steps: () => {
            startSteps();
            
            PosHr.check.loginScreenIsShown();
            PosHr.do.clickLoginButton();
            SelectionPopup.check.isShown();
            SelectionPopup.check.hasSelectionItem("Pos Employee1");
            SelectionPopup.check.hasSelectionItem("Pos Employee2");
            SelectionPopup.check.hasSelectionItem("Mitchell Admin");
            SelectionPopup.do.clickItem("Pos Employee1");
            NumberPopup.check.isShown();
            NumberPopup.do.enterValue("25");
            NumberPopup.check.inputShownIs("••");
            NumberPopup.do.pressNumpad("8 1");
            NumberPopup.do.fillPopupValue("2581");
            NumberPopup.check.inputShownIs("••••");
            NumberPopup.do.clickConfirm();
            ErrorPopup.check.isShown();
            ErrorPopup.do.clickConfirm();
            PosHr.do.clickLoginButton();
            SelectionPopup.do.clickItem("Pos Employee1");
            NumberPopup.check.isShown();
            NumberPopup.do.enterValue("25");
            NumberPopup.check.inputShownIs("••");
            NumberPopup.do.pressNumpad("8 0");
            NumberPopup.do.fillPopupValue("2580");
            NumberPopup.check.inputShownIs("••••");
            NumberPopup.do.clickConfirm();
            ProductScreen.check.isShown();
            ProductScreen.do.confirmOpeningPopup();
            PosHr.check.cashierNameIs("Pos Employee1");
            PosHr.do.clickCashierName();
            SelectionPopup.do.clickItem("Mitchell Admin");
            PosHr.check.cashierNameIs("Mitchell Admin");
            Chrome.do.clickMenuButton();
            PosHr.do.clickLockButton();
            PosHr.do.clickLoginButton();
            SelectionPopup.do.clickItem("Pos Employee2");
            NumberPopup.do.enterValue("12");
            NumberPopup.check.inputShownIs("••");
            NumberPopup.do.pressNumpad("3 4");
            NumberPopup.do.fillPopupValue("1234");
            NumberPopup.check.inputShownIs("••••");
            NumberPopup.do.clickConfirm();
            ProductScreen.check.isShown();
            ProductScreen.do.clickHomeCategory();
            
            // Create orders and check if the ticket list has the right employee for each order
            // order for employee 2
            ProductScreen.exec.addOrderline("Desk Pad", "1", "2");
            ProductScreen.check.totalAmountIs("2.0");
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.check.nthRowContains(2, "Pos Employee2");
            
            // order for employee 1
            Chrome.do.clickMenuButton();
            PosHr.do.clickLockButton();
            PosHr.exec.login("Pos Employee1", "2580");
            TicketScreen.do.clickNewTicket();
            ProductScreen.exec.addOrderline("Desk Pad", "1", "4");
            ProductScreen.check.totalAmountIs("4.0");
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.check.nthRowContains(2, "Pos Employee2");
            TicketScreen.check.nthRowContains(3, "Pos Employee1");
            
            // order for admin
            PosHr.do.clickCashierName();
            SelectionPopup.do.clickItem("Mitchell Admin");
            PosHr.check.cashierNameIs("Mitchell Admin");
            TicketScreen.do.clickNewTicket();
            ProductScreen.exec.addOrderline("Desk Pad", "1", "8");
            ProductScreen.check.totalAmountIs("8.0");
            Chrome.do.clickMenuButton();
            Chrome.do.clickTicketButton();
            TicketScreen.check.nthRowContains(4, "Mitchell Admin");

            return getSteps(); 
        } 
    });

return __exports;
});
;

/*************************************************************
*  Filepath: /pos_hr/static/tests/tours/PosHrTourMethods.js  *
*  Lines: 74                                                 *
*************************************************************/
odoo.define('@pos_hr/../tests/tours/PosHrTourMethods', ['@point_of_sale/../tests/tours/helpers/utils', '@point_of_sale/../tests/tours/helpers/SelectionPopupTourMethods', '@point_of_sale/../tests/tours/helpers/NumberPopupTourMethods'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { createTourMethods } = require("@point_of_sale/../tests/tours/helpers/utils");
const { SelectionPopup } = require("@point_of_sale/../tests/tours/helpers/SelectionPopupTourMethods");
const { NumberPopup } = require("@point_of_sale/../tests/tours/helpers/NumberPopupTourMethods");

class Do {
    clickLoginButton() {
        return [
            {
                content: "click login button",
                trigger: ".login-overlay .login-button.select-cashier",
            },
        ];
    }
    clickLockButton() {
        return [
            {
                content: "click lock button",
                trigger: ".lock-button",
            },
        ];
    }
    clickCashierName() {
        return [
            {
                content: "click cashier name",
                trigger: ".oe_status .username",
            },
        ];
    }
}
class Check {
    loginScreenIsShown() {
        return [
            {
                content: "login screen is shown",
                trigger: ".login-overlay .screen-login .login-body",
                run: () => {},
            },
        ];
    }
    cashierNameIs(name) {
        return [
            {
                content: `logged cashier is '${name}'`,
                trigger: `.pos .oe_status .username:contains("${name}")`,
                run: () => {},
            },
        ];
    }
}
class Execute {
    login(name, pin) {
        const res = this._do.clickLoginButton();
        res.push(...SelectionPopup._do.clickItem(name));
        if (pin) {
            res.push(...NumberPopup._do.pressNumpad(pin.split("").join(" ")));
            res.push(...NumberPopup._check.inputShownIs("••••"));
            res.push(...NumberPopup._do.clickConfirm());
        }
        return res;
    }
}

// FIXME: this is a horrible hack to export an object as named exports.
// eslint-disable-next-line no-undef
Object.assign(__exports, createTourMethods("PosHr", Do, Check, Execute));

return __exports;
});
;

/***************************************************************************
*  Filepath: /pos_online_payment/static/tests/tours/OnlinePayment.tour.js  *
*  Lines: 142                                                              *
***************************************************************************/
odoo.define('@pos_online_payment/../tests/tours/OnlinePayment.tour', ['@point_of_sale/../tests/tours/helpers/ChromeTourMethods', '@point_of_sale/../tests/tours/helpers/ProductScreenTourMethods', '@point_of_sale/../tests/tours/helpers/PaymentScreenTourMethods', '@pos_online_payment/../tests/tours/helpers/OnlinePaymentPopupTourMethods', '@point_of_sale/../tests/tours/helpers/ReceiptScreenTourMethods', '@point_of_sale/../tests/tours/helpers/ErrorPopupTourMethods', '@point_of_sale/../tests/tours/helpers/utils', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { Chrome } = require("@point_of_sale/../tests/tours/helpers/ChromeTourMethods");
const { ProductScreen } = require("@point_of_sale/../tests/tours/helpers/ProductScreenTourMethods");
const { PaymentScreen } = require("@point_of_sale/../tests/tours/helpers/PaymentScreenTourMethods");
const { OnlinePaymentPopup } = require("@pos_online_payment/../tests/tours/helpers/OnlinePaymentPopupTourMethods");
const { ReceiptScreen } = require("@point_of_sale/../tests/tours/helpers/ReceiptScreenTourMethods");
const { ErrorPopup } = require("@point_of_sale/../tests/tours/helpers/ErrorPopupTourMethods");
const { getSteps, startSteps } = require("@point_of_sale/../tests/tours/helpers/utils");
const { registry } = require("@web/core/registry");

registry
    .category("web_tour.tours")
    .add("OnlinePaymentLocalFakePaidDataTour", { 
        test: true, 
        url: "/pos/ui", 
        steps: () => {
            startSteps();
            
            ProductScreen.do.confirmOpeningPopup();
            ProductScreen.exec.addOrderline("Letter Tray", "10");
            ProductScreen.check.selectedOrderlineHas("Letter Tray", "10.0");
            ProductScreen.do.clickPayButton();
            PaymentScreen.check.totalIs("48.0");
            PaymentScreen.check.emptyPaymentlines("48.0");
            
            PaymentScreen.do.clickPaymentMethod("Online payment");
            PaymentScreen.do.enterPaymentLineAmount("Online payment", "48");
            PaymentScreen.check.selectedPaymentlineHas("Online payment", "48.0");
            PaymentScreen.check.remainingIs("0.0");
            PaymentScreen.check.changeIs("0.0");
            PaymentScreen.check.validateButtonIsHighlighted(true);
            PaymentScreen.do.clickValidate();
            OnlinePaymentPopup.check.isShown();
            OnlinePaymentPopup.check.amountIs("48.0");
            OnlinePaymentPopup.do.fakeOnlinePaymentPaidData();
            OnlinePaymentPopup.check.isNotShown();
            ReceiptScreen.check.isShown();
            ReceiptScreen.check.receiptIsThere();
            return getSteps() 
        }
    });

registry
    .category("web_tour.tours")
    .add("OnlinePaymentErrorsTour", { 
        test: true, 
        url: "/pos/ui", 
        steps: () => {
            startSteps();
            
            ProductScreen.do.confirmOpeningPopup();
            ProductScreen.exec.addOrderline("Letter Tray", "10");
            ProductScreen.check.selectedOrderlineHas("Letter Tray", "10.0");
            ProductScreen.do.clickPayButton();
            PaymentScreen.check.totalIs("48.0");
            PaymentScreen.check.emptyPaymentlines("48.0");
            
            PaymentScreen.do.clickPaymentMethod("Online payment");
            PaymentScreen.do.enterPaymentLineAmount("Online payment", "47");
            PaymentScreen.check.selectedPaymentlineHas("Online payment", "47.0");
            PaymentScreen.check.remainingIs("1.0");
            PaymentScreen.check.changeIs("0.0");
            PaymentScreen.check.validateButtonIsHighlighted(false);
            PaymentScreen.do.clickPaymentMethod("Cash");
            PaymentScreen.do.enterPaymentLineAmount("Cash", "2");
            PaymentScreen.check.selectedPaymentlineHas("Cash", "2.0");
            PaymentScreen.check.remainingIs("0.0");
            PaymentScreen.check.changeIs("1.0");
            PaymentScreen.check.validateButtonIsHighlighted(true);
            PaymentScreen.do.clickValidate();
            ErrorPopup.check.isShown();
            ErrorPopup.do.clickConfirm();
            PaymentScreen.do.clickPaymentline("Online payment", "47.0");
            PaymentScreen.do.clickPaymentlineDelButton("Online payment", "47.0");
            PaymentScreen.do.clickPaymentMethod("Online payment");
            PaymentScreen.check.selectedPaymentlineHas("Online payment", "46.0");
            PaymentScreen.do.clickPaymentMethod("Online payment");
            PaymentScreen.check.selectedPaymentlineHas("Online payment", "0.0");
            PaymentScreen.check.remainingIs("0.0");
            PaymentScreen.check.changeIs("0.0");
            PaymentScreen.check.validateButtonIsHighlighted(true);
            PaymentScreen.do.clickValidate();
            ErrorPopup.check.isShown();
            ErrorPopup.do.clickConfirm();
            PaymentScreen.do.clickPaymentline("Online payment", "0.0");
            PaymentScreen.do.clickPaymentlineDelButton("Online payment", "0.0");
            PaymentScreen.do.clickPaymentline("Cash", "2.0");
            PaymentScreen.do.enterPaymentLineAmount("Cash", "3");
            PaymentScreen.check.selectedPaymentlineHas("Cash", "3.0");
            PaymentScreen.do.clickPaymentMethod("Online payment");
            PaymentScreen.check.selectedPaymentlineHas("Online payment", "-1.0");
            PaymentScreen.check.remainingIs("0.0");
            PaymentScreen.check.changeIs("0.0");
            PaymentScreen.check.validateButtonIsHighlighted(true);
            PaymentScreen.do.clickValidate();
            ErrorPopup.check.isShown();
            ErrorPopup.do.clickConfirm();

            return getSteps();
        } 
    });

registry
    .category("web_tour.tours")
    .add("OnlinePaymentServerFakePaymentTour", { 
        test: true, 
        url: "/pos/ui", 
        steps: () => {
            
            startSteps();
            
            ProductScreen.do.confirmOpeningPopup();
            ProductScreen.exec.addOrderline("Letter Tray", "10");
            ProductScreen.check.selectedOrderlineHas("Letter Tray", "10.0");
            ProductScreen.do.clickPayButton();
            PaymentScreen.check.totalIs("48.0");
            PaymentScreen.check.emptyPaymentlines("48.0");
            
            PaymentScreen.do.clickPaymentMethod("Online payment");
            PaymentScreen.do.enterPaymentLineAmount("Online payment", "48");
            PaymentScreen.check.selectedPaymentlineHas("Online payment", "48.0");
            PaymentScreen.check.remainingIs("0.0");
            PaymentScreen.check.changeIs("0.0");
            PaymentScreen.check.validateButtonIsHighlighted(true);
            PaymentScreen.do.clickValidate();
            OnlinePaymentPopup.check.isShown();
            OnlinePaymentPopup.check.amountIs("48.0");
            OnlinePaymentPopup.check.waitForOnlinePayment();
            OnlinePaymentPopup.check.isNotShown();
            ReceiptScreen.check.isShown();
            ReceiptScreen.check.receiptIsThere();
            Chrome.do.closeSession();
            return getSteps(); 
        } 
    });

return __exports;
});
;

/**********************************************************************************************
*  Filepath: /pos_online_payment/static/tests/tours/helpers/OnlinePaymentPopupTourMethods.js  *
*  Lines: 118                                                                                 *
**********************************************************************************************/
odoo.define('@pos_online_payment/../tests/tours/helpers/OnlinePaymentPopupTourMethods', ['@point_of_sale/../tests/tours/helpers/utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { createTourMethods } = require("@point_of_sale/../tests/tours/helpers/utils");

class Do {
    clickCancel() {
        return [
            {
                content: "click cancel button",
                trigger: ".online-payment-popup .footer .cancel",
            },
        ];
    }

    fakeOnlinePaymentPaidData() {
        return [
            {
                content: "fake online payment paid data",
                trigger: ".online-payment-popup",
                run: () => {
                    const currentOrder = odoo.__WOWL_DEBUG__.root.env.services.pos.get_order();

                    const fakePaidOrder = currentOrder.export_as_JSON();
                    fakePaidOrder.id = currentOrder.server_id;

                    currentOrder.process_online_payments_data_from_server({
                        "id": currentOrder.server_id,
                        "paid_order": fakePaidOrder,
                    });
                },
            },
        ];
    }
}

class Check {
    isShown() {
        return [
            {
                content: "online payment popup is shown",
                trigger: ".modal-dialog .online-payment-popup",
                isCheck: true,
            },
        ];
    }

    isNotShown() {
        return [
            {
                content: "online payment popup is not shown",
                trigger: "body:not(:has(.online-payment-popup))",
                isCheck: true,
            },
        ];
    }

    /**
     * Check if the displayed amount to pay is the provided amount.
     * @param {String} amount
     */
    amountIs(amount) {
        return [
            {
                content: `displayed amount is ${amount}`,
                trigger: `.online-payment-popup .body .info .amount:contains("${amount}")`,
                isCheck: true,
            },
        ];
    }

    /**
     * Used to replace the POS bus web socket communication that doesn't seem to work when executing a test tour.
     * The server is regularly checked to see if the fake online payment has been done.
     *
     * @param {integer} checksAmount
     * @param {integer} delayBetweenChecks
     * @returns
     */
    waitForOnlinePayment(checksAmount = 10, delayBetweenChecks = 3000) {
        const waitingStep = this.isNotShown()[0];
        waitingStep.content = "wait for online payment";
        waitingStep.timeout = checksAmount * delayBetweenChecks + 3000;
        return [
            {
                content: "start checks for online payment",
                trigger: ".online-payment-popup",
                run: () => {
                    let checkIndex = 0;
                    const checkFunc = async () => {
                        const currentOrder = odoo.__WOWL_DEBUG__.root.env.services.pos.get_order();
                        let opData;
                        if (currentOrder) {
                            opData = await currentOrder.update_online_payments_data_with_server(odoo.__WOWL_DEBUG__.root.env.services.orm, false);
                        }
                        const isMaxChecksReached = checkIndex >= checksAmount - 1;
                        const isOrderPaid = opData && opData.is_paid;
                        if (!isOrderPaid && !isMaxChecksReached) {
                            checkIndex++;
                            setTimeout(checkFunc, delayBetweenChecks);
                        }
                    };
                    setTimeout(checkFunc, delayBetweenChecks);
                },
            },
            waitingStep,
        ];
    }
}

// FIXME: this is a horrible hack to export an object as named exports.
// eslint-disable-next-line no-undef
Object.assign(__exports, createTourMethods("OnlinePaymentPopup", Do, Check));

return __exports;
});
;

/**************************************************************************
*  Filepath: /saas_trial/static/tests/tours/tour_plan_change_warnings.js  *
*  Lines: 358                                                             *
**************************************************************************/
odoo.define('odoo.test.trial.tours.plan.change.warnings', ['web_tour.tour'], function (require) {
"use strict";

var tour = require("web_tour.tour");

function checkPricingChangeWarningShown(options) {
    let modalTitle = (options || {}).modal_title || "You are about to modify your pricing plan";
    return {
        content: "Check that a warning about plan change is shown",
        trigger: ".modal-header:contains(" + modalTitle + ")",
        extra_trigger: ".modal-header:contains(" + modalTitle + ")",
        run: function() {}, // this is a check
        isCheck: true,
        variant: (options || {}).variant,
        warning_step: true,
    };
}

function confirmPricingChange(options) {
    let btnText = (options || {}).button || "Confirm";
    return {
        content: "Click on Confirm",
        trigger: ".modal-footer .btn-primary:contains(" + btnText + ")",
        variant: (options || {}).variant,
        warning_step: true,
    };
}

/* ----------------------------------------------------------------------
 * Test Studio promote dialog warning
 */

var tourPromoteStudioInstallWarnSteps = [
    {
        content: "Open 'Apps' app",
        trigger: '.o_app[data-menu-xmlid="base.menu_management"]',
    },
    {
        content: "Switch to List view",
        trigger: '.o_switch_view.o_list',
    },
    {
        content: "Open optional fields dropdown",
        trigger: '.o_list_view .o_optional_columns_dropdown_toggle, ' +
                 '.o_list_view .o_optional_columns_dropdown .dropdown-toggle',
    },
    {
        content: "Click on 'Add Custom field'",
        trigger: '.o_list_view .o_optional_columns_dropdown.dropdown-menu .dropdown-item-studio, ' +
                 '.o_list_view .o_optional_columns_dropdown .dropdown-menu .dropdown-item-studio',
    },
    {
        content: "Click on 'Install Odoo Studio'",
        trigger: "button.o_install_studio",
    },
    checkPricingChangeWarningShown(),
    confirmPricingChange(),
    {
        content: "Check that page reloads and we're still on the list view",
        trigger: ".o_list_view",
    }
];

tour.register('trial_user_install_studio_warning', {test: true},
    tourPromoteStudioInstallWarnSteps,
);
tour.register('trial_user_install_studio_no_warning', {test: true},
    tourPromoteStudioInstallWarnSteps.filter(step => !step.warning_step),
);

/* ----------------------------------------------------------------------
 * Test User invitation warning from Settings dashboard
 */

var tourInviteUserFromSettingDashboardSteps = [
    {
        content: "Open 'Settings' app",
        trigger: '.o_app[data-menu-xmlid="base.menu_administration"]',
    },
    {
        content: "Fill new users to invite",
        trigger: "input.o_user_emails",
        run: "text user1@example.net,user2@example.net"
    },
    {
        content: "Click on 'Invite'",
        trigger: ".o_web_settings_dashboard_invite, .o_web_settings_invite",
    },
    checkPricingChangeWarningShown({modal_title: "Users Invitation"}),
    confirmPricingChange({button: "Invite User(s)"}),
    {
        content: "Check that page reloads and we're still on settings dahsboard",
        trigger: ".o_web_settings_dashboard, .oe_form_configuration",
        run: function() {}, // this is a check
        isCheck: true,
    }
];

tour.register('trial_user_invite_from_setting_dashboard_warning', {test: true},
    tourInviteUserFromSettingDashboardSteps,
);
tour.register('trial_user_invite_from_setting_dashboard_no_warning', {test: true},
    tourInviteUserFromSettingDashboardSteps.filter(step => !step.warning_step),
);


/* ----------------------------------------------------------------------
 * Test Module installation warning from General Settings
 */

var tourSettingsInstallModuleSteps = [
    {
        content: "Open 'Settings' app",
        trigger: '.o_app[data-menu-xmlid="base.menu_administration"]',
    },
    {
        content: "Open 'General Settings' menu",
        trigger: ".o_web_settings_dashboard, " +
                 ".oe_form_configuration.o_base_settings, " +
                 ".oe_form_configuration.o_base_settings_view",
        run: function (actions) {
            if ($('.o_web_settings_dashboard').length) {
                // in v12.0 the "Settings" app open by default the custom dashboard
                // which is not yet merged with the "General Settings", so we need
                // to open that menu
                actions.click('a[data-menu-xmlid="base_setup.menu_config"]');
            }
        }
    },
    {
        content: "Wait for 'General Settings' to be displayed",
        trigger: ".oe_form_configuration.o_base_settings, " +
                 ".oe_form_configuration.o_base_settings_view",
        run: function() {}, // this is a check
        isCheck: true,
    },
    {
        content: "Enable OAuth module",
        trigger: 'label[for*="module_auth_oauth"], #module_auth_oauth label.o_form_label',
    },
    // < 16.0: warning should be displayed right after clicking on the settings
    checkPricingChangeWarningShown({variant: 'onChange'}),
    confirmPricingChange({variant: 'onChange', button: 'I get it'}),
    {
        content: "Click on 'Save'",
        trigger: ".o_form_button_save, button.btn-primary[type=button][name=execute]",
    },
    // >= 16.0: warning should be displayed only when saving the settings
    checkPricingChangeWarningShown({variant: 'onSave'}),
    confirmPricingChange({variant: 'onSave'}),
    {
        content: "Wait for the save to complete",
        trigger: ".o_form_button_save:not(:disabled), button.btn-primary[type=button][name=execute]:not(:disabled)",
        run: function() {}, // this is a check
        isCheck: true,
    },
];

tour.register('trial_settings_install_module_on_change_warning', {test: true},
    tourSettingsInstallModuleSteps.filter(step => (step.variant || 'onChange') == 'onChange'),
);
tour.register('trial_settings_install_module_on_change_no_warning', {test: true},
    tourSettingsInstallModuleSteps.filter(step => (step.variant || 'onChange') == 'onChange' && !step.warning_step),
);
tour.register('trial_settings_install_module_on_save_warning', {test: true},
    tourSettingsInstallModuleSteps.filter(step => (step.variant || 'onSave') == 'onSave'),
);
tour.register('trial_settings_install_module_on_save_no_warning', {test: true},
    tourSettingsInstallModuleSteps.filter(step => (step.variant || 'onSave') == 'onSave' && !step.warning_step),
);

/* ----------------------------------------------------------------------
 * Test Module installation warning from Apps
 */

var tourAppsModuleInstallSteps = [
    {
        content: "Open 'Apps' app",
        trigger: '.o_app[data-menu-xmlid="base.menu_management"]',
    },
    // For kanban
    {
        content: "Click on 'Install' button",
        trigger: '.o_kanban_record .button_immediate_install',
        variant: 'view_kanban',
    },
    // For form
    {
        content: "Open app record dropdown",
        trigger: '.o_kanban_record:has(.button_immediate_install):first .dropdown-toggle',
        variant: 'view_form',
    },
    {
        content: "Open app 'Module info'",
        trigger: ".o_kanban_record:has(.button_immediate_install):first .oe_kanban_action_a",
        variant: 'view_form',
    },
    {
        content: "Click on 'Install' button",
        trigger: '.o_form_view .button_immediate_install',
        variant: 'view_form',
    },
    checkPricingChangeWarningShown(),
    confirmPricingChange(),
    {
        content: "Wait for completion",
        // saas_trial custom. will force button text to "Installed" after
        // button_immediate_install() returns, wait for it
        trigger: "body:not(.o_ui_blocked) .button_immediate_install:contains(Installed)",
        run: function() {}, // this is a check
        isCheck: true,
    }
];

tour.register('trial_apps_install_module_kanban_warning', {test: true},
    tourAppsModuleInstallSteps.filter(step => (step.variant || 'view_kanban') == 'view_kanban'),
);
tour.register('trial_apps_install_module_kanban_no_warning', {test: true},
    tourAppsModuleInstallSteps.filter(step => (step.variant || 'view_kanban') == 'view_kanban' && !step.warning_step),
);
tour.register('trial_apps_install_module_form_warning', {test: true},
    tourAppsModuleInstallSteps.filter(step => (step.variant || 'view_form') == 'view_form'),
);
tour.register('trial_apps_install_module_form_no_warning', {test: true},
    tourAppsModuleInstallSteps.filter(step => (step.variant || 'view_form') == 'view_form' && !step.warning_step),
);

/* ----------------------------------------------------------------------
 * Test Company creation warning
 */

var tourCompanyCreationSteps = [
    {
        content: "Open 'Settings' app",
        trigger: '.o_app[data-menu-xmlid="base.menu_administration"]',
    },
    {
        content: "Click on 'Users & Companies' menu",
        trigger: '.dropdown-toggle[data-menu-xmlid="base.menu_users"]',
    },
    {
        content: "Click on 'Companies' menu",
        trigger: '.dropdown-item[data-menu-xmlid="base.menu_action_res_company_form"]',
    },
    {
        content: "Click on 'Create' button",
        trigger: '.o_list_button_add',
    },
    {
        content: "Fill company name",
        trigger: 'div[name="name"] input',
        run: function (actions) {
            let companyName = "MyNewCompany-" + Date.now();
            if (actions.text_blur) {
                actions.text_blur(companyName);
            } else {  // version <= saas~13.1
                actions.text(companyName);
                this.$anchor.trigger('focusout');
                this.$anchor.trigger('blur');
            }
        }
    },
    {
        content: "Click on 'Save' button",
        trigger: '.o_form_button_save',
        run: function (actions) {
            if (!window.localStorage.getItem("running_tour")) {
                // >= saas~16.3: ensure "running_tour" is set in local storage
                // to avoid the page being reloaded once the company is created
                window.localStorage.setItem("running_tour", "_dummy_to_skip_page_reload_");
            }
            actions.click();
        }
    },
    checkPricingChangeWarningShown(),
    confirmPricingChange(),
    {
        content: "Wait for record save to complete",
        trigger: '.o_form_saved, .o_form_button_edit',
        run: function() {}, // this is a check
        isCheck: true,
    }
];

tour.register('trial_company_creation_warning', {test: true},
    tourCompanyCreationSteps,
);
tour.register('trial_company_creation_no_warning', {test: true},
    tourCompanyCreationSteps.filter(step => !step.warning_step),
);

/* ----------------------------------------------------------------------
 * Test Module installation warning from Helpdesk Team
 */

var tourHelpdeskTeamModuleOptionSteps = [
    {
        content: "Open 'Helpdesk' app",
        trigger: '.o_app[data-menu-xmlid="helpdesk.menu_helpdesk_root"]',
    },
    {
        content: "Open 'Configuration' menu",
        trigger: '.dropdown-toggle[data-menu-xmlid="helpdesk.helpdesk_menu_config"]',
    },
    {
        content: "Open 'Helpdesk Team' menu",
        trigger: '.dropdown-item[data-menu-xmlid="helpdesk.helpdesk_team_menu"]',
    },
    {
        content: "Click on 'Create' button",
        trigger: '.o_list_button_add',
    },
    {
        content: "Fill Helpdesk Team's name",
        trigger: 'div[name=name] textarea, input#name, input[name=name]',
        run: function (actions) {
            // append epoch to ensure team name is unique
            // (required to avoid duplicated mail.alias error   )
            actions.text("warning_team" + "_" + Date.now());
        },
    },
    {
        content: "Enable 'eLearning' option (website_helpdesk_slides)",
        trigger: 'label[for=use_website_helpdesk_slides], div[name=use_website_helpdesk_slides] input',
        run: 'click',
    },
    // < 16.0: warning should be displayed right after clicking on the settings
    checkPricingChangeWarningShown({variant: 'onChange'}),
    confirmPricingChange({variant: 'onChange', button: 'I get it'}),
    {
        content: "Click on 'Save'",
        trigger: ".o_form_button_save",
    },
    // >= 16.0: warning should be displayed only when saving the settings
    checkPricingChangeWarningShown({variant: 'onSave'}),
    confirmPricingChange({variant: 'onSave'}),
    {
        content: "Wait for the save to complete",
        trigger: ".o_form_button_save:not(:disabled), .o_form_button_edit",
        run: function() {}, // this is a check
        isCheck: true,
    },
];

tour.register('trial_helpdesk_team_install_module_on_change_warning', {test: true},
    tourHelpdeskTeamModuleOptionSteps.filter(step => (step.variant || 'onChange') == 'onChange'),
);
tour.register('trial_helpdesk_team_install_module_on_change_no_warning', {test: true},
    tourHelpdeskTeamModuleOptionSteps.filter(step => (step.variant || 'onChange') == 'onChange' && !step.warning_step),
);
tour.register('trial_helpdesk_team_install_module_on_save_warning', {test: true},
    tourHelpdeskTeamModuleOptionSteps.filter(step => (step.variant || 'onSave') == 'onSave'),
);
tour.register('trial_helpdesk_team_install_module_on_save_no_warning', {test: true},
    tourHelpdeskTeamModuleOptionSteps.filter(step => (step.variant || 'onSave') == 'onSave' && !step.warning_step),
);

});
;

/************************************************************
*  Filepath: /saas_trial/static/tests/tours/tour_trials.js  *
*  Lines: 102                                               *
************************************************************/
odoo.define('odoo.test.trial.tours', ['web_tour.tour'], function (require) {
"use strict";

var tour = require("web_tour.tour");

tour.register('trial_resend_activation_email_backend', {url: '/web', test: true}, [
    {
        content: "Click on navbar Pending Activation button",
        trigger: ".o_main_navbar .oe_expiration_tag a",
    },
    {
        content: "Fill the modal",
        trigger: 'input[name=email]',
        run: 'text customer@example.net',
    },
    {
        content: "Click on modal resend button",
        trigger: 'input[type=submit], button:contains(Resend)',
    },
    {
        content: "Check that email was successfully sent.",
        trigger: '*:contains(An activation email has been successfully sent)',
        run: function () { }, // this is a check
    }
]);

tour.register('trial_rr_upgrade_available_user', {url: '/web', test: true}, [
    // Employee should see that an upgrade is available (in the statusbar) but should see any upgrade button
    {
        content: "Click on the upgrade navbar button",
        trigger: ".o_main_navbar .o_rr_widget a",
    },
    {
        content: "Check that there is no button",
        trigger: ".o_main_navbar .o_rr_widget .rr-widget-dropdown",
        run: function () {
            var $btns = this.$anchor.find('a.btn:visible, button:visible');
            if ($btns.length !== 0) {
                console.error('User should not see any upgrade button (' + $btns.length + ' found)');
            }
        }
    },
    {
        content: "Check that user should ask their admin for upgrade",
        trigger: ".o_main_navbar .o_rr_widget .rr_users_only:contains(Contact the administrator)",
        run: function () {} // this is a check
    },
]);


tour.register('trial_rr_upgrade_available_admin', {url: '/web', test: true}, [
    // Admin see that there is a new upgrade availabe, open upgrade and cancel it (not sure as he has not tested yet)
    {
        content: "Click on the upgrade navbar button",
        trigger: ".o_main_navbar .o_rr_widget a",
    },
    {
        content: "Click on Upgrade Now",
        trigger: 'button.o_prod_upgrade',
    },
    {
        content: "Hum, not sure yet, click on Cancel",
        trigger: '.o_prod_upgrade_cancel',
    },
    // Admin has now propertly tested the upgrade (don't they?) and start real production upgrade
    {
        content: "Click on the upgrade navbar button",
        trigger: ".o_main_navbar .o_rr_widget a",
    },
    {
        content: "Click on 'Upgrade Now'",
        trigger: 'button.o_prod_upgrade',
    },
    {
        content: "Click on 'Confirm Upgrade'",
        trigger: '.o_prod_upgrade_confirm',
    },
    {
        content: "Check that upgrade has been queued",
        trigger: '.modal-body:contains(Production upgrade requested successfully)',
    },
]);

tour.register('trial_rr_upgrade_dismiss', {url: '/web', test: true}, [
    // Admin see that there is a new upgrade available, open upgrade but dismiss it
    // (he want to stay on LTS version-for now)
    {
        content: "Click on the upgrade navbar button",
        trigger: ".o_main_navbar .o_rr_widget a",
    },
    {
        content: "Click on 'Upgrade Later'",
        trigger: "button.o_prod_dismiss",
    },
    {
        // dummy check only to ensure dismiss RPC are completed
        trigger: ".o_main_navbar",
        run: function () {},
    },
]);

});
;

/****************************************************************************
*  Filepath: /saas_website/static/tests/tours/tour_website_configurator.js  *
*  Lines: 90                                                                *
****************************************************************************/
odoo.define('@saas_website/../tests/tours/tour_website_configurator', ['web_tour.tour'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const tour = require('web_tour.tour');

const unselectAllFeatures = function() {
    return {
        content: "Unselect all features",
        trigger: ".page_feature_selection.o_configurator_show",
        run: function () {
            this.$anchor.find(".o_configurator_feature_status.fa-check-circle").click();
        }
    };
};

const selectionFeature = function(name) {
    return {
        content: "Selecting feature: " + name,
        trigger: ".card .card-title:contains(" + name + ")",
    };
};

tour.register('trial_website_configurator', {url: "/website/configurator", test: true}, [
    // Configurator first screen
    {
        content: "click next",
        trigger: 'button.o_configurator_show',
    },
    // Description screen
    {
        content: "select a website type",
        trigger: 'a.o_change_website_type',
    }, {
        content: "insert a website industry",
        trigger: '.o_configurator_industry input',
        run: 'text ab',
    }, {
        content: "select a website industry from the autocomplete",
        trigger: '.o_configurator_industry_wrapper ul li a:contains("abbey")',
    }, {
        content: "select an objective",
        trigger: '.o_configurator_purpose_dd a',
    }, {
        content: "choose from the objective list",
        trigger: 'a.o_change_website_purpose',
    },
    // Palette screen
    {
        content: "chose a palette card",
        trigger: '.palette_card',
    },
    // Features screen
    {
        content: "Check that we're on Free Plan by default",
        trigger: "p:contains(Free Plan)",
        run: function () {}, // this is check
    },
    // - check for app that force out of 1-app-free mode (to trial mode)
    unselectAllFeatures(),
    selectionFeature("Appointment"),
    {
        content: "Check that Appointment force to Standard Plan (trial mode)",
        trigger: "p:contains(Standard Plan (15 days trial))",
        run: function () {}, // this is a check
    },
    // - check for single free app
    unselectAllFeatures(),
    selectionFeature("Shop"),
    {
        content: "Check that selecting only Shop keep in 1-app-free mode",
        trigger: "p:contains(Free Plan)",
        run: function () {}, // this is a check
    },
    selectionFeature("Events"),
    {
        content: "Check that selecting both Shop and Events force to Standard Plan (trial mode)",
        trigger: "p:contains(Standard Plan (15 days trial))",
        run: function () {}, // this is a check
    },
    // Exit configurator
    {
        content: "Skip configurator",
        trigger: "button:contains(Skip and start from scratch)",
    },
]);

return __exports;
});
;

/************************************************************************
*  Filepath: /sale_timesheet/static/tests/tours/sale_timesheet_tour.js  *
*  Lines: 318                                                           *
************************************************************************/
odoo.define('@sale_timesheet/../tests/tours/sale_timesheet_tour', ['web.utils', '@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const {Markup} = require("web.utils");
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('sale_timesheet_tour', {
    test: true,
    url: '/web',
    steps: () => [...stepUtils.goToAppSteps("sale.sale_menu_root", 'Go to the Sales App'),
{
    trigger: 'button.o_list_button_add',
    content: 'Click on CREATE button to create a quotation with service products.',
}, {
    trigger: 'div[name="partner_id"] input',
    content: 'Add the customer for this quotation (e.g. Brandon Freeman)',
    run: 'text Brandon Freeman',
}, {
    trigger: 'div[name="partner_id"] ul > li:first-child > a:contains(Freeman)',
    content: 'Select the first item on the autocomplete dropdown',
},
{
    trigger: 'td.o_field_x2many_list_row_add > a:first-child',
    content: 'Click on "Add a product" to add a new product. We will add a service product.',
}, {
    trigger: '.o_field_html[name="product_id"], .o_field_widget[name="product_template_id"] input',
    content: Markup('Select a prepaid service product <i>(e.g. Service Product (Prepaid Hours))</i>'),
    run: 'text Service Product (Prepaid Hours)',
}, {
    trigger: 'ul.ui-autocomplete a:contains(Service Product (Prepaid Hours))',
    content: 'Select the prepaid service product in the autocomplete dropdown',
}, {
    trigger: 'div[name="product_uom_qty"] input',
    content: "Add 10 hours as ordered quantity for this product.",
    run: 'text 10',
}, {
    trigger: '.o_field_widget[name=price_subtotal]:contains(2,500.00)',
    run() {},
}, {
    trigger: 'div[name="name"] textarea:propValueContains(Service Product)',
    run: () => {}
}, {
    trigger: 'button[name="action_confirm"]',
    content: 'Click on Confirm button to create a sale order with this quotation.',
}, {
    content: 'Wait for the confirmation to finish. State should be "Sales Order"',
    trigger: '.o_field_widget[name=state] .o_arrow_button_current:contains("Sales Order")',
    isCheck: true,
}, stepUtils.toggleHomeMenu(),
...stepUtils.goToAppSteps("project.menu_main_pm", 'Go to the Project app.'),
{
    trigger: 'button.o-kanban-button-new',
    content: 'Add a new project.',
}, {
    trigger: '.o_field_widget.o_project_name input',
    content: 'Select your project name (e.g. Project for Freeman)',
    run: 'text Project for Freeman',
}, {
    trigger: 'div[name="allow_billable"] input',
    run: 'click',
}, {
    trigger: 'button[name="action_view_tasks"]',
    content: 'Click on Create button to create and enter to this newest project.',
}, {
    trigger: 'div.o_kanban_header > div:first-child input',
    content: 'Select a name of your kanban column (e.g. To Do)',
    run: 'text To Do',
}, {
    trigger: 'button.o_kanban_add',
    content: 'Click on Add button to create the column.',
}, {
    trigger: 'button.o-kanban-button-new',
    content: 'Click on Create button to create a task into your project.',
}, {
    trigger: 'div[name="display_name"] > input',
    content: 'Select the name of the task (e.g. Onboarding)',
    run: 'text Onboarding',
}, {
    trigger: 'button.o_kanban_edit',
    content: 'Click on Edit button to enter to the form view of the task.',
    position: 'bottom',
}, {
    trigger: 'div[name="partner_id"] input',
    content: Markup('Select the customer of your Sales Order <i>(e.g. Brandon Freeman)</i>. Since we have a Sales Order for this customer with a prepaid service product which the remaining hours to deliver is greater than 0, the Sales Order Item in the task should be contain the Sales Order Item containing this prepaid service product.'),
    run: 'text Brandon Freeman',
}, {
    trigger: 'div[name="partner_id"] ul > li:first-child > a:contains(Freeman)',
    content: 'Select the customer in the autocomplete dropdown.',
}, {
    trigger: 'a.nav-link:contains(Timesheets)',
    extra_trigger: 'div.o_notebook_headers',
    content: 'Click on Timesheets page to log a timesheet',
}, {
    trigger: 'div[name="timesheet_ids"] td.o_field_x2many_list_row_add a[role="button"]',
    content: 'Click on Add a line to create a new timesheet into the task.',
}, {
    trigger: 'div[name="unit_amount"] input',
    content: 'Enter one hour for this timesheet',
    run: 'text 1',
}, {
    trigger: 'i.o_optional_columns_dropdown_toggle',
    content: 'The so_line field should be hidden by default. We check if it is the case by adding this field in the timesheet list view',
}, {
    trigger: 'input[name="so_line"]',
    content: 'Check the so_line field to display the column on the list view.',
    run: function (actions) {
        if (!this.$anchor.prop('checked')) {
            actions.click(this.$anchor);
        }
    },
}, {
    trigger: 'button[name="action_view_so"]',
    content: 'Click on this stat button to see the SO linked to the SOL of the task.',
}, {
    trigger: 'div[name="order_line"]',
    content: 'Check if the quantity delivered is equal to 1 hour.',
    run: function () {
        const $header = this.$anchor.find('thead > tr');
        if (!$header || $header.length === 0)
            console.error('No Sales Order Item is found in the Sales Order.');
        const tr = $header[0];
        let index = -1;
        for (let i = 0; i < tr.children.length; i++) {
            const th = tr.children.item(i);
            if (th.dataset && th.dataset.name === 'qty_delivered')
                index = i;
        }
        const qtyDelivered = this.$anchor.find(`tbody > tr:first-child > td.o_data_cell:eq(${index})`).text();
        if (qtyDelivered !== "1.00")
            console.error('The quantity delivered on this Sales Order Item should be equal to 1.00 hour. qtyDelivered = ' + qtyDelivered);
    },
}, {
    trigger: 'button[data-menu-xmlid="project.menu_project_config"]',
    content: 'Click on the Configuration menu.',
}, {
    trigger: '.dropdown-item[data-menu-xmlid="project.menu_projects_config"]',
    content: 'Select Configuration > Projects.',
}, {
    trigger: 'button.o_list_button_add',
    content: 'Click on Create button to create a new project and see the different configuration available for the project.',
}, {
    trigger: 'a.nav-link[name="settings"]',
    extra_trigger: 'div.o_notebook_headers',
    content: 'Click on Settings page to check the allow_billable checkbox',
}, {
    trigger: 'div[name="allow_billable"] input',
    content: 'Check the allow_billable',
    run: function (actions) {
        if (!this.$anchor.prop('checked')) {
            actions.click(this.$anchor);
        }
    }
}, {
    trigger: 'div[name="partner_id"] input',
    content: Markup('Add the customer for this project to select an SO and SOL for this customer <i>(e.g. Brandon Freeman)</i>.'),
    run: 'text Brandon Freeman',
}, {
    trigger: 'div[name="partner_id"] ul > li:first-child > a:contains(Freeman)',
    content: 'Select the customer in the autocomplete dropdown',
}, {
    trigger: 'div[name="sale_line_id"] input',
    content: 'Select a Sales Order Item as Default Sales Order Item for each task in this project.',
    run: 'text S',
}, {
    trigger: '[name="sale_line_id"] ul.ui-autocomplete > li:first-child > a:not(:has(i.fa))',
    content: 'Select the Sales Order Item in the autocomplete dropdown.',
}, {
    trigger: 'a.nav-link[name="billing_employee_rate"]',
    extra_trigger: 'div.o_notebook_headers',
    content: 'Click on Invoicing tab to configure the invoicing of this project.',
}, {
    trigger: 'div[name="sale_line_employee_ids"] td.o_field_x2many_list_row_add > a[role="button"]',
    content: 'Click on Add a line on the mapping list view.',
}, {
    trigger: 'div[name="sale_line_employee_ids"] div[name="employee_id"] input',
    content: 'Select an employee to link a Sales Order Item on his timesheets into this project.',
    run: 'click',
}, {
    trigger: '[name="employee_id"] ul.ui-autocomplete > li:first-child > a:not(:has(i.fa))',
    content: 'Select the first employee in the autocomplete dropdown',
}, {
    trigger: 'div[name="sale_line_employee_ids"] div[name="sale_line_id"] input',
    content: 'Select the Sales Order Item to link to the timesheets of this employee.',
    position: 'bottom',
    run: 'text S',
}, {
    trigger: '[name=sale_line_id] ul.ui-autocomplete > li:first-child > a:not(:has(i.fa))',
    content: 'Select the first Sales Order Item in the autocomplete dropdown.',
}, {
    trigger: 'h1 > div[name="name"] > div > textarea',
    content: 'Set Project name',
    run: 'text Project with employee mapping',
}, {
    trigger: '[data-menu-xmlid="project.menu_projects"]',
    content: 'Select Project main menu',
}, {
    trigger: '.o_kanban_record:contains("Project for Freeman") .o_dropdown_kanban .dropdown-toggle',
    content: 'Open the project dropdown',
}, {
    trigger: '.o_kanban_record:contains("Project for Freeman") .dropdown-menu a:contains("Settings")',
    content: 'Start editing the project',
    // timer: 300,
}, {
    trigger: 'div[name="partner_id"] input',
    content: Markup('Add the customer for this project to select an SO and SOL for this customer <i>(e.g. Brandon Freeman)</i>.'),
    run: 'text Brandon Freeman',
}, {
    trigger: 'div[name="partner_id"] ul > li:first-child > a:contains(Freeman)',
    content: 'Select the customer in the autocomplete dropdown',
}, {
    trigger: 'a.nav-link[name="settings"]',
    extra_trigger: 'div.o_notebook_headers',
    content: 'Click on Settings tab to configure this project.',
}, {
    trigger: 'div[name="sale_line_id"] input',
    content: 'Select the first sale order of the list',
    run: 'text Prepaid',
}, {
    trigger: 'ul.ui-autocomplete > li:first-child > a:not(:has(i.fa))',
    content: 'Select the first item on the autocomplete dropdown',
}, {
    trigger: '.o_back_button',
    content: 'Go back to the kanban view the project created',
}, {
    trigger: '.oe_kanban_global_click :contains("Project for Freeman")',
    content: 'Open the project',
}, {
    trigger: ".o_project_updates_breadcrumb",
    content: 'Open Updates',
}, {
    trigger: ".o_rightpanel_section[name='sales'] .o_rightpanel_title:contains('Sales')",
    content: 'Check the user sees Sales section',
    isCheck: true,
}, {
    trigger: ".o_rightpanel_section[name='sales'] .o_rightpanel_data:contains('Prepaid Hours')",
    content: 'Check the user sees a line in the Sales section',
    // timer: 300,
    isCheck: true,
}, {
    trigger: ".o_rightpanel_section .o-form-buttonbox .o_stat_text:contains('Sales Orders')",
    content: 'Check the user sees Sales Orders Stat Button',
    isCheck: true,
}, {
    trigger: ".o_rightpanel_section[name='profitability'] .o_rightpanel_title:contains('Profitability')",
    content: 'Check the user sees Profitability section',
    isCheck: true,
}, {
    trigger: ".o_rightpanel_section[name='profitability'] .o_rightpanel_data > .o_rightpanel_subsection:eq(0) > table > thead > tr > th:eq(0):contains('Revenues')",
    content: 'Check the user sees Profitability subsection row',
    isCheck: true,
}, {
    trigger: ".o_rightpanel_section[name='profitability'] .o_rightpanel_data > .o_rightpanel_subsection:eq(1) > table > thead > tr > th:eq(0):contains('Costs')",
    content: 'Check the user sees Profitability subsection row',
    isCheck: true,
}, {
    trigger: ".o_rightpanel_section[name='profitability'] .o_rightpanel_data > .o_rightpanel_subsection:eq(2) > table > thead > tr > th:eq(0):contains('Margin')",
    content: 'Check the user sees Profitability subsection row',
    isCheck: true,
}, {
    trigger: ".o_rightpanel_section[name='milestones'] .o_rightpanel_title:contains('Milestones')",
    content: 'Check the user sees Milestones section',
}, {
    trigger: ".o_add_milestone a",
    content: "Add a first milestone",
}, {
    trigger: "div.o_field_widget[name=name] input",
    content: "Edit new Milestone",
    run: 'text New milestone',
}, {
    trigger: "input[data-field=deadline]",
    content: "Edit new Milestone",
    run: 'text 12/12/2099',
}, {
    trigger: ".modal-footer button",
    content: "Save new Milestone",
}, {
    trigger: ".o-kanban-button-new",
    content: "Create new Project Update",
}, {
    trigger: "div.o_field_widget[name=name] input",
    content: "Give a name to Project Update",
    run: 'text New update',
}, {
    trigger: ".o_field_widget[name=description] h3:contains('Sales')",
    content: "Sales title must be in description in description",
    isCheck: true,
    }, {
    trigger: ".o_field_widget[name=description] td:contains('Prepaid Hours')",
    content: "Prepaid Hours title must be in description",
    isCheck: true,
}, {
    trigger: ".o_field_widget[name=description] h3:contains('Profitability')",
    content: "Profitability title must be in description",
    isCheck: true,
}, {
    trigger: ".o_field_widget[name=description] h3:contains('Milestones')",
    content: "Milestones title must be in description",
    isCheck: true,
},
// Those steps are currently needed in order to prevent the following issue:
// "Form views in edition mode are automatically saved when the page is closed, which leads to stray network requests and inconsistencies."
{
    trigger: '.o_back_button',
    content: 'Go back to the kanban view and the project update will be added on that view',
}, {
    trigger: '.o_controller_with_rightpanel',
    content: 'Check the kanban view of project update is rendered to be sure the user leaves the form view and the project update is created',
    run: function() {},
},
stepUtils.toggleHomeMenu(),
...stepUtils.goToAppSteps("project.menu_main_pm", 'Go to the Project app.'),
]});

return __exports;
});
;

/**********************************************************************************************************
*  Filepath: /spreadsheet_dashboard_documents/static/tests/tours/add_document_to_dashboard_group_tour.js  *
*  Lines: 104                                                                                             *
**********************************************************************************************************/
odoo.define('@spreadsheet_dashboard_documents/../tests/tours/add_document_to_dashboard_group_tour', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { TourError } = require("@web_tour/tour_service/tour_utils");

let startingNumberOfSheetsInGroup = 0;

function assertNSheetsInGroup(number) {
    const actualNumber = document.querySelectorAll(".o_list_table tr.o_data_row").length;
    if (actualNumber !== number) {
        throw new TourError(`Expected ${number} sheets in the dashbord group, got ${actualNumber}`);
    }
}

function focusFirstSheetInModal() {
    const sheetImg = document.querySelector("img.o-sp-dialog-item-img");
    sheetImg.dispatchEvent(new MouseEvent("focus"));
}

registry.category("web_tour.tours").add(
    "spreadsheet_dashboard_document_add_document_to_dashboard_group",
    {
        test: true,
        url: "/web",
        steps: () => [
        {
            trigger:
                '.o_app[data-menu-xmlid="spreadsheet_dashboard.spreadsheet_dashboard_menu_root"]',
            content: "Open dashboard app",
            run: "click",
        },
        {
            trigger:
                'button[data-menu-xmlid="spreadsheet_dashboard.spreadsheet_dashboard_menu_configuration"]',
            content: "Open configuration menu",
            run: "click",
        },
        {
            trigger:
                'a[data-menu-xmlid="spreadsheet_dashboard.spreadsheet_dashboard_menu_configuration_dashboards"]',
            content: "Open dashboard configuration menu",
            run: "click",
        },
        {
            trigger: 'tbody tr td[name="name"]',
            content: "Open a dashboard group from list view",
            run: "click",
        },
        {
            trigger: 'button[name="action_add_document_spreadsheet_to_dashboard"]',
            run: () => {
                startingNumberOfSheetsInGroup = document.querySelectorAll(
                    ".o_list_table tr.o_data_row"
                ).length;
            },
        },
        {
            trigger: 'button[name="action_add_document_spreadsheet_to_dashboard"]',
            content: "Open add document to dashboard modal",
            run: "click",
        },
        {
            trigger: "img.o-sp-dialog-item-img",
            content: "Focus a spreadsheet",
            run: focusFirstSheetInModal,
        },
        {
            trigger: "button.btn-primary",
            content: "Click confirm button",
            run: "click",
        },
        {
            trigger: `.o_data_row`,
            content: "A spreadsheet was added as dashboard",
            run: () => assertNSheetsInGroup(startingNumberOfSheetsInGroup + 1),
        },
        {
            trigger: 'button[name="action_add_document_spreadsheet_to_dashboard"]',
            content: "Open add document to dashboard modal",
            run: "click",
        },
        {
            trigger: "img.o-sp-dialog-item-img",
            content: "Focus a spreadsheet",
            run: focusFirstSheetInModal,
        },
        {
            trigger: "img.o-sp-dialog-item-img",
            content: "Double click a spreadsheet",
            run: "dblclick",
        },
        {
            trigger: `.o_data_row`,
            content: "A spreadsheet was added as dashboard",
            run: () => assertNSheetsInGroup(startingNumberOfSheetsInGroup + 2),
        },
    ]
});

return __exports;
});
;

/************************************************************************************
*  Filepath: /website_knowledge/static/tests/tours/knowledge_public_search_tour.js  *
*  Lines: 65                                                                        *
************************************************************************************/
odoo.define('@website_knowledge/../tests/tours/knowledge_public_search_tour', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

/**
 * Public user search Knowledge flow tour (for published articles).
 * Features tested:
 * - Check that tree contains all articles
 * - Write search term in search bar
 * - Check that search tree renders the correct matching articles
 * - Clean search bar
 */

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('knowledge_public_search_tour', {
    test: true,
    steps: () => [{ // Check that section tree contains all articles
    content: "Check that search tree contains 'My Article'",
    trigger: '.o_article_name:contains("My Article")',
    run() {},
}, {
    content: "Unfold 'My Article'", // Unfold because 'My Article' wasn't added to the unfolded articles
    trigger: '.o_article_active .o_article_caret',
}, {
    content: "Check that search tree contains 'Child Article'",
    trigger: '.o_article_name:contains("Child Article")',
    run() {},
}, {
    content: "Check that search tree contains 'Sibling Article'",
    trigger: '.o_article_name:contains("Sibling Article")',
    run() {},
}, { // Write search term in search bar
    content: "Write 'M' in the search bar",
    trigger: '.knowledge_search_bar',
    run: 'text My'
}, {
    content: "Trigger keyup event to start the search",
    trigger: '.knowledge_search_bar',
    run() {
        $('.knowledge_search_bar').trigger($.Event("keyup", { keyCode: 13 }));
    },
}, { // Check tree rendering with matching articles
    content: "Check that search tree contains 'My Article'",
    trigger: '.o_article_name:contains("My Article")',
    run() {},
}, {
    content: "Check that search tree doesn't contain 'Child Article'",
    trigger: '.o_knowledge_tree:not(:has(.o_article_name:contains("Child Article")))',
    run() {},
}, {
    content: "Check that search tree doesn't contain 'Sibling Article'",
    trigger: '.o_knowledge_tree:not(:has(.o_article_name:contains("Sibling Article")))',
    run() {},
}, { // Clean search bar
    content: "Clean search bar",
    trigger: '.knowledge_search_bar',
    run: function (action) {
        action.remove_text("", ".knowledge_search_bar");
    },
}]});

return __exports;
});
;

/****************************************************************************************
*  Filepath: /website_sale_product_configurator/static/tests/tours/website_sale_buy.js  *
*  Lines: 26                                                                            *
****************************************************************************************/
odoo.define('@website_sale_product_configurator/../tests/tours/website_sale_buy', ['@web/core/registry', '@web/core/utils/patch', 'website_sale.tour'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/
/**
 * Add custom steps to handle the optional products modal introduced
 * by the product configurator module.
 */
const { registry } = require("@web/core/registry");
const { patch } = require("@web/core/utils/patch");
require("website_sale.tour");

patch(registry.category("web_tour.tours").get("shop_buy_product"), "patch_shop_buy_product", {
    steps() {
        const originalSteps = this._super();
        const addCartStepIndex = originalSteps.findIndex((step) => step.id === "add_cart_step");
        originalSteps.splice(addCartStepIndex + 1, 1, {
            content: "click in modal on 'Proceed to checkout' button",
            trigger: 'button:contains("Proceed to Checkout")',
        });
        return originalSteps; 
    },
});

return __exports;
});
;

/****************************************************************************************************************
*  Filepath: /website_sale_product_configurator/static/tests/tours/website_sale_preconfigured_variant_price.js  *
*  Lines: 25                                                                                                    *
****************************************************************************************************************/
odoo.define('@website_sale_product_configurator/../tests/tours/website_sale_preconfigured_variant_price', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('website_sale_product_configurator_optional_products_tour', {
    test: true,
    steps: () => [{
    name: 'Click Aluminium Option',
    trigger: 'ul.js_add_cart_variants span:contains("Aluminium")',
    extra_trigger: 'ul.js_add_cart_variants span:contains("Aluminium") ~ span.badge:contains("50.40")',
}, {
    name: 'Add to cart',
    trigger: '#add_to_cart',
}, {
    name: 'Check that modal was opened with the correct variant price',
    trigger: 'main.oe_advanced_configurator_modal',
    extra_trigger: 'main.oe_advanced_configurator_modal span:contains("800.40")',
    run: () => {},
}]});

return __exports;
});
;

/*****************************************************************************************************************
*  Filepath: /website_sale_product_configurator/static/tests/tours/website_sale_shop_custom_attributes_value.js  *
*  Lines: 63                                                                                                     *
*****************************************************************************************************************/
odoo.define('@website_sale_product_configurator/../tests/tours/website_sale_shop_custom_attributes_value', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
var optionVariantImage;

registry.category("web_tour.tours").add("a_shop_custom_attribute_value", {
    url: "/shop?search=Customizable Desk",
    test: true,
    steps: () => [{
        content: "click on Customizable Desk",
        trigger: '.oe_product_cart a:contains("Customizable Desk (TEST)")',
}, {
    trigger: 'a.js_add_cart_json:has(i.fa-plus)',
    run: 'click',
}, {
    trigger: 'span.oe_currency_value:contains(750)',
    run: function (){}, // check
}, {
    id: 'add_cart_step',
    trigger: 'a:contains(ADD TO CART)',
    run: 'click',
}, {
    trigger: '.oe_advanced_configurator_modal .js_product:eq(1) div:contains("Conference Chair (TEST) (Steel)")',
    run: function () {
        optionVariantImage = $('.oe_advanced_configurator_modal .js_product:eq(1) img.variant_image').attr('src');
    }
}, {
    trigger: '.oe_advanced_configurator_modal .js_product:eq(1) input[data-value_name="Aluminium"]',
}, {
    trigger: '.oe_advanced_configurator_modal .js_product:eq(1) div:contains("Conference Chair (TEST) (Aluminium)")',
    run: function () {
        var newVariantImage = $('.oe_advanced_configurator_modal .js_product:eq(1) img.variant_image').attr('src');
        if (newVariantImage !== optionVariantImage) {
            $('<p>').text('image variant option src changed').insertAfter('.oe_advanced_configurator_modal .js_product:eq(1) .product-name');
        }
    }
}, {
    extra_trigger: '.oe_advanced_configurator_modal .js_product:eq(1) div:contains("image variant option src changed")',
    trigger: '.oe_advanced_configurator_modal .js_product:eq(1) input[data-value_name="Steel"]',
}, {
    trigger: '.oe_price span:contains(22.90)',
    run: function (){}, // check
}, {
    trigger: '.oe_advanced_configurator_modal .js_product:has(strong:contains(Conference Chair)) .js_add',
    extra_trigger: '.oe_advanced_configurator_modal .js_product:has(strong:contains(Conference Chair))',
    run: 'click'
}, {
    trigger: '.oe_advanced_configurator_modal .js_product:has(strong:contains(Chair floor protection)) .js_add',
    extra_trigger: '.oe_advanced_configurator_modal .js_product:has(strong:contains(Chair floor protection))',
    run: 'click'
}, {
    trigger: 'span:contains(1,557.00)',
    run: function (){}, // check
}, {
    trigger: 'button:has(span:contains(Proceed to Checkout))',
    run: 'click',
}]});

return __exports;
});
;

/**********************************************************************************************************
*  Filepath: /website_sale_product_configurator/static/tests/tours/website_sale_variants_modal_window.js  *
*  Lines: 70                                                                                              *
**********************************************************************************************************/
odoo.define('@website_sale_product_configurator/../tests/tours/website_sale_variants_modal_window', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/
    
    const { registry } = require("@web/core/registry");

    // This tour relies on a data created from the python test.
    registry.category("web_tour.tours").add('tour_variants_modal_window', {
        test: true,
        url: '/shop?search=Short (TEST)',
        steps: () => [
        {
            content: "Select the Short (TEST) product",
            trigger: '.oe_product_cart a:containsExact("Short (TEST)")',
        },
        {
            content: "Click on the always variant",
            trigger: 'input[data-attribute_name="Always attribute size"][data-value_name="M always"]',
        },
        {
            content: "Click on the dynamic variant",
            trigger: 'input[data-attribute_name="Dynamic attribute size"][data-value_name="M dynamic"]',
        },
        {
            content: "Click on the never variant",
            trigger: 'input[data-attribute_name="Never attribute size"][data-value_name="M never"]',
        },
        {
            content: "Click on the never custom variant",
            trigger: 'input[data-attribute_name="Never attribute size custom"][data-value_name="Yes never custom"]',
        },
        {
            trigger: 'input.variant_custom_value',
            run: 'text TEST',
        },
        {
            content: "Click add to cart",
            trigger: '#add_to_cart',
        },
        {
            content: "Go through the modal window of the product configurator",
            extra_trigger: '.oe_advanced_configurator_modal',
            trigger: 'button span:contains(Proceed to Checkout)',
            run: 'click'
        },
        {
            content: "Check the product is in the cart",
            trigger: 'td.td-product_name:contains(Short (TEST))',
        },
        {
            content: "Check always variant",
            trigger: 'td.td-product_name:contains(M always)',
        },
        {
            content: "Check dynamic variant",
            trigger: 'td.td-product_name:contains(M dynamic)',
        },
        {
            content: "Check never variant",
            trigger: 'td.td-product_name:contains(Never attribute size: M never)',
        },
        {
            content: "Check never custom variant",
            trigger: 'td.td-product_name:contains(Never attribute size custom: Yes never custom: TEST)',
        }
    ]});

return __exports;
});
;

/*************************************************************************************
*  Filepath: /website_sale_stock/static/tests/tours/website_sale_stock_multilang.js  *
*  Lines: 54                                                                         *
*************************************************************************************/
odoo.define('@website_sale_stock/../tests/tours/website_sale_stock_multilang', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('website_sale_stock_multilang', {
    test: true,
    url: '/fr/shop?search=unavailable',
    steps: () => [{
        content: "Open unavailable product page",
        trigger: 'a[content="unavailable_product"]',
    }, {
        content: "Check out of stock message",
        trigger: '#out_of_stock_message:contains("Hors-stock")',
        isCheck: true,
    }, {
        content: "Check price",
        trigger: 'span:contains("123,45")',
        isCheck: true,
    }, {
        content: "Open language selector",
        trigger: '.js_language_selector button',
    }, {
        content: "Switch to English",
        trigger: '.js_change_lang[data-url_code="en"]',
    }, {
        content: "Check out of stock message",
        trigger: '#out_of_stock_message:contains("Out of stock")',
        isCheck: true,
    }, {
        content: "Check price",
        trigger: 'span:contains("123.45")',
        isCheck: true,
    }, {
        content: "Open language selector",
        trigger: '.js_language_selector button',
    }, {
        content: "Switch to French",
        trigger: '.js_change_lang[data-url_code="fr"]',
    }, {
        content: "Check out of stock message",
        trigger: '#out_of_stock_message:contains("Hors-stock")',
        isCheck: true,
    }, {
        content: "Check price",
        trigger: 'span:contains("123,45")',
        isCheck: true,
    }],
});

return __exports;
});
;

/**********************************************************************************************
*  Filepath: /website_sale_stock/static/tests/tours/website_sale_stock_stock_notification.js  *
*  Lines: 37                                                                                  *
**********************************************************************************************/
odoo.define('@website_sale_stock/../tests/tours/website_sale_stock_stock_notification', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('back_in_stock_notification_product', {
        test: true,
        url: '/shop?search=Macbook%20Pro',
    steps: () => [
        {
            content: "Open product page",
            trigger: 'a:contains("Macbook Pro")',
        },
        {
            content: "Click on 'Be notified when back in stock'",
            trigger: '#product_stock_notification_message',
        },
        {
            content: "Fill email form",
            trigger: 'div[id="stock_notification_form"] input[name="email"]',
            run: 'text test@test.test',
        },
        {
            content: "Click on the button",
            trigger: '#product_stock_notification_form_submit_button',
        },
        {
            content: "Success Message",
            trigger: '#stock_notification_success_message',
        },
    ],
});

return __exports;
});
;

/******************************************************************************************************************
*  Filepath: /website_sale_stock/static/tests/tours/website_sale_stock_message_after_close_configurator_modal.js  *
*  Lines: 58                                                                                                      *
******************************************************************************************************************/
odoo.define('@website_sale_stock/../tests/tours/website_sale_stock_message_after_close_configurator_modal', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('website_sale_stock_message_after_close_onfigurator_modal_with_optional_products', {
    // This tour relies on a data created from the python test.
    test: true,
    url: '/shop?search=Product With Optional (TEST)',
    steps: () => [{
        content: "Select Customizable Desk",
        trigger: '.oe_product_cart a:contains("Product With Optional (TEST)")',
    }, {
        content: "Check that the stock quantity is displayed and correct",
        trigger: '#threshold_message:contains("30")',
        run: function () { },
    }, {
        content: "Add to cart",
        trigger: '#add_to_cart',
    }, {
        content: "Continue shoppping",
        extra_trigger: '.oe_advanced_configurator_modal',
        trigger: 'button span:contains(Continue Shopping)',
        run: 'click'
    }, {
        content: "Check that the stock quantity is displayed and correct after adding to cart",
        trigger: '#threshold_message:contains("29")',
        run: function () { },
    }
    ]
});

registry.category("web_tour.tours").add('website_sale_stock_message_after_close_onfigurator_modal_without_optional_products', {
    // This tour relies on a data created from the python test.
    test: true,
    url: '/shop?search=Product Without Optional (TEST)',
    steps: () => [{
        content: "Select Office Lamp",
        trigger: '.oe_product_cart a:contains("Product Without Optional (TEST)")',
    }, {
        content: "Check that the stock quantity is displayed and correct",
        trigger: '#threshold_message:contains("30")',
        run: function () { },
    }, {
        content: "Add to cart",
        trigger: '#add_to_cart',
    }, {
        content: "Check that the stock quantity is displayed and correct after adding to cart",
        trigger: '#threshold_message:contains("29")',
        run: function () { },
    }
    ]
});

return __exports;
});
;

/**********************************************************************************************
*  Filepath: /website_sale_subscription/static/tests/tours/website_sale_subscription_tour.js  *
*  Lines: 69                                                                                  *
**********************************************************************************************/
odoo.define('@website_sale_subscription/../tests/tours/website_sale_subscription_tour', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('shop_buy_subscription_product', {
    test: true,
    url: '/shop',
    steps: () => [
        {
            content: "Search streaming write text",
            trigger: 'form input[name="search"]',
            run: "text Streaming SUB Week",
        },
        {
            content: "Search streaming click",
            trigger: 'form:has(input[name="search"]) .oe_search_button',
        },
        {
            content: "Select streaming",
            trigger: '.oe_product_cart:first a:contains("Streaming SUB Weekly")',
        },
        {
            content: "Add one quantity",
            trigger: '.css_quantity a.js_add_cart_json i.fa-plus',
        },
        {
            content: "click on add to cart",
            trigger: '#product_detail form[action^="/shop/cart/update"] #add_to_cart',
        },
        {
            content: "See added t o cart + try to add other recurrence",
            trigger: '.my_cart_quantity:contains("2")',
            run: function () {
                window.location.href = '/shop';
            },
        },
        {
            content: "Search streaming monthly write text",
            trigger: 'form input[name="search"]',
            run: "text Streaming SUB month",
        },
        {
            content: "Search streaming monthly click",
            trigger: 'form:has(input[name="search"]) .oe_search_button',
        },
        {
            content: "Select streaming monthly",
            trigger: '.oe_product_cart:first a:contains("Streaming SUB Monthly")',
        },
        {
            content: "Check that we cannot add streaming monthly",
            trigger: '#product_detail p:contains("This product pricing is not compatible with the product(s) in your cart.")',
            run: function () {}, // it's a check
        },
        {
            content: "go to cart",
            trigger: '.my_cart_quantity:contains("2")',
            run: function () {
                window.location.href = '/shop/cart';
            },
        },
    ]
});

return __exports;
});
;

/**********************************************************************************
*  Filepath: /website_appointment/static/tests/tours/website_appointment_tour.js  *
*  Lines: 90                                                                      *
**********************************************************************************/
odoo.define('@website_appointment/../tests/tours/website_appointment_tour', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('website_appointment_tour', {
    test: true,
    url: '/web',
    steps: () => [
    stepUtils.showAppsMenuItem(),
    {
        trigger: '.o_app[data-menu-xmlid="calendar.mail_menu_calendar"]',
        content: 'click on calendar app',
    }, {
        trigger: 'a[data-menu-xmlid="appointment.appointment_type_menu"]',
        content: 'click on Appointment',
    }, {
        trigger: '.o-kanban-button-new',
        content: 'click on Create button',
    }, {
        trigger: 'input[name="name"]',
        content: 'set name of appointment type',
    }, {
        trigger: 'input[name="max_schedule_days"]',
        content: 'set max scheduled days',
        run: 'text 45',
    }, {
        trigger: 'div[name="staff_user_ids"] a',
        content: 'add users to the appointment_type',
    }, {
        trigger: '.o_list_record_selector',
        content: 'select users',
    }, {
        trigger: '.o_select_button',
        content: 'save new users for the appointment type',
    }, {
        trigger: 'a:contains("Availability")',
        content: 'go to slots tab',
    }, {
        trigger: 'div[name="slot_ids"] a',
        content: 'click on add a line',
    }, {
        trigger: '.o_form_button_save',
        content: 'save appointment type',
    }, {
        trigger: 'button[name="is_published"]',
        extra_trigger: 'button.o_form_button_create',
        content: 'go to the frontend',
    }, {
        trigger: 'iframe td.o_day:first',
        content: 'click on first date available',
    }, {
        trigger: 'iframe .o_slots_list a:first',
        content: 'click on first slot available',
    }, {
        trigger: 'iframe input[id="phone_field"]',
        content: 'fill tel field',
        run: 'text 0123456789'
    }, {
        trigger: 'iframe button[type="submit"]',
        content: 'confirm appointment',
        run: 'click',
    }, {
        trigger: 'iframe a:contains("Cancel") i',
        content: 'cancel appointment',
        run: 'click',
    }, {
        trigger: '.o_website_edit_in_backend > a',
        content: 'return in backend',
        run: 'click',
    }, {
        trigger: 'button.dropdown-toggle',
        content: 'click on Action dropdown',
        run: 'click',
    }, {
        trigger: 'a:contains("Delete")',
        content: 'delete appointment type',
        run: 'click',
    }, {
        trigger: 'button.btn-primary:contains("Ok")',
        content: 'confirm delete',
        run: 'click',
    }
]});

return __exports;
});
;

/************************************************************
*  Filepath: /web/static/tests/ignore_missing_deps_stop.js  *
*  Lines: 1                                                 *
************************************************************/
window.__odooIgnoreMissingDependencies = false;


//# sourceMappingURL=/web/assets/1599-7c80f98/web.__assets_tests_call__.js.map