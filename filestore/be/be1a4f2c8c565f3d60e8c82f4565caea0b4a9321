
/*************************************************
*  Filepath: /web_enterprise/static/src/main.js  *
*  Lines: 29                                     *
*************************************************/
odoo.define('@web_enterprise/main', ['@web/start', '@web_enterprise/webclient/webclient'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { startWebClient } = require("@web/start");
const { WebClientEnterprise } = require("@web_enterprise/webclient/webclient");

/**
 * This file starts the enterprise webclient. In the manifest, it replaces
 * the community main.js to load a different webclient class
 * (WebClientEnterprise instead of WebClient)
 */

if ("serviceWorker" in navigator) {
    navigator.serviceWorker
        .register("/web/service-worker.js", { scope: "/web" })
        .then((registration) => {
            console.info("Registration successful, scope is:", registration.scope);
        })
        .catch((error) => {
            console.error("Service worker registration failed, error:", error);
        });
}

startWebClient(WebClientEnterprise);

return __exports;
});
;

/***************************************
*  Filepath: /web/static/src/start.js  *
*  Lines: 73                           *
***************************************/
odoo.define('@web/start', ['@web/env', '@web/legacy/legacy_setup', '@web/legacy/utils', '@web/core/l10n/localization', '@web/session', '@web/core/utils/render', '@web/core/assets', '@web/core/browser/feature_detection', '@odoo/owl'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { makeEnv, startServices } = require("@web/env");
const { legacySetupProm } = require("@web/legacy/legacy_setup");
const { mapLegacyEnvToWowlEnv } = require("@web/legacy/utils");
const { localization } = require("@web/core/l10n/localization");
const { session } = require("@web/session");
const { renderToString } = require("@web/core/utils/render");
const { setLoadXmlDefaultApp, templates } = require("@web/core/assets");
const { hasTouch } = require("@web/core/browser/feature_detection");

const { App, whenReady } = require("@odoo/owl");

/**
 * Function to start a webclient.
 * It is used both in community and enterprise in main.js.
 * It's meant to be webclient flexible so we can have a subclass of
 * webclient in enterprise with added features.
 *
 * @param {Component} Webclient
 */
__exports.startWebClient = startWebClient; async function startWebClient(Webclient) {
    odoo.info = {
        db: session.db,
        server_version: session.server_version,
        server_version_info: session.server_version_info,
        isEnterprise: session.server_version_info.slice(-1)[0] === "e",
    };
    odoo.isReady = false;

    // setup environment
    const env = makeEnv();
    await startServices(env);

    // start web client
    await whenReady();
    const legacyEnv = await legacySetupProm;
    mapLegacyEnvToWowlEnv(legacyEnv, env);
    const app = new App(Webclient, {
        name: "Odoo Web Client",
        env,
        templates,
        dev: env.debug,
        warnIfNoStaticProps: true,
        translatableAttributes: ["data-tooltip"],
        translateFn: env._t,
    });
    renderToString.app = app;
    setLoadXmlDefaultApp(app);
    const root = await app.mount(document.body);
    const classList = document.body.classList;
    if (localization.direction === "rtl") {
        classList.add("o_rtl");
    }
    if (env.services.user.userId === 1) {
        classList.add("o_is_superuser");
    }
    if (env.debug) {
        classList.add("o_debug");
    }
    if (hasTouch()) {
        classList.add("o_touch_device");
    }
    // delete odoo.debug; // FIXME: some legacy code rely on this
    odoo.__WOWL_DEBUG__ = { root };
    odoo.isReady = true;
}

return __exports;
});
;

/*****************************************************
*  Filepath: /web/static/src/legacy/legacy_setup.js  *
*  Lines: 64                                         *
*****************************************************/
odoo.define('@web/legacy/legacy_setup', ['@web/core/registry', '@web/legacy/utils', '@web/legacy/backend_utils', 'web.AbstractService', 'web.env', 'web.session', 'web.pseudo_web_client', '@web/core/assets', '@odoo/owl'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module alias=web.legacySetup **/

const { registry } = require("@web/core/registry");
const {
    makeLegacyNotificationService,
    makeLegacySessionService,
    makeLegacyDialogMappingService,
    makeLegacyCrashManagerService,
    makeLegacyCommandService,
    makeLegacyDropdownService,
} = require("@web/legacy/utils");
const { makeLegacyActionManagerService } = require("@web/legacy/backend_utils");
const AbstractService = require("web.AbstractService");
const legacyEnv = require("web.env");
const session = require("web.session");
const makeLegacyWebClientService = require("web.pseudo_web_client");
const { templates } = require("@web/core/assets");

const { Component, whenReady } = require("@odoo/owl");

let legacySetupResolver;
const legacySetupProm = __exports.legacySetupProm = new Promise((resolve) => {
    legacySetupResolver = resolve;
});

// build the legacy env and set it on Component (this was done in main.js,
// with the starting of the webclient)
(async () => {
    AbstractService.prototype.deployServices(legacyEnv);
    Component.env = legacyEnv;
    const legacyActionManagerService = makeLegacyActionManagerService(legacyEnv);
    const serviceRegistry = registry.category("services");
    serviceRegistry.add("legacy_action_manager", legacyActionManagerService);
    // add a service to redirect rpc events triggered on the bus in the
    // legacy env on the bus in the wowl env
    const legacySessionService = makeLegacySessionService(legacyEnv, session);
    serviceRegistry.add("legacy_session", legacySessionService);
    const legacyWebClientService = makeLegacyWebClientService(legacyEnv);
    serviceRegistry.add("legacy_web_client", legacyWebClientService);
    serviceRegistry.add("legacy_notification", makeLegacyNotificationService(legacyEnv));
    serviceRegistry.add("legacy_crash_manager", makeLegacyCrashManagerService(legacyEnv));
    const legacyDialogMappingService = makeLegacyDialogMappingService(legacyEnv);
    serviceRegistry.add("legacy_dialog_mapping", legacyDialogMappingService);
    const legacyCommandService = makeLegacyCommandService(legacyEnv);
    serviceRegistry.add("legacy_command", legacyCommandService);
    serviceRegistry.add("legacy_dropdown", makeLegacyDropdownService(legacyEnv));
    const wowlToLegacyServiceMappers = registry.category("wowlToLegacyServiceMappers").getEntries();
    for (const [legacyServiceName, wowlToLegacyServiceMapper] of wowlToLegacyServiceMappers) {
        serviceRegistry.add(legacyServiceName, wowlToLegacyServiceMapper(legacyEnv));
    }
    await Promise.all([whenReady(), session.is_bound]);
    legacyEnv.templates = templates;
    legacySetupResolver(legacyEnv);
})();

return __exports;
});

odoo.define(`web.legacySetup`, ['@web/legacy/legacy_setup'], function (require) {
                        return require('@web/legacy/legacy_setup')[Symbol.for("default")];
                        });
;

/***************************************************************************
*  Filepath: /web_studio/static/src/client_action/studio_action_loader.js  *
*  Lines: 26                                                               *
***************************************************************************/
odoo.define('@web_studio/client_action/studio_action_loader', ['@web/core/registry', '@web/core/assets', '@web/webclient/actions/action_service', '@odoo/owl'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { LazyComponent } = require("@web/core/assets");
const { standardActionServiceProps } = require("@web/webclient/actions/action_service");

const { Component, xml } = require("@odoo/owl");

class StudioActionLoader extends Component {
    static components = { LazyComponent };
    static template = xml`
        <LazyComponent bundle="'web_studio.studio_assets'" Component="'StudioClientAction'" props="props"/>
    `;
    static props = {
        ...standardActionServiceProps,
        props: { type: Object, optional: true },
        Component: { type: Function, optional: true },
    };
}
registry.category("actions").add("studio", StudioActionLoader);

return __exports;
});
;

/***************************************************************************************
*  Filepath: /web_studio/static/src/client_action/app_creator/app_creator_shortcut.js  *
*  Lines: 15                                                                           *
***************************************************************************************/
odoo.define('@web_studio/client_action/app_creator/app_creator_shortcut', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

const actionRegistry = registry.category("actions");

actionRegistry.add("action_web_studio_app_creator",
    (env) => env.services.studio.open(env.services.studio.MODES.APP_CREATOR)
);

return __exports;
});
;

/***************************************
*  Filepath: /voip/static/src/main.js  *
*  Lines: 18                           *
***************************************/
odoo.define('@voip/main', ['@voip/voip_service', '@voip/user_agent_service', '@web/core/registry', '@voip/ringtone_service'], function (require) {
'use strict';
let __exports = {};
/* @odoo-module */

const { voipService } = require("@voip/voip_service");
const { userAgentService } = require("@voip/user_agent_service");
const { registry } = require("@web/core/registry");
const { ringtoneService } = require("@voip/ringtone_service");

registry
    .category("services")
    .add("voip", voipService)
    .add("ringtone", ringtoneService)
    .add("voip.user_agent", userAgentService);

return __exports;
});


//# sourceMappingURL=/web/assets/1597-2f5cda0/web.assets_backend_prod_only.js.map